
cpen391project.elf:     file format elf32-littlenios2
cpen391project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001bb7c memsz 0x0001bb7c flags r-x
    LOAD off    0x0001cb9c vaddr 0x0801bb9c paddr 0x0801d6b8 align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x0001f1d4 vaddr 0x0801f1d4 paddr 0x0801f1d4 align 2**12
         filesz 0x00000000 memsz 0x000020ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010cfc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000ace4  08010eb8  08010eb8  00011eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  0801bb9c  0801d6b8  0001cb9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000020ac  0801f1d4  0801f1d4  0001f1d4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08021280  08021280  0001e6b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001e6b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000de0  00000000  00000000  0001e6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024670  00000000  00000000  0001f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000095b1  00000000  00000000  00043b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b406  00000000  00000000  0004d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000265c  00000000  00000000  000584e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003670  00000000  00000000  0005ab44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d3e  00000000  00000000  0005e1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00074ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  00074f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00079a6e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00079a71  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00079a7d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00079a7e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00079a7f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00079a8a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00079a95  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00079aa0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004e  00000000  00000000  00079aab  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  00079af9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006bd81  00000000  00000000  0007e645  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08010eb8 l    d  .rodata	00000000 .rodata
0801bb9c l    d  .rwdata	00000000 .rwdata
0801f1d4 l    d  .bss	00000000 .bss
08021280 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpen391project_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Bresenhams_Line_Drawing_Algorithm.c
00000000 l    df *ABS*	00000000 ColourPallette.c
00000000 l    df *ABS*	00000000 Fill.c
00000000 l    df *ABS*	00000000 Graphics.c
00000000 l    df *ABS*	00000000 OutGraphicsCharFont2.c
00000000 l    df *ABS*	00000000 TouchScreen.c
00000000 l    df *ABS*	00000000 arduino.c
00000000 l    df *ABS*	00000000 cpen391project.c
00000000 l    df *ABS*	00000000 initial.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801b8ca l     O .rodata	00000010 zeroes.4181
0801b8da l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080041dc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005d5c l     F .text	00000008 __fp_lock
08005d64 l     F .text	00000008 __fp_unlock
08005d78 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801bb9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0801bfe0 l     O .rwdata	00000020 lc_ctype_charset
0801bfc0 l     O .rwdata	00000020 lc_message_charset
0801c000 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801b90c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
080091d8 l     F .text	000000fc __sprint_r.part.0
0801ba40 l     O .rodata	00000010 blanks.4125
0801ba30 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800baf4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e220 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800e340 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800e36c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800e46c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800e560 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800e644 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800e820 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801d6a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800ea7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800ebc4 l     F .text	00000038 alt_dev_reg
0801c5e8 l     O .rwdata	00001060 jtag_uart_0
0801d648 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800eec8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800f0cc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800f6ec l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800fe1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010358 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010490 l     F .text	00000050 alt_get_errno
080104e0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080004c4 g     F .text	00000044 sign
08008818 g     F .text	00000074 _mprec_log10
08008904 g     F .text	0000008c __any_on
0800ab28 g     F .text	00000054 _isatty_r
0801b918 g     O .rodata	00000028 __mprec_tinytens
0800e768 g     F .text	00000078 alt_main
08001f28 g     F .text	000000b8 _puts_r
08021180 g     O .bss	00000100 alt_irq
0800ab7c g     F .text	0000005c _lseek_r
0801d6b8 g       *ABS*	00000000 __flash_rwdata_start
0800f85c g     F .text	0000003c alt_up_character_lcd_send_cmd
0800cd88 g     F .text	00000084 .hidden __eqdf2
08000304 g     F .text	0000007c ProgramPalette
08021280 g       *ABS*	00000000 __alt_heap_start
08001eec g     F .text	0000003c printf
0801156a g     O .rodata	00000a64 Font10x14
0800ada4 g     F .text	0000009c _wcrtomb_r
080018a0 g     F .text	000000d4 GetPress
0801f240 g     O .bss	00001f40 XYStack
080090d0 g     F .text	0000005c __sseek
080060ac g     F .text	00000010 __sinit
08000bd0 g     F .text	00000058 graph_clearAll
0800ac34 g     F .text	00000154 __swbuf_r
08006b24 g     F .text	0000007c _setlocale_r
08005f18 g     F .text	00000064 __sfmoreglue
08000734 g     F .text	00000060 PopPixel
0800e800 g     F .text	00000020 __malloc_unlock
08007784 g     F .text	0000015c memmove
08006094 g     F .text	00000018 _cleanup
08007a04 g     F .text	000000a8 _Balloc
0800ce0c g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800f7e8 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08001a48 g     F .text	00000048 getcharTouch
0800aad0 g     F .text	00000058 _fstat_r
0801f1fc g     O .bss	00000004 errno
0800904c g     F .text	00000008 __seofread
0801f204 g     O .bss	00000004 alt_argv
08025674 g       *ABS*	00000000 _gp
0801c468 g     O .rwdata	00000180 alt_fd_list
08001974 g     F .text	000000d4 GetRelease
0800ffc8 g     F .text	00000090 alt_find_dev
0800764c g     F .text	00000138 memcpy
0800f9f8 g     F .text	00000050 alt_up_character_lcd_write_fd
0801f1d8 g     O .bss	00000004 current_state
08001658 g     F .text	00000190 OutGraphicsCharFont2a
08005d6c g     F .text	0000000c _cleanup_r
0800e048 g     F .text	000000d0 .hidden __floatsidf
08010418 g     F .text	00000078 alt_io_redirect
0800ceec g     F .text	000000e0 .hidden __ltdf2
08010eb8 g       *ABS*	00000000 __DTOR_END__
08001fe0 g     F .text	00000014 puts
08008f30 g     F .text	00000074 __fpclassifyd
08008774 g     F .text	000000a4 __ratio
0800a648 g     F .text	00000024 __vfiprintf_internal
0800f2c8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08001ec0 g     F .text	0000002c _printf_r
0800bc10 g     F .text	00000008 .hidden __udivsi3
0800e4bc g     F .text	000000a4 isatty
0801b968 g     O .rodata	000000c8 __mprec_tens
08016060 g     O .rodata	00005794 Font38x59
08006ba0 g     F .text	0000000c __locale_charset
08010a88 g     F .text	0000008c alt_icache_flush
0801f1f8 g     O .bss	00000004 __malloc_top_pad
08000794 g     F .text	00000038 IsStackEmpty
0801d674 g     O .rwdata	00000004 Next
0801d680 g     O .rwdata	00000004 __mb_cur_max
08006bd0 g     F .text	0000000c _localeconv_r
080007cc g     F .text	00000404 Fill
08007e04 g     F .text	0000003c __i2b
08006510 g     F .text	000004a4 __sfvwrite_r
08008fa4 g     F .text	00000054 _sbrk_r
0800abd8 g     F .text	0000005c _read_r
0801d6a0 g     O .rwdata	00000004 alt_max_fd
0800a7e0 g     F .text	00000100 _fclose_r
08005d2c g     F .text	00000030 fflush
0801f1f4 g     O .bss	00000004 __malloc_max_sbrked_mem
08000380 g     F .text	0000009c HLine
0800bc20 g     F .text	0000089c .hidden __adddf3
08001a90 g     F .text	00000048 getcharSensor
0800851c g     F .text	0000011c __b2d
0800b564 g     F .text	00000590 .hidden __umoddi3
0800e694 g     F .text	000000d4 lseek
0801d678 g     O .rwdata	00000004 _global_impure_ptr
08008990 g     F .text	000005a0 _realloc_r
08021280 g       *ABS*	00000000 __bss_end
08010268 g     F .text	000000f0 alt_iic_isr_register
0801079c g     F .text	00000104 alt_tick
0800afa4 g     F .text	000005c0 .hidden __udivdi3
0800a8f4 g     F .text	00000184 _fputwc_r
0801b940 g     O .rodata	00000028 __mprec_bigtens
08007be8 g     F .text	00000104 __s2b
0800e118 g     F .text	000000a4 .hidden __floatunsidf
080082c4 g     F .text	00000060 __mcmp
08001e74 g     F .text	0000004c Init_Touch
080060cc g     F .text	00000018 __fp_lock_all
0801f1d4 g     O .bss	00000004 last_height
0801021c g     F .text	0000004c alt_ic_irq_enabled
08010704 g     F .text	00000098 alt_alarm_stop
08011fce g     O .rodata	0000140a Font16x27
0801f20c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
0801c440 g     O .rwdata	00000028 alt_dev_null
0800fc8c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0800fe00 g     F .text	0000001c alt_dcache_flush_all
08007cec g     F .text	00000068 __hi0bits
0800dfc0 g     F .text	00000088 .hidden __fixdfsi
0800041c g     F .text	00000070 VLine
0801d6b8 g       *ABS*	00000000 __ram_rwdata_end
0801d698 g     O .rwdata	00000008 alt_dev_list
0800eacc g     F .text	000000f8 write
0801bb9c g       *ABS*	00000000 __ram_rodata_end
0800e3bc g     F .text	000000b0 fstat
08000c28 g     F .text	00000440 graph_goto_menu
0800ceec g     F .text	000000e0 .hidden __ledf2
080017e8 g     F .text	00000040 ScreenTouched
0800803c g     F .text	00000140 __pow5mult
080092ec g     F .text	0000135c ___vfiprintf_internal_r
0801f1ec g     O .bss	00000004 __nlocale_changed
0800bc18 g     F .text	00000008 .hidden __umodsi3
08021280 g       *ABS*	00000000 end
0800ee04 g     F .text	000000c4 altera_avalon_jtag_uart_init
08010eb8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800f760 g     F .text	00000088 alt_avalon_timer_sc_init
0800e1bc g     F .text	00000064 .hidden __clzsi2
0800f4d4 g     F .text	00000218 altera_avalon_jtag_uart_write
080060bc g     F .text	00000004 __sfp_lock_acquire
08007564 g     F .text	000000e8 memchr
0800f90c g     F .text	00000078 alt_up_character_lcd_write
0800208c g     F .text	00001ffc ___vfprintf_internal_r
08006220 g     F .text	000002f0 _free_r
08006bac g     F .text	00000010 __locale_mb_cur_max
08001e38 g     F .text	0000003c Init_Sensor
08010cf0 g     F .text	00000194 __call_exitprocs
0801f1e8 g     O .bss	00000004 __mlocale_changed
0801d684 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
0801f210 g     O .bss	00000004 _alt_tick_rate
0800817c g     F .text	00000148 __lshift
0801f214 g     O .bss	00000004 _alt_nticks
0800e870 g     F .text	000000fc read
0800ec30 g     F .text	00000070 alt_sys_init
0800fb44 g     F .text	00000088 alt_up_character_lcd_shift_display
08010bdc g     F .text	00000114 __register_exitproc
08007e40 g     F .text	000001fc __multiply
0800fbcc g     F .text	0000008c alt_up_character_lcd_erase_pos
0800f174 g     F .text	00000068 altera_avalon_jtag_uart_close
0801bb9c g       *ABS*	00000000 __ram_rwdata_start
08010eb8 g       *ABS*	00000000 __ram_rodata_start
0801f218 g     O .bss	00000028 __malloc_current_mallinfo
08008638 g     F .text	0000013c __d2b
0800eca0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080109d4 g     F .text	000000b4 alt_get_fd
0800a6c8 g     F .text	00000054 _close_r
08010b60 g     F .text	0000007c memcmp
0800ed60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08021280 g       *ABS*	00000000 __alt_stack_base
0800edb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080040ac g     F .text	00000130 __swsetup_r
0800c4bc g     F .text	000008cc .hidden __divdf3
08005f7c g     F .text	00000118 __sfp
0800888c g     F .text	00000078 __copybits
0801c038 g     O .rwdata	00000408 __malloc_av_
080060c8 g     F .text	00000004 __sinit_lock_release
0800cfcc g     F .text	00000724 .hidden __muldf3
08008ff8 g     F .text	00000054 __sread
080108c0 g     F .text	00000114 alt_find_file
080006d8 g     F .text	0000005c PushPixel
0800fe6c g     F .text	000000a4 alt_dev_llist_insert
0800e7e0 g     F .text	00000020 __malloc_lock
0800e9cc g     F .text	000000b0 sbrk
08005b04 g     F .text	00000228 _fflush_r
0800a71c g     F .text	000000c4 _calloc_r
0801f1d4 g       *ABS*	00000000 __bss_start
080078e0 g     F .text	00000124 memset
08001c70 g     F .text	000001c8 main
0801f208 g     O .bss	00000004 alt_envp
0801f1f0 g     O .bss	00000004 __malloc_max_total_mem
0800ed00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800ad88 g     F .text	0000001c __swbuf
08001868 g     F .text	00000038 WaitForData
08000274 g     F .text	00000090 ReadAPixel
0800fabc g     F .text	00000088 alt_up_character_lcd_shift_cursor
0800912c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800a8e0 g     F .text	00000014 fclose
080043dc g     F .text	00001728 _dtoa_r
08006dbc g     F .text	000007a8 _malloc_r
0800af18 g     F .text	00000030 __ascii_wctomb
08000508 g     F .text	000001d0 Line
0801d6a4 g     O .rwdata	00000004 alt_errno
080069b4 g     F .text	000000b8 _fwalk
0800bb60 g     F .text	00000054 .hidden __divsi3
0800f8cc g     F .text	00000040 alt_up_character_lcd_open_dev
080060fc g     F .text	00000124 _malloc_trim_r
08010eb8 g       *ABS*	00000000 __CTOR_END__
0800f898 g     F .text	00000034 alt_up_character_lcd_init
08009134 g     F .text	000000a4 strcmp
08010eb8 g       *ABS*	00000000 __flash_rodata_start
08010eb8 g       *ABS*	00000000 __DTOR_LIST__
0800cd88 g     F .text	00000084 .hidden __nedf2
0800ebfc g     F .text	00000034 alt_irq_init
0800e96c g     F .text	00000060 alt_release_fd
0800fc58 g     F .text	00000034 alt_up_character_lcd_cursor_off
0801ba50 g     O .rodata	00000100 .hidden __clz_tab
0801f1e4 g     O .bss	00000004 _PathLocale
08010b14 g     F .text	00000014 atexit
0800a66c g     F .text	0000005c _write_r
08006bdc g     F .text	0000001c setlocale
0801d67c g     O .rwdata	00000004 _impure_ptr
0801f200 g     O .bss	00000004 alt_argc
080001f8 g     F .text	0000007c WriteAPixel
0800ff6c g     F .text	0000005c _do_dtors
08006bc8 g     F .text	00000008 __locale_cjk_lang
080112d0 g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
080084bc g     F .text	00000060 __ulp
080060e4 g     F .text	00000018 __fp_unlock_all
0801d690 g     O .rwdata	00000008 alt_fs_list
0801f1dc g     O .bss	00000004 mq5
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006bf8 g     F .text	0000000c localeconv
08010088 g     F .text	00000050 alt_ic_isr_register
0801f1e0 g     O .bss	00000004 mq135
0801d6b8 g       *ABS*	00000000 _edata
08021280 g       *ABS*	00000000 _end
08001068 g     F .text	000004e4 graph_showGasFrame
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800f1dc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08010178 g     F .text	000000a4 alt_ic_irq_disable
08009054 g     F .text	0000007c __swrite
0801d688 g     O .rwdata	00000004 __malloc_trim_threshold
080108a0 g     F .text	00000020 altera_nios2_qsys_irq_init
08006bbc g     F .text	0000000c __locale_msgcharset
08010b28 g     F .text	00000038 exit
08006a6c g     F .text	000000b8 _fwalk_reent
08008324 g     F .text	00000198 __mdiff
0800bbb4 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080060c0 g     F .text	00000004 __sfp_lock_release
08001828 g     F .text	00000040 SensorReceivedData
08000000 g       *ABS*	00000000 __alt_mem_sdram
08010eb8 g     O .rodata	00000400 ColourPalletteData
0800f984 g     F .text	00000074 alt_up_character_lcd_string
08001ad8 g     F .text	00000198 update
080133d8 g     O .rodata	00002c88 Font22x40
08010e84 g     F .text	00000034 _exit
0800fcc0 g     F .text	00000140 alt_alarm_start
08006c04 g     F .text	000001b8 __smakebuf_r
08001ff4 g     F .text	00000098 strlen
080105ac g     F .text	00000158 open
0800ce0c g     F .text	000000e0 .hidden __gedf2
0801d68c g     O .rwdata	00000004 __wctomb
0800048c g     F .text	00000038 abs
080092d4 g     F .text	00000018 __sprint_r
08010058 g     F .text	00000030 alt_icache_flush_all
0800fa48 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0801d6ac g     O .rwdata	00000004 alt_priority_mask
080100d8 g     F .text	000000a0 alt_ic_irq_enable
08004088 g     F .text	00000024 __vfprintf_internal
0800af48 g     F .text	0000005c _wctomb_r
0800d6f0 g     F .text	000008d0 .hidden __subdf3
08007d54 g     F .text	000000b0 __lo0bits
0801d6b0 g     O .rwdata	00000008 alt_alarm_list
0800ff10 g     F .text	0000005c _do_ctors
0800ae40 g     F .text	000000d8 wcrtomb
0800e270 g     F .text	000000d0 close
0800154c g     F .text	0000010c graph_updateGasValue
0800e5c4 g     F .text	00000080 alt_load
0800aa78 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080060c4 g     F .text	00000004 __sinit_lock_acquire
08007ad4 g     F .text	00000114 __multadd
08007aac g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	10846004 	addi	r2,r2,4480
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	10846004 	addi	r2,r2,4480
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d6959d14 	ori	gp,gp,22132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	10bc7514 	ori	r2,r2,61908

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18c4a014 	ori	r3,r3,4736

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800e5c40 	call	800e5c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800e7680 	call	800e768 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <WriteAPixel>:
/*******************************************************************************************
* This function writes a single pixel to the x,y coords specified using the specified colour
* Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
********************************************************************************************/
void WriteAPixel(int x, int y, int Colour)
{
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	df000315 	stw	fp,12(sp)
 8000200:	df000304 	addi	fp,sp,12
 8000204:	e13ffd15 	stw	r4,-12(fp)
 8000208:	e17ffe15 	stw	r5,-8(fp)
 800020c:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 8000210:	0001883a 	nop
 8000214:	00a10034 	movhi	r2,33792
 8000218:	1080000b 	ldhu	r2,0(r2)
 800021c:	10bfffcc 	andi	r2,r2,65535
 8000220:	1080004c 	andi	r2,r2,1
 8000224:	103ffb26 	beq	r2,zero,8000214 <__alt_data_end+0xfc000214>

	GraphicsX1Reg = x;				// write coords to x1, y1
 8000228:	00a10034 	movhi	r2,33792
 800022c:	10800084 	addi	r2,r2,2
 8000230:	e0fffd17 	ldw	r3,-12(fp)
 8000234:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000238:	00a10034 	movhi	r2,33792
 800023c:	10800104 	addi	r2,r2,4
 8000240:	e0fffe17 	ldw	r3,-8(fp)
 8000244:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;			// set pixel colour
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10800384 	addi	r2,r2,14
 8000250:	e0ffff17 	ldw	r3,-4(fp)
 8000254:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;			// give graphics "write pixel" command
 8000258:	00a10034 	movhi	r2,33792
 800025c:	00c00284 	movi	r3,10
 8000260:	10c0000d 	sth	r3,0(r2)
}
 8000264:	e037883a 	mov	sp,fp
 8000268:	df000017 	ldw	fp,0(sp)
 800026c:	dec00104 	addi	sp,sp,4
 8000270:	f800283a 	ret

08000274 <ReadAPixel>:
* This function read a single pixel from the x,y coords specified and returns its colour
* Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
*********************************************************************************************/

int ReadAPixel(int x, int y)
{
 8000274:	defffd04 	addi	sp,sp,-12
 8000278:	df000215 	stw	fp,8(sp)
 800027c:	df000204 	addi	fp,sp,8
 8000280:	e13ffe15 	stw	r4,-8(fp)
 8000284:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 8000288:	0001883a 	nop
 800028c:	00a10034 	movhi	r2,33792
 8000290:	1080000b 	ldhu	r2,0(r2)
 8000294:	10bfffcc 	andi	r2,r2,65535
 8000298:	1080004c 	andi	r2,r2,1
 800029c:	103ffb26 	beq	r2,zero,800028c <__alt_data_end+0xfc00028c>

	GraphicsX1Reg = x;			// write coords to x1, y1
 80002a0:	00a10034 	movhi	r2,33792
 80002a4:	10800084 	addi	r2,r2,2
 80002a8:	e0fffe17 	ldw	r3,-8(fp)
 80002ac:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80002b0:	00a10034 	movhi	r2,33792
 80002b4:	10800104 	addi	r2,r2,4
 80002b8:	e0ffff17 	ldw	r3,-4(fp)
 80002bc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 80002c0:	00a10034 	movhi	r2,33792
 80002c4:	00c002c4 	movi	r3,11
 80002c8:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 80002cc:	0001883a 	nop
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	1080000b 	ldhu	r2,0(r2)
 80002d8:	10bfffcc 	andi	r2,r2,65535
 80002dc:	1080004c 	andi	r2,r2,1
 80002e0:	103ffb26 	beq	r2,zero,80002d0 <__alt_data_end+0xfc0002d0>
	return (int)(GraphicsColourReg) ;	// return the palette number (colour)
 80002e4:	00a10034 	movhi	r2,33792
 80002e8:	10800384 	addi	r2,r2,14
 80002ec:	1080000b 	ldhu	r2,0(r2)
 80002f0:	10bfffcc 	andi	r2,r2,65535
}
 80002f4:	e037883a 	mov	sp,fp
 80002f8:	df000017 	ldw	fp,0(sp)
 80002fc:	dec00104 	addi	sp,sp,4
 8000300:	f800283a 	ret

08000304 <ProgramPalette>:
** e.g. ProgramPalette(RED, 0x00FF0000) ;
**
************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 8000304:	defffd04 	addi	sp,sp,-12
 8000308:	df000215 	stw	fp,8(sp)
 800030c:	df000204 	addi	fp,sp,8
 8000310:	e13ffe15 	stw	r4,-8(fp)
 8000314:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 8000318:	0001883a 	nop
 800031c:	00a10034 	movhi	r2,33792
 8000320:	1080000b 	ldhu	r2,0(r2)
 8000324:	10bfffcc 	andi	r2,r2,65535
 8000328:	1080004c 	andi	r2,r2,1
 800032c:	103ffb26 	beq	r2,zero,800031c <__alt_data_end+0xfc00031c>
    GraphicsColourReg = PaletteNumber;
 8000330:	00a10034 	movhi	r2,33792
 8000334:	10800384 	addi	r2,r2,14
 8000338:	e0fffe17 	ldw	r3,-8(fp)
 800033c:	10c0000d 	sth	r3,0(r2)
    GraphicsX1Reg = RGB >> 16   ;        // program red value in ls.8 bit of X1 reg
 8000340:	00a10034 	movhi	r2,33792
 8000344:	10800084 	addi	r2,r2,2
 8000348:	e0ffff17 	ldw	r3,-4(fp)
 800034c:	1807d43a 	srai	r3,r3,16
 8000350:	10c0000d 	sth	r3,0(r2)
    GraphicsY1Reg = RGB ;                // program green and blue into ls 16 bit of Y1 reg
 8000354:	00a10034 	movhi	r2,33792
 8000358:	10800104 	addi	r2,r2,4
 800035c:	e0ffff17 	ldw	r3,-4(fp)
 8000360:	10c0000d 	sth	r3,0(r2)
    GraphicsCommandReg = ProgramPaletteColour; // issue command
 8000364:	00a10034 	movhi	r2,33792
 8000368:	00c00404 	movi	r3,16
 800036c:	10c0000d 	sth	r3,0(r2)
}
 8000370:	e037883a 	mov	sp,fp
 8000374:	df000017 	ldw	fp,0(sp)
 8000378:	dec00104 	addi	sp,sp,4
 800037c:	f800283a 	ret

08000380 <HLine>:
/********************************************************************************************* 
This function draw a horizontal line, 1 pixel at a time starting at the x,y coords specified
*********************************************************************************************/

void HLine(int x1, int y1, int length, int Colour)
{
 8000380:	defffb04 	addi	sp,sp,-20
 8000384:	df000415 	stw	fp,16(sp)
 8000388:	df000404 	addi	fp,sp,16
 800038c:	e13ffc15 	stw	r4,-16(fp)
 8000390:	e17ffd15 	stw	r5,-12(fp)
 8000394:	e1bffe15 	stw	r6,-8(fp)
 8000398:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 800039c:	0001883a 	nop
 80003a0:	00a10034 	movhi	r2,33792
 80003a4:	1080000b 	ldhu	r2,0(r2)
 80003a8:	10bfffcc 	andi	r2,r2,65535
 80003ac:	1080004c 	andi	r2,r2,1
 80003b0:	103ffb26 	beq	r2,zero,80003a0 <__alt_data_end+0xfc0003a0>

	GraphicsX1Reg = x1;				// write coords to x1, y1
 80003b4:	00a10034 	movhi	r2,33792
 80003b8:	10800084 	addi	r2,r2,2
 80003bc:	e0fffc17 	ldw	r3,-16(fp)
 80003c0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80003c4:	00a10034 	movhi	r2,33792
 80003c8:	10800104 	addi	r2,r2,4
 80003cc:	e0fffd17 	ldw	r3,-12(fp)
 80003d0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x1 + length;
 80003d4:	00a10034 	movhi	r2,33792
 80003d8:	10800184 	addi	r2,r2,6
 80003dc:	e0fffc17 	ldw	r3,-16(fp)
 80003e0:	1809883a 	mov	r4,r3
 80003e4:	e0fffe17 	ldw	r3,-8(fp)
 80003e8:	20c7883a 	add	r3,r4,r3
 80003ec:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;			// set pixel colour
 80003f0:	00a10034 	movhi	r2,33792
 80003f4:	10800384 	addi	r2,r2,14
 80003f8:	e0ffff17 	ldw	r3,-4(fp)
 80003fc:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;			// give graphics "write pixel" command
 8000400:	00a10034 	movhi	r2,33792
 8000404:	00c00044 	movi	r3,1
 8000408:	10c0000d 	sth	r3,0(r2)
}
 800040c:	e037883a 	mov	sp,fp
 8000410:	df000017 	ldw	fp,0(sp)
 8000414:	dec00104 	addi	sp,sp,4
 8000418:	f800283a 	ret

0800041c <VLine>:
/********************************************************************************************* 
This function draw a vertical line, 1 pixel at a time starting at the x,y coords specified
*********************************************************************************************/

void VLine(int x1, int y1, int length, int Colour)
{
 800041c:	defff904 	addi	sp,sp,-28
 8000420:	dfc00615 	stw	ra,24(sp)
 8000424:	df000515 	stw	fp,20(sp)
 8000428:	df000504 	addi	fp,sp,20
 800042c:	e13ffc15 	stw	r4,-16(fp)
 8000430:	e17ffd15 	stw	r5,-12(fp)
 8000434:	e1bffe15 	stw	r6,-8(fp)
 8000438:	e1ffff15 	stw	r7,-4(fp)
	int i;

	for(i = y1; i < y1+length; i++ )
 800043c:	e0bffd17 	ldw	r2,-12(fp)
 8000440:	e0bffb15 	stw	r2,-20(fp)
 8000444:	00000706 	br	8000464 <VLine+0x48>
		WriteAPixel(x1, i, Colour);
 8000448:	e13ffc17 	ldw	r4,-16(fp)
 800044c:	e17ffb17 	ldw	r5,-20(fp)
 8000450:	e1bfff17 	ldw	r6,-4(fp)
 8000454:	80001f80 	call	80001f8 <WriteAPixel>

void VLine(int x1, int y1, int length, int Colour)
{
	int i;

	for(i = y1; i < y1+length; i++ )
 8000458:	e0bffb17 	ldw	r2,-20(fp)
 800045c:	10800044 	addi	r2,r2,1
 8000460:	e0bffb15 	stw	r2,-20(fp)
 8000464:	e0fffd17 	ldw	r3,-12(fp)
 8000468:	e0bffe17 	ldw	r2,-8(fp)
 800046c:	1885883a 	add	r2,r3,r2
 8000470:	e0fffb17 	ldw	r3,-20(fp)
 8000474:	18bff416 	blt	r3,r2,8000448 <__alt_data_end+0xfc000448>
		WriteAPixel(x1, i, Colour);
}
 8000478:	e037883a 	mov	sp,fp
 800047c:	dfc00117 	ldw	ra,4(sp)
 8000480:	df000017 	ldw	fp,0(sp)
 8000484:	dec00204 	addi	sp,sp,8
 8000488:	f800283a 	ret

0800048c <abs>:
/*******************************************************************************
** Implementation of Bresenhams line drawing algorithm
*******************************************************************************/

int abs(int a)
{
 800048c:	defffe04 	addi	sp,sp,-8
 8000490:	df000115 	stw	fp,4(sp)
 8000494:	df000104 	addi	fp,sp,4
 8000498:	e13fff15 	stw	r4,-4(fp)
    if(a < 0)
 800049c:	e0bfff17 	ldw	r2,-4(fp)
 80004a0:	1000030e 	bge	r2,zero,80004b0 <abs+0x24>
        return -a ;
 80004a4:	e0bfff17 	ldw	r2,-4(fp)
 80004a8:	0085c83a 	sub	r2,zero,r2
 80004ac:	00000106 	br	80004b4 <abs+0x28>
    else
        return a ;
 80004b0:	e0bfff17 	ldw	r2,-4(fp)
}
 80004b4:	e037883a 	mov	sp,fp
 80004b8:	df000017 	ldw	fp,0(sp)
 80004bc:	dec00104 	addi	sp,sp,4
 80004c0:	f800283a 	ret

080004c4 <sign>:

int sign(int a)
{
 80004c4:	defffe04 	addi	sp,sp,-8
 80004c8:	df000115 	stw	fp,4(sp)
 80004cc:	df000104 	addi	fp,sp,4
 80004d0:	e13fff15 	stw	r4,-4(fp)
    if(a < 0)
 80004d4:	e0bfff17 	ldw	r2,-4(fp)
 80004d8:	1000020e 	bge	r2,zero,80004e4 <sign+0x20>
        return -1 ;
 80004dc:	00bfffc4 	movi	r2,-1
 80004e0:	00000506 	br	80004f8 <sign+0x34>
    else if (a == 0)
 80004e4:	e0bfff17 	ldw	r2,-4(fp)
 80004e8:	1000021e 	bne	r2,zero,80004f4 <sign+0x30>
        return 0 ;
 80004ec:	0005883a 	mov	r2,zero
 80004f0:	00000106 	br	80004f8 <sign+0x34>
    else
        return 1 ;
 80004f4:	00800044 	movi	r2,1
}
 80004f8:	e037883a 	mov	sp,fp
 80004fc:	df000017 	ldw	fp,0(sp)
 8000500:	dec00104 	addi	sp,sp,4
 8000504:	f800283a 	ret

08000508 <Line>:


void Line(int x1, int y1, int x2, int y2, int Colour)
{
 8000508:	defff004 	addi	sp,sp,-64
 800050c:	dfc00f15 	stw	ra,60(sp)
 8000510:	df000e15 	stw	fp,56(sp)
 8000514:	df000e04 	addi	fp,sp,56
 8000518:	e13ffc15 	stw	r4,-16(fp)
 800051c:	e17ffd15 	stw	r5,-12(fp)
 8000520:	e1bffe15 	stw	r6,-8(fp)
 8000524:	e1ffff15 	stw	r7,-4(fp)
    int x = x1;
 8000528:	e0bffc17 	ldw	r2,-16(fp)
 800052c:	e0bff215 	stw	r2,-56(fp)
    int y = y1;
 8000530:	e0bffd17 	ldw	r2,-12(fp)
 8000534:	e0bff315 	stw	r2,-52(fp)
    int dx = abs(x2 - x1);
 8000538:	e0fffe17 	ldw	r3,-8(fp)
 800053c:	e0bffc17 	ldw	r2,-16(fp)
 8000540:	1885c83a 	sub	r2,r3,r2
 8000544:	1000010e 	bge	r2,zero,800054c <Line+0x44>
 8000548:	0085c83a 	sub	r2,zero,r2
 800054c:	e0bff415 	stw	r2,-48(fp)
    int dy = abs(y2 - y1);
 8000550:	e0ffff17 	ldw	r3,-4(fp)
 8000554:	e0bffd17 	ldw	r2,-12(fp)
 8000558:	1885c83a 	sub	r2,r3,r2
 800055c:	1000010e 	bge	r2,zero,8000564 <Line+0x5c>
 8000560:	0085c83a 	sub	r2,zero,r2
 8000564:	e0bff515 	stw	r2,-44(fp)

    int s1 = sign(x2 - x1);
 8000568:	e0fffe17 	ldw	r3,-8(fp)
 800056c:	e0bffc17 	ldw	r2,-16(fp)
 8000570:	1885c83a 	sub	r2,r3,r2
 8000574:	1009883a 	mov	r4,r2
 8000578:	80004c40 	call	80004c4 <sign>
 800057c:	e0bff915 	stw	r2,-28(fp)
    int s2 = sign(y2 - y1);
 8000580:	e0ffff17 	ldw	r3,-4(fp)
 8000584:	e0bffd17 	ldw	r2,-12(fp)
 8000588:	1885c83a 	sub	r2,r3,r2
 800058c:	1009883a 	mov	r4,r2
 8000590:	80004c40 	call	80004c4 <sign>
 8000594:	e0bffa15 	stw	r2,-24(fp)
    int i, temp, interchange = 0, error ;
 8000598:	e03ff715 	stw	zero,-36(fp)

// if x1=x2 and y1=y2 then it is a line of zero length

    if(dx == 0 && dy == 0)
 800059c:	e0bff417 	ldw	r2,-48(fp)
 80005a0:	1000031e 	bne	r2,zero,80005b0 <Line+0xa8>
 80005a4:	e0bff517 	ldw	r2,-44(fp)
 80005a8:	1000011e 	bne	r2,zero,80005b0 <Line+0xa8>
        return ;
 80005ac:	00004506 	br	80006c4 <Line+0x1bc>
 // must be a complex line so use bresenhams algorithm
    else    {

// swap delta x and delta y depending upon slop of line

        if(dy > dx) {
 80005b0:	e0bff517 	ldw	r2,-44(fp)
 80005b4:	e0fff417 	ldw	r3,-48(fp)
 80005b8:	1880080e 	bge	r3,r2,80005dc <Line+0xd4>
            temp = dx ;
 80005bc:	e0bff417 	ldw	r2,-48(fp)
 80005c0:	e0bffb15 	stw	r2,-20(fp)
            dx = dy ;
 80005c4:	e0bff517 	ldw	r2,-44(fp)
 80005c8:	e0bff415 	stw	r2,-48(fp)
            dy = temp ;
 80005cc:	e0bffb17 	ldw	r2,-20(fp)
 80005d0:	e0bff515 	stw	r2,-44(fp)
            interchange = 1 ;
 80005d4:	00800044 	movi	r2,1
 80005d8:	e0bff715 	stw	r2,-36(fp)
        }

// initialise the error term to compensate for non-zero intercept

        error = (dy << 1) - dx ;    // (2 * dy) - dx
 80005dc:	e0bff517 	ldw	r2,-44(fp)
 80005e0:	1085883a 	add	r2,r2,r2
 80005e4:	1007883a 	mov	r3,r2
 80005e8:	e0bff417 	ldw	r2,-48(fp)
 80005ec:	1885c83a 	sub	r2,r3,r2
 80005f0:	e0bff815 	stw	r2,-32(fp)

// main loop
        for(i = 1; i <= dx; i++)    {
 80005f4:	00800044 	movi	r2,1
 80005f8:	e0bff615 	stw	r2,-40(fp)
 80005fc:	00002e06 	br	80006b8 <Line+0x1b0>
            WriteAPixel(x, y, Colour);
 8000600:	e13ff217 	ldw	r4,-56(fp)
 8000604:	e17ff317 	ldw	r5,-52(fp)
 8000608:	e1800217 	ldw	r6,8(fp)
 800060c:	80001f80 	call	80001f8 <WriteAPixel>

            while(error >= 0)   {
 8000610:	00001206 	br	800065c <Line+0x154>
                if(interchange == 1)
 8000614:	e0bff717 	ldw	r2,-36(fp)
 8000618:	10800058 	cmpnei	r2,r2,1
 800061c:	1000051e 	bne	r2,zero,8000634 <Line+0x12c>
                    x += s1 ;
 8000620:	e0fff217 	ldw	r3,-56(fp)
 8000624:	e0bff917 	ldw	r2,-28(fp)
 8000628:	1885883a 	add	r2,r3,r2
 800062c:	e0bff215 	stw	r2,-56(fp)
 8000630:	00000406 	br	8000644 <Line+0x13c>
                else
                    y += s2 ;
 8000634:	e0fff317 	ldw	r3,-52(fp)
 8000638:	e0bffa17 	ldw	r2,-24(fp)
 800063c:	1885883a 	add	r2,r3,r2
 8000640:	e0bff315 	stw	r2,-52(fp)

                error -= (dx << 1) ;    // times 2
 8000644:	e0bff417 	ldw	r2,-48(fp)
 8000648:	1085883a 	add	r2,r2,r2
 800064c:	1007883a 	mov	r3,r2
 8000650:	e0bff817 	ldw	r2,-32(fp)
 8000654:	10c5c83a 	sub	r2,r2,r3
 8000658:	e0bff815 	stw	r2,-32(fp)

// main loop
        for(i = 1; i <= dx; i++)    {
            WriteAPixel(x, y, Colour);

            while(error >= 0)   {
 800065c:	e0bff817 	ldw	r2,-32(fp)
 8000660:	103fec0e 	bge	r2,zero,8000614 <__alt_data_end+0xfc000614>
                    y += s2 ;

                error -= (dx << 1) ;    // times 2
            }

            if(interchange == 1)
 8000664:	e0bff717 	ldw	r2,-36(fp)
 8000668:	10800058 	cmpnei	r2,r2,1
 800066c:	1000051e 	bne	r2,zero,8000684 <Line+0x17c>
                y += s2 ;
 8000670:	e0fff317 	ldw	r3,-52(fp)
 8000674:	e0bffa17 	ldw	r2,-24(fp)
 8000678:	1885883a 	add	r2,r3,r2
 800067c:	e0bff315 	stw	r2,-52(fp)
 8000680:	00000406 	br	8000694 <Line+0x18c>
            else
                x += s1 ;
 8000684:	e0fff217 	ldw	r3,-56(fp)
 8000688:	e0bff917 	ldw	r2,-28(fp)
 800068c:	1885883a 	add	r2,r3,r2
 8000690:	e0bff215 	stw	r2,-56(fp)

            error += (dy << 1) ;    // times 2
 8000694:	e0bff517 	ldw	r2,-44(fp)
 8000698:	1085883a 	add	r2,r2,r2
 800069c:	1007883a 	mov	r3,r2
 80006a0:	e0bff817 	ldw	r2,-32(fp)
 80006a4:	10c5883a 	add	r2,r2,r3
 80006a8:	e0bff815 	stw	r2,-32(fp)
// initialise the error term to compensate for non-zero intercept

        error = (dy << 1) - dx ;    // (2 * dy) - dx

// main loop
        for(i = 1; i <= dx; i++)    {
 80006ac:	e0bff617 	ldw	r2,-40(fp)
 80006b0:	10800044 	addi	r2,r2,1
 80006b4:	e0bff615 	stw	r2,-40(fp)
 80006b8:	e0bff617 	ldw	r2,-40(fp)
 80006bc:	e0fff417 	ldw	r3,-48(fp)
 80006c0:	18bfcf0e 	bge	r3,r2,8000600 <__alt_data_end+0xfc000600>
                x += s1 ;

            error += (dy << 1) ;    // times 2
        }
    }
}
 80006c4:	e037883a 	mov	sp,fp
 80006c8:	dfc00117 	ldw	ra,4(sp)
 80006cc:	df000017 	ldw	fp,0(sp)
 80006d0:	dec00204 	addi	sp,sp,8
 80006d4:	f800283a 	ret

080006d8 <PushPixel>:
* simple stack based around an array
* Used for FILL algorithm
******************************************************************************************************************************/

int PushPixel(XYPixel p1)
{
 80006d8:	defffd04 	addi	sp,sp,-12
 80006dc:	df000215 	stw	fp,8(sp)
 80006e0:	df000204 	addi	fp,sp,8
 80006e4:	e13ffe15 	stw	r4,-8(fp)
 80006e8:	e17fff15 	stw	r5,-4(fp)
    if(Next <= &XYStack[1000]) {
 80006ec:	d0e00017 	ldw	r3,-32768(gp)
 80006f0:	008200b4 	movhi	r2,2050
 80006f4:	10846004 	addi	r2,r2,4480
 80006f8:	10c00936 	bltu	r2,r3,8000720 <PushPixel+0x48>
        *Next++ = p1;
 80006fc:	d0a00017 	ldw	r2,-32768(gp)
 8000700:	10c00204 	addi	r3,r2,8
 8000704:	d0e00015 	stw	r3,-32768(gp)
 8000708:	e0fffe17 	ldw	r3,-8(fp)
 800070c:	10c00015 	stw	r3,0(r2)
 8000710:	e0ffff17 	ldw	r3,-4(fp)
 8000714:	10c00115 	stw	r3,4(r2)
        return 0 ;
 8000718:	0005883a 	mov	r2,zero
 800071c:	00000106 	br	8000724 <PushPixel+0x4c>
    }
    else
        return -1 ;
 8000720:	00bfffc4 	movi	r2,-1
}
 8000724:	e037883a 	mov	sp,fp
 8000728:	df000017 	ldw	fp,0(sp)
 800072c:	dec00104 	addi	sp,sp,4
 8000730:	f800283a 	ret

08000734 <PopPixel>:

int PopPixel(XYPixel *theXYPixel)
{
 8000734:	defffe04 	addi	sp,sp,-8
 8000738:	df000115 	stw	fp,4(sp)
 800073c:	df000104 	addi	fp,sp,4
 8000740:	e13fff15 	stw	r4,-4(fp)
    if(Next >= XYStack) {
 8000744:	d0e00017 	ldw	r3,-32768(gp)
 8000748:	008200b4 	movhi	r2,2050
 800074c:	10bc9004 	addi	r2,r2,-3520
 8000750:	18800b36 	bltu	r3,r2,8000780 <PopPixel+0x4c>
        *theXYPixel = *(--Next);
 8000754:	d0a00017 	ldw	r2,-32768(gp)
 8000758:	10bffe04 	addi	r2,r2,-8
 800075c:	d0a00015 	stw	r2,-32768(gp)
 8000760:	d0e00017 	ldw	r3,-32768(gp)
 8000764:	e0bfff17 	ldw	r2,-4(fp)
 8000768:	19000017 	ldw	r4,0(r3)
 800076c:	11000015 	stw	r4,0(r2)
 8000770:	18c00117 	ldw	r3,4(r3)
 8000774:	10c00115 	stw	r3,4(r2)
        return 0 ;
 8000778:	0005883a 	mov	r2,zero
 800077c:	00000106 	br	8000784 <PopPixel+0x50>
    }
    else
        return -1 ;
 8000780:	00bfffc4 	movi	r2,-1
}
 8000784:	e037883a 	mov	sp,fp
 8000788:	df000017 	ldw	fp,0(sp)
 800078c:	dec00104 	addi	sp,sp,4
 8000790:	f800283a 	ret

08000794 <IsStackEmpty>:

int IsStackEmpty(void)
{
 8000794:	deffff04 	addi	sp,sp,-4
 8000798:	df000015 	stw	fp,0(sp)
 800079c:	d839883a 	mov	fp,sp
    if(Next == XYStack)
 80007a0:	d0e00017 	ldw	r3,-32768(gp)
 80007a4:	008200b4 	movhi	r2,2050
 80007a8:	10bc9004 	addi	r2,r2,-3520
 80007ac:	1880021e 	bne	r3,r2,80007b8 <IsStackEmpty+0x24>
        return 1 ;
 80007b0:	00800044 	movi	r2,1
 80007b4:	00000106 	br	80007bc <IsStackEmpty+0x28>
    else
        return 0 ;
 80007b8:	0005883a 	mov	r2,zero
}
 80007bc:	e037883a 	mov	sp,fp
 80007c0:	df000017 	ldw	fp,0(sp)
 80007c4:	dec00104 	addi	sp,sp,4
 80007c8:	f800283a 	ret

080007cc <Fill>:
/********************************************************************************************
** Implementation of a Scan Line Seed Fill Algorithm
** Taken from Procedural Elements of Computer Graphics: David Rogers
********************************************************************************************/
void Fill(int _x, int _y, int _FillColour, int _BoundaryColour)
{
 80007cc:	deffed04 	addi	sp,sp,-76
 80007d0:	dfc01215 	stw	ra,72(sp)
 80007d4:	df001115 	stw	fp,68(sp)
 80007d8:	dd001015 	stw	r20,64(sp)
 80007dc:	dcc00f15 	stw	r19,60(sp)
 80007e0:	dc800e15 	stw	r18,56(sp)
 80007e4:	dc400d15 	stw	r17,52(sp)
 80007e8:	dc000c15 	stw	r16,48(sp)
 80007ec:	df001104 	addi	fp,sp,68
 80007f0:	e13ff715 	stw	r4,-36(fp)
 80007f4:	e17ff815 	stw	r5,-32(fp)
 80007f8:	e1bff915 	stw	r6,-28(fp)
 80007fc:	e1fffa15 	stw	r7,-24(fp)
    register int     x, y ;
    register int     BoundaryColour = _BoundaryColour;
 8000800:	e4bffa17 	ldw	r18,-24(fp)
    register int 	 PixelColour, FillColour = _FillColour ;
 8000804:	e53ff917 	ldw	r20,-28(fp)

    int     XRight, XLeft ;
    int     SaveX, SaveY ;      		// temp variable
    XYPixel aPoint, aPoint1 ;           // temp var

    Next = XYStack ;                    // initialise to start of stack
 8000808:	008200b4 	movhi	r2,2050
 800080c:	10bc9004 	addi	r2,r2,-3520
 8000810:	d0a00015 	stw	r2,-32768(gp)
    aPoint.x = _x ;
 8000814:	e0bff717 	ldw	r2,-36(fp)
 8000818:	e0bff315 	stw	r2,-52(fp)
    aPoint.y = _y ;
 800081c:	e0bff817 	ldw	r2,-32(fp)
 8000820:	e0bff415 	stw	r2,-48(fp)

    PushPixel(aPoint) ;                   // push the seed
 8000824:	e13ff317 	ldw	r4,-52(fp)
 8000828:	e17ff417 	ldw	r5,-48(fp)
 800082c:	80006d80 	call	80006d8 <PushPixel>

    while(!IsStackEmpty())                 // keep going until no more items on the stack
 8000830:	0000db06 	br	8000ba0 <Fill+0x3d4>
    {
        PopPixel(&aPoint) ;                 // get a point from the stack
 8000834:	e0bff304 	addi	r2,fp,-52
 8000838:	1009883a 	mov	r4,r2
 800083c:	80007340 	call	8000734 <PopPixel>
        x = aPoint.x ;
 8000840:	e43ff317 	ldw	r16,-52(fp)
        y = aPoint.y ;
 8000844:	e47ff417 	ldw	r17,-48(fp)
        WriteAPixel(x, y, FillColour);     // fill the point in the fill colour
 8000848:	8009883a 	mov	r4,r16
 800084c:	880b883a 	mov	r5,r17
 8000850:	a00d883a 	mov	r6,r20
 8000854:	80001f80 	call	80001f8 <WriteAPixel>

        // fill the span to the right of the seed value
        SaveX = x++ ;                  // save the x coord of the the point we just filled and move one pixel right
 8000858:	8005883a 	mov	r2,r16
 800085c:	14000044 	addi	r16,r2,1
 8000860:	e0bfef15 	stw	r2,-68(fp)

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))							// if new pixel is not the boundary colour
 8000864:	00000606 	br	8000880 <Fill+0xb4>
            WriteAPixel(x++, y, FillColour);     											// fill it and keep moving right along a horizontal line
 8000868:	8005883a 	mov	r2,r16
 800086c:	14000044 	addi	r16,r2,1
 8000870:	1009883a 	mov	r4,r2
 8000874:	880b883a 	mov	r5,r17
 8000878:	a00d883a 	mov	r6,r20
 800087c:	80001f80 	call	80001f8 <WriteAPixel>
        WriteAPixel(x, y, FillColour);     // fill the point in the fill colour

        // fill the span to the right of the seed value
        SaveX = x++ ;                  // save the x coord of the the point we just filled and move one pixel right

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))							// if new pixel is not the boundary colour
 8000880:	8009883a 	mov	r4,r16
 8000884:	880b883a 	mov	r5,r17
 8000888:	80002740 	call	8000274 <ReadAPixel>
 800088c:	1007883a 	mov	r3,r2
 8000890:	9005883a 	mov	r2,r18
 8000894:	18c03fcc 	andi	r3,r3,255
 8000898:	18c0201c 	xori	r3,r3,128
 800089c:	18ffe004 	addi	r3,r3,-128
 80008a0:	10803fcc 	andi	r2,r2,255
 80008a4:	1080201c 	xori	r2,r2,128
 80008a8:	10bfe004 	addi	r2,r2,-128
 80008ac:	18bfee1e 	bne	r3,r2,8000868 <__alt_data_end+0xfc000868>
            WriteAPixel(x++, y, FillColour);     											// fill it and keep moving right along a horizontal line

        // must have found the boundary colour when moving right
        XRight = x - 1 ;		// save X coord of the last filled pixel on this line when moving right
 80008b0:	80bfffc4 	addi	r2,r16,-1
 80008b4:	e0bff015 	stw	r2,-64(fp)
        x = SaveX ;				// get the original starting x back
 80008b8:	e43fef17 	ldw	r16,-68(fp)

        // now fill the span to the left of the seed value

        --x ;
 80008bc:	843fffc4 	addi	r16,r16,-1

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))						// if new pixel is not the boundary colour
 80008c0:	00000606 	br	80008dc <Fill+0x110>
            WriteAPixel(x--, y, FillColour);    											// fill it and keep moving left along a horizontal line
 80008c4:	8005883a 	mov	r2,r16
 80008c8:	143fffc4 	addi	r16,r2,-1
 80008cc:	1009883a 	mov	r4,r2
 80008d0:	880b883a 	mov	r5,r17
 80008d4:	a00d883a 	mov	r6,r20
 80008d8:	80001f80 	call	80001f8 <WriteAPixel>

        // now fill the span to the left of the seed value

        --x ;

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))						// if new pixel is not the boundary colour
 80008dc:	8009883a 	mov	r4,r16
 80008e0:	880b883a 	mov	r5,r17
 80008e4:	80002740 	call	8000274 <ReadAPixel>
 80008e8:	1007883a 	mov	r3,r2
 80008ec:	9005883a 	mov	r2,r18
 80008f0:	18c03fcc 	andi	r3,r3,255
 80008f4:	18c0201c 	xori	r3,r3,128
 80008f8:	18ffe004 	addi	r3,r3,-128
 80008fc:	10803fcc 	andi	r2,r2,255
 8000900:	1080201c 	xori	r2,r2,128
 8000904:	10bfe004 	addi	r2,r2,-128
 8000908:	18bfee1e 	bne	r3,r2,80008c4 <__alt_data_end+0xfc0008c4>
            WriteAPixel(x--, y, FillColour);    											// fill it and keep moving left along a horizontal line

        XLeft = x + 1 ;			// save X coord of the last filled pixel on this line when moving left
 800090c:	80800044 	addi	r2,r16,1
 8000910:	e0bff115 	stw	r2,-60(fp)
        x = SaveX ; 			// get original x coord for the seed back
 8000914:	e43fef17 	ldw	r16,-68(fp)
		///////////////////////////////////////////////////////////////////////////////////////////////////
        // check that the scan line below is neither a polygon boundary nor
        // has been previously completely filled
        //////////////////////////////////////////////////////////////////////////////////////////////////

        SaveY = y ;			// save the current y coordinate of the line we have just drawn
 8000918:	e47ff215 	stw	r17,-56(fp)
        x = XLeft ;			// starting at the left x
 800091c:	e43ff117 	ldw	r16,-60(fp)
        ++y ;				// move down one line
 8000920:	8c400044 	addi	r17,r17,1

		// starting from the left keep moving right looking at the pixel
        // until we find something that is neither filled nor boundary colour as it represents something on the line that may be a pixel to fill

        do {
        	PixelColour = ReadAPixel(x++,y) ;
 8000924:	8005883a 	mov	r2,r16
 8000928:	14000044 	addi	r16,r2,1
 800092c:	1009883a 	mov	r4,r2
 8000930:	880b883a 	mov	r5,r17
 8000934:	80002740 	call	8000274 <ReadAPixel>
 8000938:	1027883a 	mov	r19,r2
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 800093c:	9807883a 	mov	r3,r19
 8000940:	9005883a 	mov	r2,r18
 8000944:	18c03fcc 	andi	r3,r3,255
 8000948:	18c0201c 	xori	r3,r3,128
 800094c:	18ffe004 	addi	r3,r3,-128
 8000950:	10803fcc 	andi	r2,r2,255
 8000954:	1080201c 	xori	r2,r2,128
 8000958:	10bfe004 	addi	r2,r2,-128
 800095c:	18bff126 	beq	r3,r2,8000924 <__alt_data_end+0xfc000924>
 8000960:	9807883a 	mov	r3,r19
 8000964:	a005883a 	mov	r2,r20
 8000968:	18c03fcc 	andi	r3,r3,255
 800096c:	18c0201c 	xori	r3,r3,128
 8000970:	18ffe004 	addi	r3,r3,-128
 8000974:	10803fcc 	andi	r2,r2,255
 8000978:	1080201c 	xori	r2,r2,128
 800097c:	10bfe004 	addi	r2,r2,-128
 8000980:	18bfe826 	beq	r3,r2,8000924 <__alt_data_end+0xfc000924>

         x-- ;
 8000984:	843fffc4 	addi	r16,r16,-1

        // to get here we must have found something that needs filling i.e. the above loop found that the line below was not a complete boundary edge or filled
		// if we are still less than the previous right most X coord then it would be a new point that we need to seed
        while(x <= XRight)
 8000988:	00003006 	br	8000a4c <Fill+0x280>
        {
            // seed the scan line below
        	// if the pixel at x,y is not a boundary colour and less than extreme right

        	// skip over any pixels already filled
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 800098c:	00000106 	br	8000994 <Fill+0x1c8>
               ++x ;
 8000990:	84000044 	addi	r16,r16,1
        {
            // seed the scan line below
        	// if the pixel at x,y is not a boundary colour and less than extreme right

        	// skip over any pixels already filled
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 8000994:	8009883a 	mov	r4,r16
 8000998:	880b883a 	mov	r5,r17
 800099c:	80002740 	call	8000274 <ReadAPixel>
 80009a0:	1007883a 	mov	r3,r2
 80009a4:	9005883a 	mov	r2,r18
 80009a8:	18c03fcc 	andi	r3,r3,255
 80009ac:	18c0201c 	xori	r3,r3,128
 80009b0:	18ffe004 	addi	r3,r3,-128
 80009b4:	10803fcc 	andi	r2,r2,255
 80009b8:	1080201c 	xori	r2,r2,128
 80009bc:	10bfe004 	addi	r2,r2,-128
 80009c0:	18800226 	beq	r3,r2,80009cc <Fill+0x200>
 80009c4:	e0bff017 	ldw	r2,-64(fp)
 80009c8:	143ff10e 	bge	r2,r16,8000990 <__alt_data_end+0xfc000990>
               ++x ;

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
 80009cc:	80bfffc4 	addi	r2,r16,-1
 80009d0:	e0bff515 	stw	r2,-44(fp)
            aPoint1.y = y ;
 80009d4:	e47ff615 	stw	r17,-40(fp)
            PushPixel(aPoint1) ;
 80009d8:	e13ff517 	ldw	r4,-44(fp)
 80009dc:	e17ff617 	ldw	r5,-40(fp)
 80009e0:	80006d80 	call	80006d8 <PushPixel>

            // continue checking in case the span is interrupted by another shape inside the one we are trying to fill

            ++x ;
 80009e4:	84000044 	addi	r16,r16,1

            // skip over anything that is filled or boundary (i.e. other shape) inside the one we are trying to fill
            do {
            	PixelColour = ReadAPixel(x++,y) ;
 80009e8:	8005883a 	mov	r2,r16
 80009ec:	14000044 	addi	r16,r2,1
 80009f0:	1009883a 	mov	r4,r2
 80009f4:	880b883a 	mov	r5,r17
 80009f8:	80002740 	call	8000274 <ReadAPixel>
 80009fc:	1027883a 	mov	r19,r2
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 8000a00:	9807883a 	mov	r3,r19
 8000a04:	9005883a 	mov	r2,r18
 8000a08:	18c03fcc 	andi	r3,r3,255
 8000a0c:	18c0201c 	xori	r3,r3,128
 8000a10:	18ffe004 	addi	r3,r3,-128
 8000a14:	10803fcc 	andi	r2,r2,255
 8000a18:	1080201c 	xori	r2,r2,128
 8000a1c:	10bfe004 	addi	r2,r2,-128
 8000a20:	18bff126 	beq	r3,r2,80009e8 <__alt_data_end+0xfc0009e8>
 8000a24:	9807883a 	mov	r3,r19
 8000a28:	a005883a 	mov	r2,r20
 8000a2c:	18c03fcc 	andi	r3,r3,255
 8000a30:	18c0201c 	xori	r3,r3,128
 8000a34:	18ffe004 	addi	r3,r3,-128
 8000a38:	10803fcc 	andi	r2,r2,255
 8000a3c:	1080201c 	xori	r2,r2,128
 8000a40:	10bfe004 	addi	r2,r2,-128
 8000a44:	18bfe826 	beq	r3,r2,80009e8 <__alt_data_end+0xfc0009e8>

             x-- ;
 8000a48:	843fffc4 	addi	r16,r16,-1

         x-- ;

        // to get here we must have found something that needs filling i.e. the above loop found that the line below was not a complete boundary edge or filled
		// if we are still less than the previous right most X coord then it would be a new point that we need to seed
        while(x <= XRight)
 8000a4c:	e0bff017 	ldw	r2,-64(fp)
 8000a50:	143fce0e 	bge	r2,r16,800098c <__alt_data_end+0xfc00098c>
            	PixelColour = ReadAPixel(x++,y) ;
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

             x-- ;
        }
      	x = SaveX ;
 8000a54:	e43fef17 	ldw	r16,-68(fp)
       	y = SaveY ;
 8000a58:	e47ff217 	ldw	r17,-56(fp)

	 ///////////////////////////////////////////////////////////////////////////////////////////////////
    // check that the scan line above is neither a polygon boundary nor
    // has been previously completely filled

        y = SaveY;
 8000a5c:	e47ff217 	ldw	r17,-56(fp)
        x = XLeft ;
 8000a60:	e43ff117 	ldw	r16,-60(fp)
        --y ;
 8000a64:	8c7fffc4 	addi	r17,r17,-1

        do {
        	PixelColour = ReadAPixel(x++,y) ;
 8000a68:	8005883a 	mov	r2,r16
 8000a6c:	14000044 	addi	r16,r2,1
 8000a70:	1009883a 	mov	r4,r2
 8000a74:	880b883a 	mov	r5,r17
 8000a78:	80002740 	call	8000274 <ReadAPixel>
 8000a7c:	1027883a 	mov	r19,r2
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 8000a80:	9807883a 	mov	r3,r19
 8000a84:	9005883a 	mov	r2,r18
 8000a88:	18c03fcc 	andi	r3,r3,255
 8000a8c:	18c0201c 	xori	r3,r3,128
 8000a90:	18ffe004 	addi	r3,r3,-128
 8000a94:	10803fcc 	andi	r2,r2,255
 8000a98:	1080201c 	xori	r2,r2,128
 8000a9c:	10bfe004 	addi	r2,r2,-128
 8000aa0:	18bff126 	beq	r3,r2,8000a68 <__alt_data_end+0xfc000a68>
 8000aa4:	9807883a 	mov	r3,r19
 8000aa8:	a005883a 	mov	r2,r20
 8000aac:	18c03fcc 	andi	r3,r3,255
 8000ab0:	18c0201c 	xori	r3,r3,128
 8000ab4:	18ffe004 	addi	r3,r3,-128
 8000ab8:	10803fcc 	andi	r2,r2,255
 8000abc:	1080201c 	xori	r2,r2,128
 8000ac0:	10bfe004 	addi	r2,r2,-128
 8000ac4:	18bfe826 	beq	r3,r2,8000a68 <__alt_data_end+0xfc000a68>

         x-- ;
 8000ac8:	843fffc4 	addi	r16,r16,-1

        while(x <= XRight)		// if we have not reached the boundary
 8000acc:	00003006 	br	8000b90 <Fill+0x3c4>
        {
            // seed the scan line below
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 8000ad0:	00000106 	br	8000ad8 <Fill+0x30c>
               ++x ;		// look for right most x inside the boudan
 8000ad4:	84000044 	addi	r16,r16,1
         x-- ;

        while(x <= XRight)		// if we have not reached the boundary
        {
            // seed the scan line below
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x <= XRight))
 8000ad8:	8009883a 	mov	r4,r16
 8000adc:	880b883a 	mov	r5,r17
 8000ae0:	80002740 	call	8000274 <ReadAPixel>
 8000ae4:	1007883a 	mov	r3,r2
 8000ae8:	9005883a 	mov	r2,r18
 8000aec:	18c03fcc 	andi	r3,r3,255
 8000af0:	18c0201c 	xori	r3,r3,128
 8000af4:	18ffe004 	addi	r3,r3,-128
 8000af8:	10803fcc 	andi	r2,r2,255
 8000afc:	1080201c 	xori	r2,r2,128
 8000b00:	10bfe004 	addi	r2,r2,-128
 8000b04:	18800226 	beq	r3,r2,8000b10 <Fill+0x344>
 8000b08:	e0bff017 	ldw	r2,-64(fp)
 8000b0c:	143ff10e 	bge	r2,r16,8000ad4 <__alt_data_end+0xfc000ad4>
               ++x ;		// look for right most x inside the boudan

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
 8000b10:	80bfffc4 	addi	r2,r16,-1
 8000b14:	e0bff515 	stw	r2,-44(fp)
            aPoint1.y = y ;
 8000b18:	e47ff615 	stw	r17,-40(fp)
            PushPixel(aPoint1) ;
 8000b1c:	e13ff517 	ldw	r4,-44(fp)
 8000b20:	e17ff617 	ldw	r5,-40(fp)
 8000b24:	80006d80 	call	80006d8 <PushPixel>

            // continue checking in case the span is interrupted
            ++x ;
 8000b28:	84000044 	addi	r16,r16,1

            do {
            	PixelColour = ReadAPixel(x++,y) ;
 8000b2c:	8005883a 	mov	r2,r16
 8000b30:	14000044 	addi	r16,r2,1
 8000b34:	1009883a 	mov	r4,r2
 8000b38:	880b883a 	mov	r5,r17
 8000b3c:	80002740 	call	8000274 <ReadAPixel>
 8000b40:	1027883a 	mov	r19,r2
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );
 8000b44:	9807883a 	mov	r3,r19
 8000b48:	9005883a 	mov	r2,r18
 8000b4c:	18c03fcc 	andi	r3,r3,255
 8000b50:	18c0201c 	xori	r3,r3,128
 8000b54:	18ffe004 	addi	r3,r3,-128
 8000b58:	10803fcc 	andi	r2,r2,255
 8000b5c:	1080201c 	xori	r2,r2,128
 8000b60:	10bfe004 	addi	r2,r2,-128
 8000b64:	18bff126 	beq	r3,r2,8000b2c <__alt_data_end+0xfc000b2c>
 8000b68:	9807883a 	mov	r3,r19
 8000b6c:	a005883a 	mov	r2,r20
 8000b70:	18c03fcc 	andi	r3,r3,255
 8000b74:	18c0201c 	xori	r3,r3,128
 8000b78:	18ffe004 	addi	r3,r3,-128
 8000b7c:	10803fcc 	andi	r2,r2,255
 8000b80:	1080201c 	xori	r2,r2,128
 8000b84:	10bfe004 	addi	r2,r2,-128
 8000b88:	18bfe826 	beq	r3,r2,8000b2c <__alt_data_end+0xfc000b2c>

             x-- ;
 8000b8c:	843fffc4 	addi	r16,r16,-1
        	PixelColour = ReadAPixel(x++,y) ;
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

         x-- ;

        while(x <= XRight)		// if we have not reached the boundary
 8000b90:	e0bff017 	ldw	r2,-64(fp)
 8000b94:	143fce0e 	bge	r2,r16,8000ad0 <__alt_data_end+0xfc000ad0>
            	PixelColour = ReadAPixel(x++,y) ;
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

             x-- ;
        }
       	x = SaveX ;
 8000b98:	e43fef17 	ldw	r16,-68(fp)
       	y = SaveY ;
 8000b9c:	e47ff217 	ldw	r17,-56(fp)
    aPoint.x = _x ;
    aPoint.y = _y ;

    PushPixel(aPoint) ;                   // push the seed

    while(!IsStackEmpty())                 // keep going until no more items on the stack
 8000ba0:	80007940 	call	8000794 <IsStackEmpty>
 8000ba4:	103f2326 	beq	r2,zero,8000834 <__alt_data_end+0xfc000834>
             x-- ;
        }
       	x = SaveX ;
       	y = SaveY ;
    }
 8000ba8:	e6fffb04 	addi	sp,fp,-20
 8000bac:	dfc00617 	ldw	ra,24(sp)
 8000bb0:	df000517 	ldw	fp,20(sp)
 8000bb4:	dd000417 	ldw	r20,16(sp)
 8000bb8:	dcc00317 	ldw	r19,12(sp)
 8000bbc:	dc800217 	ldw	r18,8(sp)
 8000bc0:	dc400117 	ldw	r17,4(sp)
 8000bc4:	dc000017 	ldw	r16,0(sp)
 8000bc8:	dec00704 	addi	sp,sp,28
 8000bcc:	f800283a 	ret

08000bd0 <graph_clearAll>:
#define	MAGENTA		7
#define GREEN		100


// clear everything
void graph_clearAll(){
 8000bd0:	defffd04 	addi	sp,sp,-12
 8000bd4:	dfc00215 	stw	ra,8(sp)
 8000bd8:	df000115 	stw	fp,4(sp)
 8000bdc:	df000104 	addi	fp,sp,4
	int i;
	for (i=0;i<479;i++) {
 8000be0:	e03fff15 	stw	zero,-4(fp)
 8000be4:	00000806 	br	8000c08 <graph_clearAll+0x38>
		HLine(0,i,800,BLACK);
 8000be8:	0009883a 	mov	r4,zero
 8000bec:	e17fff17 	ldw	r5,-4(fp)
 8000bf0:	0180c804 	movi	r6,800
 8000bf4:	000f883a 	mov	r7,zero
 8000bf8:	80003800 	call	8000380 <HLine>


// clear everything
void graph_clearAll(){
	int i;
	for (i=0;i<479;i++) {
 8000bfc:	e0bfff17 	ldw	r2,-4(fp)
 8000c00:	10800044 	addi	r2,r2,1
 8000c04:	e0bfff15 	stw	r2,-4(fp)
 8000c08:	e0bfff17 	ldw	r2,-4(fp)
 8000c0c:	108077d0 	cmplti	r2,r2,479
 8000c10:	103ff51e 	bne	r2,zero,8000be8 <__alt_data_end+0xfc000be8>
		HLine(0,i,800,BLACK);
	}
}
 8000c14:	e037883a 	mov	sp,fp
 8000c18:	dfc00117 	ldw	ra,4(sp)
 8000c1c:	df000017 	ldw	fp,0(sp)
 8000c20:	dec00204 	addi	sp,sp,8
 8000c24:	f800283a 	ret

08000c28 <graph_goto_menu>:


// main menu
void graph_goto_menu() {
 8000c28:	defffb04 	addi	sp,sp,-20
 8000c2c:	dfc00415 	stw	ra,16(sp)
 8000c30:	df000315 	stw	fp,12(sp)
 8000c34:	df000304 	addi	fp,sp,12
	graph_clearAll();
 8000c38:	8000bd00 	call	8000bd0 <graph_clearAll>

	int i;
	// top two square button
	for (i=49;i<214;i++) {
 8000c3c:	00800c44 	movi	r2,49
 8000c40:	e0bfff15 	stw	r2,-4(fp)
 8000c44:	00000d06 	br	8000c7c <graph_goto_menu+0x54>
		HLine(174,i,200,GREEN);
 8000c48:	01002b84 	movi	r4,174
 8000c4c:	e17fff17 	ldw	r5,-4(fp)
 8000c50:	01803204 	movi	r6,200
 8000c54:	01c01904 	movi	r7,100
 8000c58:	80003800 	call	8000380 <HLine>
		HLine(424,i,200,GREEN);
 8000c5c:	01006a04 	movi	r4,424
 8000c60:	e17fff17 	ldw	r5,-4(fp)
 8000c64:	01803204 	movi	r6,200
 8000c68:	01c01904 	movi	r7,100
 8000c6c:	80003800 	call	8000380 <HLine>
void graph_goto_menu() {
	graph_clearAll();

	int i;
	// top two square button
	for (i=49;i<214;i++) {
 8000c70:	e0bfff17 	ldw	r2,-4(fp)
 8000c74:	10800044 	addi	r2,r2,1
 8000c78:	e0bfff15 	stw	r2,-4(fp)
 8000c7c:	e0bfff17 	ldw	r2,-4(fp)
 8000c80:	10803590 	cmplti	r2,r2,214
 8000c84:	103ff01e 	bne	r2,zero,8000c48 <__alt_data_end+0xfc000c48>
		HLine(174,i,200,GREEN);
		HLine(424,i,200,GREEN);
	}
	// bottom two square button
	for (i=264;i<429;i++) {
 8000c88:	00804204 	movi	r2,264
 8000c8c:	e0bfff15 	stw	r2,-4(fp)
 8000c90:	00000d06 	br	8000cc8 <graph_goto_menu+0xa0>
		HLine(174,i,200,GREEN);
 8000c94:	01002b84 	movi	r4,174
 8000c98:	e17fff17 	ldw	r5,-4(fp)
 8000c9c:	01803204 	movi	r6,200
 8000ca0:	01c01904 	movi	r7,100
 8000ca4:	80003800 	call	8000380 <HLine>
		HLine(424,i,200,GREEN);
 8000ca8:	01006a04 	movi	r4,424
 8000cac:	e17fff17 	ldw	r5,-4(fp)
 8000cb0:	01803204 	movi	r6,200
 8000cb4:	01c01904 	movi	r7,100
 8000cb8:	80003800 	call	8000380 <HLine>
	for (i=49;i<214;i++) {
		HLine(174,i,200,GREEN);
		HLine(424,i,200,GREEN);
	}
	// bottom two square button
	for (i=264;i<429;i++) {
 8000cbc:	e0bfff17 	ldw	r2,-4(fp)
 8000cc0:	10800044 	addi	r2,r2,1
 8000cc4:	e0bfff15 	stw	r2,-4(fp)
 8000cc8:	e0bfff17 	ldw	r2,-4(fp)
 8000ccc:	10806b50 	cmplti	r2,r2,429
 8000cd0:	103ff01e 	bne	r2,zero,8000c94 <__alt_data_end+0xfc000c94>
		HLine(174,i,200,GREEN);
		HLine(424,i,200,GREEN);
	}

	// CH4
	OutGraphicsCharFont2a(254, 125, BLUE, WHITE, 67, 0);
 8000cd4:	008010c4 	movi	r2,67
 8000cd8:	d8800015 	stw	r2,0(sp)
 8000cdc:	d8000115 	stw	zero,4(sp)
 8000ce0:	01003f84 	movi	r4,254
 8000ce4:	01401f44 	movi	r5,125
 8000ce8:	01800104 	movi	r6,4
 8000cec:	01c00044 	movi	r7,1
 8000cf0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(265, 125, BLUE, WHITE, 72, 0);
 8000cf4:	00801204 	movi	r2,72
 8000cf8:	d8800015 	stw	r2,0(sp)
 8000cfc:	d8000115 	stw	zero,4(sp)
 8000d00:	01004244 	movi	r4,265
 8000d04:	01401f44 	movi	r5,125
 8000d08:	01800104 	movi	r6,4
 8000d0c:	01c00044 	movi	r7,1
 8000d10:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(276, 125, BLUE, WHITE, 52, 0);
 8000d14:	00800d04 	movi	r2,52
 8000d18:	d8800015 	stw	r2,0(sp)
 8000d1c:	d8000115 	stw	zero,4(sp)
 8000d20:	01004504 	movi	r4,276
 8000d24:	01401f44 	movi	r5,125
 8000d28:	01800104 	movi	r6,4
 8000d2c:	01c00044 	movi	r7,1
 8000d30:	80016580 	call	8001658 <OutGraphicsCharFont2a>

	// Natural Gas
	OutGraphicsCharFont2a(491, 120, BLUE, WHITE, 78, 0);
 8000d34:	00801384 	movi	r2,78
 8000d38:	d8800015 	stw	r2,0(sp)
 8000d3c:	d8000115 	stw	zero,4(sp)
 8000d40:	01007ac4 	movi	r4,491
 8000d44:	01401e04 	movi	r5,120
 8000d48:	01800104 	movi	r6,4
 8000d4c:	01c00044 	movi	r7,1
 8000d50:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(502, 120, BLUE, WHITE, 97, 0);
 8000d54:	00801844 	movi	r2,97
 8000d58:	d8800015 	stw	r2,0(sp)
 8000d5c:	d8000115 	stw	zero,4(sp)
 8000d60:	01007d84 	movi	r4,502
 8000d64:	01401e04 	movi	r5,120
 8000d68:	01800104 	movi	r6,4
 8000d6c:	01c00044 	movi	r7,1
 8000d70:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(513, 120, BLUE, WHITE, 116, 0);
 8000d74:	00801d04 	movi	r2,116
 8000d78:	d8800015 	stw	r2,0(sp)
 8000d7c:	d8000115 	stw	zero,4(sp)
 8000d80:	01008044 	movi	r4,513
 8000d84:	01401e04 	movi	r5,120
 8000d88:	01800104 	movi	r6,4
 8000d8c:	01c00044 	movi	r7,1
 8000d90:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(524, 120, BLUE, WHITE, 117, 0);
 8000d94:	00801d44 	movi	r2,117
 8000d98:	d8800015 	stw	r2,0(sp)
 8000d9c:	d8000115 	stw	zero,4(sp)
 8000da0:	01008304 	movi	r4,524
 8000da4:	01401e04 	movi	r5,120
 8000da8:	01800104 	movi	r6,4
 8000dac:	01c00044 	movi	r7,1
 8000db0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(535, 120, BLUE, WHITE, 114, 0);
 8000db4:	00801c84 	movi	r2,114
 8000db8:	d8800015 	stw	r2,0(sp)
 8000dbc:	d8000115 	stw	zero,4(sp)
 8000dc0:	010085c4 	movi	r4,535
 8000dc4:	01401e04 	movi	r5,120
 8000dc8:	01800104 	movi	r6,4
 8000dcc:	01c00044 	movi	r7,1
 8000dd0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(546, 120, BLUE, WHITE, 97, 0);
 8000dd4:	00801844 	movi	r2,97
 8000dd8:	d8800015 	stw	r2,0(sp)
 8000ddc:	d8000115 	stw	zero,4(sp)
 8000de0:	01008884 	movi	r4,546
 8000de4:	01401e04 	movi	r5,120
 8000de8:	01800104 	movi	r6,4
 8000dec:	01c00044 	movi	r7,1
 8000df0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(557, 120, BLUE, WHITE, 108, 0);
 8000df4:	00801b04 	movi	r2,108
 8000df8:	d8800015 	stw	r2,0(sp)
 8000dfc:	d8000115 	stw	zero,4(sp)
 8000e00:	01008b44 	movi	r4,557
 8000e04:	01401e04 	movi	r5,120
 8000e08:	01800104 	movi	r6,4
 8000e0c:	01c00044 	movi	r7,1
 8000e10:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	// Gas
	OutGraphicsCharFont2a(513, 135, BLUE, WHITE, 71, 0);
 8000e14:	008011c4 	movi	r2,71
 8000e18:	d8800015 	stw	r2,0(sp)
 8000e1c:	d8000115 	stw	zero,4(sp)
 8000e20:	01008044 	movi	r4,513
 8000e24:	014021c4 	movi	r5,135
 8000e28:	01800104 	movi	r6,4
 8000e2c:	01c00044 	movi	r7,1
 8000e30:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(524, 135, BLUE, WHITE, 97, 0);
 8000e34:	00801844 	movi	r2,97
 8000e38:	d8800015 	stw	r2,0(sp)
 8000e3c:	d8000115 	stw	zero,4(sp)
 8000e40:	01008304 	movi	r4,524
 8000e44:	014021c4 	movi	r5,135
 8000e48:	01800104 	movi	r6,4
 8000e4c:	01c00044 	movi	r7,1
 8000e50:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(535, 135, BLUE, WHITE, 115, 0);
 8000e54:	00801cc4 	movi	r2,115
 8000e58:	d8800015 	stw	r2,0(sp)
 8000e5c:	d8000115 	stw	zero,4(sp)
 8000e60:	010085c4 	movi	r4,535
 8000e64:	014021c4 	movi	r5,135
 8000e68:	01800104 	movi	r6,4
 8000e6c:	01c00044 	movi	r7,1
 8000e70:	80016580 	call	8001658 <OutGraphicsCharFont2a>

	// Smoke
	OutGraphicsCharFont2a(243, 340, BLUE, WHITE, 83, 0);
 8000e74:	008014c4 	movi	r2,83
 8000e78:	d8800015 	stw	r2,0(sp)
 8000e7c:	d8000115 	stw	zero,4(sp)
 8000e80:	01003cc4 	movi	r4,243
 8000e84:	01405504 	movi	r5,340
 8000e88:	01800104 	movi	r6,4
 8000e8c:	01c00044 	movi	r7,1
 8000e90:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(254, 340, BLUE, WHITE, 109, 0);
 8000e94:	00801b44 	movi	r2,109
 8000e98:	d8800015 	stw	r2,0(sp)
 8000e9c:	d8000115 	stw	zero,4(sp)
 8000ea0:	01003f84 	movi	r4,254
 8000ea4:	01405504 	movi	r5,340
 8000ea8:	01800104 	movi	r6,4
 8000eac:	01c00044 	movi	r7,1
 8000eb0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(265, 340, BLUE, WHITE, 111, 0);
 8000eb4:	00801bc4 	movi	r2,111
 8000eb8:	d8800015 	stw	r2,0(sp)
 8000ebc:	d8000115 	stw	zero,4(sp)
 8000ec0:	01004244 	movi	r4,265
 8000ec4:	01405504 	movi	r5,340
 8000ec8:	01800104 	movi	r6,4
 8000ecc:	01c00044 	movi	r7,1
 8000ed0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(276, 340, BLUE, WHITE, 107, 0);
 8000ed4:	00801ac4 	movi	r2,107
 8000ed8:	d8800015 	stw	r2,0(sp)
 8000edc:	d8000115 	stw	zero,4(sp)
 8000ee0:	01004504 	movi	r4,276
 8000ee4:	01405504 	movi	r5,340
 8000ee8:	01800104 	movi	r6,4
 8000eec:	01c00044 	movi	r7,1
 8000ef0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(287, 340, BLUE, WHITE, 101, 0);
 8000ef4:	00801944 	movi	r2,101
 8000ef8:	d8800015 	stw	r2,0(sp)
 8000efc:	d8000115 	stw	zero,4(sp)
 8000f00:	010047c4 	movi	r4,287
 8000f04:	01405504 	movi	r5,340
 8000f08:	01800104 	movi	r6,4
 8000f0c:	01c00044 	movi	r7,1
 8000f10:	80016580 	call	8001658 <OutGraphicsCharFont2a>

	// Air
	OutGraphicsCharFont2a(513, 335, BLUE, WHITE, 65, 0);
 8000f14:	00801044 	movi	r2,65
 8000f18:	d8800015 	stw	r2,0(sp)
 8000f1c:	d8000115 	stw	zero,4(sp)
 8000f20:	01008044 	movi	r4,513
 8000f24:	014053c4 	movi	r5,335
 8000f28:	01800104 	movi	r6,4
 8000f2c:	01c00044 	movi	r7,1
 8000f30:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(524, 335, BLUE, WHITE, 105, 0);
 8000f34:	00801a44 	movi	r2,105
 8000f38:	d8800015 	stw	r2,0(sp)
 8000f3c:	d8000115 	stw	zero,4(sp)
 8000f40:	01008304 	movi	r4,524
 8000f44:	014053c4 	movi	r5,335
 8000f48:	01800104 	movi	r6,4
 8000f4c:	01c00044 	movi	r7,1
 8000f50:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(535, 335, BLUE, WHITE, 114, 0);
 8000f54:	00801c84 	movi	r2,114
 8000f58:	d8800015 	stw	r2,0(sp)
 8000f5c:	d8000115 	stw	zero,4(sp)
 8000f60:	010085c4 	movi	r4,535
 8000f64:	014053c4 	movi	r5,335
 8000f68:	01800104 	movi	r6,4
 8000f6c:	01c00044 	movi	r7,1
 8000f70:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	// Quality
	OutGraphicsCharFont2a(491, 350, BLUE, WHITE, 81, 0);
 8000f74:	00801444 	movi	r2,81
 8000f78:	d8800015 	stw	r2,0(sp)
 8000f7c:	d8000115 	stw	zero,4(sp)
 8000f80:	01007ac4 	movi	r4,491
 8000f84:	01405784 	movi	r5,350
 8000f88:	01800104 	movi	r6,4
 8000f8c:	01c00044 	movi	r7,1
 8000f90:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(502, 350, BLUE, WHITE, 117, 0);
 8000f94:	00801d44 	movi	r2,117
 8000f98:	d8800015 	stw	r2,0(sp)
 8000f9c:	d8000115 	stw	zero,4(sp)
 8000fa0:	01007d84 	movi	r4,502
 8000fa4:	01405784 	movi	r5,350
 8000fa8:	01800104 	movi	r6,4
 8000fac:	01c00044 	movi	r7,1
 8000fb0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(513, 350, BLUE, WHITE, 97, 0);
 8000fb4:	00801844 	movi	r2,97
 8000fb8:	d8800015 	stw	r2,0(sp)
 8000fbc:	d8000115 	stw	zero,4(sp)
 8000fc0:	01008044 	movi	r4,513
 8000fc4:	01405784 	movi	r5,350
 8000fc8:	01800104 	movi	r6,4
 8000fcc:	01c00044 	movi	r7,1
 8000fd0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(524, 350, BLUE, WHITE, 108, 0);
 8000fd4:	00801b04 	movi	r2,108
 8000fd8:	d8800015 	stw	r2,0(sp)
 8000fdc:	d8000115 	stw	zero,4(sp)
 8000fe0:	01008304 	movi	r4,524
 8000fe4:	01405784 	movi	r5,350
 8000fe8:	01800104 	movi	r6,4
 8000fec:	01c00044 	movi	r7,1
 8000ff0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(535, 350, BLUE, WHITE, 105, 0);
 8000ff4:	00801a44 	movi	r2,105
 8000ff8:	d8800015 	stw	r2,0(sp)
 8000ffc:	d8000115 	stw	zero,4(sp)
 8001000:	010085c4 	movi	r4,535
 8001004:	01405784 	movi	r5,350
 8001008:	01800104 	movi	r6,4
 800100c:	01c00044 	movi	r7,1
 8001010:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(546, 350, BLUE, WHITE, 116, 0);
 8001014:	00801d04 	movi	r2,116
 8001018:	d8800015 	stw	r2,0(sp)
 800101c:	d8000115 	stw	zero,4(sp)
 8001020:	01008884 	movi	r4,546
 8001024:	01405784 	movi	r5,350
 8001028:	01800104 	movi	r6,4
 800102c:	01c00044 	movi	r7,1
 8001030:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(557, 350, BLUE, WHITE, 121, 0);
 8001034:	00801e44 	movi	r2,121
 8001038:	d8800015 	stw	r2,0(sp)
 800103c:	d8000115 	stw	zero,4(sp)
 8001040:	01008b44 	movi	r4,557
 8001044:	01405784 	movi	r5,350
 8001048:	01800104 	movi	r6,4
 800104c:	01c00044 	movi	r7,1
 8001050:	80016580 	call	8001658 <OutGraphicsCharFont2a>
}
 8001054:	e037883a 	mov	sp,fp
 8001058:	dfc00117 	ldw	ra,4(sp)
 800105c:	df000017 	ldw	fp,0(sp)
 8001060:	dec00204 	addi	sp,sp,8
 8001064:	f800283a 	ret

08001068 <graph_showGasFrame>:

void graph_showGasFrame(int gas) {
 8001068:	defffb04 	addi	sp,sp,-20
 800106c:	dfc00415 	stw	ra,16(sp)
 8001070:	df000315 	stw	fp,12(sp)
 8001074:	df000304 	addi	fp,sp,12
 8001078:	e13fff15 	stw	r4,-4(fp)
	// clear the screen
	graph_clearAll();
 800107c:	8000bd00 	call	8000bd0 <graph_clearAll>

	// print gas name
	switch(gas){
 8001080:	e0bfff17 	ldw	r2,-4(fp)
 8001084:	10c000a0 	cmpeqi	r3,r2,2
 8001088:	1800231e 	bne	r3,zero,8001118 <graph_showGasFrame+0xb0>
 800108c:	10c000c8 	cmpgei	r3,r2,3
 8001090:	1800031e 	bne	r3,zero,80010a0 <graph_showGasFrame+0x38>
 8001094:	10800060 	cmpeqi	r2,r2,1
 8001098:	1000061e 	bne	r2,zero,80010b4 <graph_showGasFrame+0x4c>
 800109c:	0000e906 	br	8001444 <graph_showGasFrame+0x3dc>
 80010a0:	10c000e0 	cmpeqi	r3,r2,3
 80010a4:	1800451e 	bne	r3,zero,80011bc <graph_showGasFrame+0x154>
 80010a8:	10800120 	cmpeqi	r2,r2,4
 80010ac:	1000941e 	bne	r2,zero,8001300 <graph_showGasFrame+0x298>
 80010b0:	0000e406 	br	8001444 <graph_showGasFrame+0x3dc>
		// CH4
		case CH4:	OutGraphicsCharFont2a(100, 50, BLUE, WHITE, 67, 0);
 80010b4:	008010c4 	movi	r2,67
 80010b8:	d8800015 	stw	r2,0(sp)
 80010bc:	d8000115 	stw	zero,4(sp)
 80010c0:	01001904 	movi	r4,100
 80010c4:	01400c84 	movi	r5,50
 80010c8:	01800104 	movi	r6,4
 80010cc:	01c00044 	movi	r7,1
 80010d0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(111, 50, BLUE, WHITE, 72, 0);
 80010d4:	00801204 	movi	r2,72
 80010d8:	d8800015 	stw	r2,0(sp)
 80010dc:	d8000115 	stw	zero,4(sp)
 80010e0:	01001bc4 	movi	r4,111
 80010e4:	01400c84 	movi	r5,50
 80010e8:	01800104 	movi	r6,4
 80010ec:	01c00044 	movi	r7,1
 80010f0:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(122, 50, BLUE, WHITE, 52, 0);
 80010f4:	00800d04 	movi	r2,52
 80010f8:	d8800015 	stw	r2,0(sp)
 80010fc:	d8000115 	stw	zero,4(sp)
 8001100:	01001e84 	movi	r4,122
 8001104:	01400c84 	movi	r5,50
 8001108:	01800104 	movi	r6,4
 800110c:	01c00044 	movi	r7,1
 8001110:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				break;
 8001114:	0000ce06 	br	8001450 <graph_showGasFrame+0x3e8>
		// Smoke
		case SMOKE: OutGraphicsCharFont2a(100, 50, BLUE, WHITE, 83, 0);
 8001118:	008014c4 	movi	r2,83
 800111c:	d8800015 	stw	r2,0(sp)
 8001120:	d8000115 	stw	zero,4(sp)
 8001124:	01001904 	movi	r4,100
 8001128:	01400c84 	movi	r5,50
 800112c:	01800104 	movi	r6,4
 8001130:	01c00044 	movi	r7,1
 8001134:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(111, 50, BLUE, WHITE, 109, 0);
 8001138:	00801b44 	movi	r2,109
 800113c:	d8800015 	stw	r2,0(sp)
 8001140:	d8000115 	stw	zero,4(sp)
 8001144:	01001bc4 	movi	r4,111
 8001148:	01400c84 	movi	r5,50
 800114c:	01800104 	movi	r6,4
 8001150:	01c00044 	movi	r7,1
 8001154:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(122, 50, BLUE, WHITE, 111, 0);
 8001158:	00801bc4 	movi	r2,111
 800115c:	d8800015 	stw	r2,0(sp)
 8001160:	d8000115 	stw	zero,4(sp)
 8001164:	01001e84 	movi	r4,122
 8001168:	01400c84 	movi	r5,50
 800116c:	01800104 	movi	r6,4
 8001170:	01c00044 	movi	r7,1
 8001174:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(133, 50, BLUE, WHITE, 107, 0);
 8001178:	00801ac4 	movi	r2,107
 800117c:	d8800015 	stw	r2,0(sp)
 8001180:	d8000115 	stw	zero,4(sp)
 8001184:	01002144 	movi	r4,133
 8001188:	01400c84 	movi	r5,50
 800118c:	01800104 	movi	r6,4
 8001190:	01c00044 	movi	r7,1
 8001194:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(144, 50, BLUE, WHITE, 101, 0);
 8001198:	00801944 	movi	r2,101
 800119c:	d8800015 	stw	r2,0(sp)
 80011a0:	d8000115 	stw	zero,4(sp)
 80011a4:	01002404 	movi	r4,144
 80011a8:	01400c84 	movi	r5,50
 80011ac:	01800104 	movi	r6,4
 80011b0:	01c00044 	movi	r7,1
 80011b4:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				break;
 80011b8:	0000a506 	br	8001450 <graph_showGasFrame+0x3e8>
		// Natural Gas
		case NGAS: OutGraphicsCharFont2a(100, 50, BLUE, WHITE, 78, 0);
 80011bc:	00801384 	movi	r2,78
 80011c0:	d8800015 	stw	r2,0(sp)
 80011c4:	d8000115 	stw	zero,4(sp)
 80011c8:	01001904 	movi	r4,100
 80011cc:	01400c84 	movi	r5,50
 80011d0:	01800104 	movi	r6,4
 80011d4:	01c00044 	movi	r7,1
 80011d8:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(111, 50, BLUE, WHITE, 97, 0);
 80011dc:	00801844 	movi	r2,97
 80011e0:	d8800015 	stw	r2,0(sp)
 80011e4:	d8000115 	stw	zero,4(sp)
 80011e8:	01001bc4 	movi	r4,111
 80011ec:	01400c84 	movi	r5,50
 80011f0:	01800104 	movi	r6,4
 80011f4:	01c00044 	movi	r7,1
 80011f8:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(122, 50, BLUE, WHITE, 116, 0);
 80011fc:	00801d04 	movi	r2,116
 8001200:	d8800015 	stw	r2,0(sp)
 8001204:	d8000115 	stw	zero,4(sp)
 8001208:	01001e84 	movi	r4,122
 800120c:	01400c84 	movi	r5,50
 8001210:	01800104 	movi	r6,4
 8001214:	01c00044 	movi	r7,1
 8001218:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(133, 50, BLUE, WHITE, 117, 0);
 800121c:	00801d44 	movi	r2,117
 8001220:	d8800015 	stw	r2,0(sp)
 8001224:	d8000115 	stw	zero,4(sp)
 8001228:	01002144 	movi	r4,133
 800122c:	01400c84 	movi	r5,50
 8001230:	01800104 	movi	r6,4
 8001234:	01c00044 	movi	r7,1
 8001238:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(144, 50, BLUE, WHITE, 114, 0);
 800123c:	00801c84 	movi	r2,114
 8001240:	d8800015 	stw	r2,0(sp)
 8001244:	d8000115 	stw	zero,4(sp)
 8001248:	01002404 	movi	r4,144
 800124c:	01400c84 	movi	r5,50
 8001250:	01800104 	movi	r6,4
 8001254:	01c00044 	movi	r7,1
 8001258:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(155, 50, BLUE, WHITE, 97, 0);
 800125c:	00801844 	movi	r2,97
 8001260:	d8800015 	stw	r2,0(sp)
 8001264:	d8000115 	stw	zero,4(sp)
 8001268:	010026c4 	movi	r4,155
 800126c:	01400c84 	movi	r5,50
 8001270:	01800104 	movi	r6,4
 8001274:	01c00044 	movi	r7,1
 8001278:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(166, 50, BLUE, WHITE, 108, 0);
 800127c:	00801b04 	movi	r2,108
 8001280:	d8800015 	stw	r2,0(sp)
 8001284:	d8000115 	stw	zero,4(sp)
 8001288:	01002984 	movi	r4,166
 800128c:	01400c84 	movi	r5,50
 8001290:	01800104 	movi	r6,4
 8001294:	01c00044 	movi	r7,1
 8001298:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(187, 50, BLUE, WHITE, 71, 0);
 800129c:	008011c4 	movi	r2,71
 80012a0:	d8800015 	stw	r2,0(sp)
 80012a4:	d8000115 	stw	zero,4(sp)
 80012a8:	01002ec4 	movi	r4,187
 80012ac:	01400c84 	movi	r5,50
 80012b0:	01800104 	movi	r6,4
 80012b4:	01c00044 	movi	r7,1
 80012b8:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(198, 50, BLUE, WHITE, 97, 0);
 80012bc:	00801844 	movi	r2,97
 80012c0:	d8800015 	stw	r2,0(sp)
 80012c4:	d8000115 	stw	zero,4(sp)
 80012c8:	01003184 	movi	r4,198
 80012cc:	01400c84 	movi	r5,50
 80012d0:	01800104 	movi	r6,4
 80012d4:	01c00044 	movi	r7,1
 80012d8:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(209, 50, BLUE, WHITE, 115, 0);								break;
 80012dc:	00801cc4 	movi	r2,115
 80012e0:	d8800015 	stw	r2,0(sp)
 80012e4:	d8000115 	stw	zero,4(sp)
 80012e8:	01003444 	movi	r4,209
 80012ec:	01400c84 	movi	r5,50
 80012f0:	01800104 	movi	r6,4
 80012f4:	01c00044 	movi	r7,1
 80012f8:	80016580 	call	8001658 <OutGraphicsCharFont2a>
 80012fc:	00005406 	br	8001450 <graph_showGasFrame+0x3e8>
				break;
		// Air Quality
		case AIRQ: OutGraphicsCharFont2a(100, 50, BLUE, WHITE, 65, 0);
 8001300:	00801044 	movi	r2,65
 8001304:	d8800015 	stw	r2,0(sp)
 8001308:	d8000115 	stw	zero,4(sp)
 800130c:	01001904 	movi	r4,100
 8001310:	01400c84 	movi	r5,50
 8001314:	01800104 	movi	r6,4
 8001318:	01c00044 	movi	r7,1
 800131c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(111, 50, BLUE, WHITE, 105, 0);
 8001320:	00801a44 	movi	r2,105
 8001324:	d8800015 	stw	r2,0(sp)
 8001328:	d8000115 	stw	zero,4(sp)
 800132c:	01001bc4 	movi	r4,111
 8001330:	01400c84 	movi	r5,50
 8001334:	01800104 	movi	r6,4
 8001338:	01c00044 	movi	r7,1
 800133c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(122, 50, BLUE, WHITE, 114, 0);
 8001340:	00801c84 	movi	r2,114
 8001344:	d8800015 	stw	r2,0(sp)
 8001348:	d8000115 	stw	zero,4(sp)
 800134c:	01001e84 	movi	r4,122
 8001350:	01400c84 	movi	r5,50
 8001354:	01800104 	movi	r6,4
 8001358:	01c00044 	movi	r7,1
 800135c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(143, 50, BLUE, WHITE, 81, 0);
 8001360:	00801444 	movi	r2,81
 8001364:	d8800015 	stw	r2,0(sp)
 8001368:	d8000115 	stw	zero,4(sp)
 800136c:	010023c4 	movi	r4,143
 8001370:	01400c84 	movi	r5,50
 8001374:	01800104 	movi	r6,4
 8001378:	01c00044 	movi	r7,1
 800137c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(154, 50, BLUE, WHITE, 117, 0);
 8001380:	00801d44 	movi	r2,117
 8001384:	d8800015 	stw	r2,0(sp)
 8001388:	d8000115 	stw	zero,4(sp)
 800138c:	01002684 	movi	r4,154
 8001390:	01400c84 	movi	r5,50
 8001394:	01800104 	movi	r6,4
 8001398:	01c00044 	movi	r7,1
 800139c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(165, 50, BLUE, WHITE, 97, 0);
 80013a0:	00801844 	movi	r2,97
 80013a4:	d8800015 	stw	r2,0(sp)
 80013a8:	d8000115 	stw	zero,4(sp)
 80013ac:	01002944 	movi	r4,165
 80013b0:	01400c84 	movi	r5,50
 80013b4:	01800104 	movi	r6,4
 80013b8:	01c00044 	movi	r7,1
 80013bc:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(176, 50, BLUE, WHITE, 108, 0);
 80013c0:	00801b04 	movi	r2,108
 80013c4:	d8800015 	stw	r2,0(sp)
 80013c8:	d8000115 	stw	zero,4(sp)
 80013cc:	01002c04 	movi	r4,176
 80013d0:	01400c84 	movi	r5,50
 80013d4:	01800104 	movi	r6,4
 80013d8:	01c00044 	movi	r7,1
 80013dc:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(187, 50, BLUE, WHITE, 105, 0);
 80013e0:	00801a44 	movi	r2,105
 80013e4:	d8800015 	stw	r2,0(sp)
 80013e8:	d8000115 	stw	zero,4(sp)
 80013ec:	01002ec4 	movi	r4,187
 80013f0:	01400c84 	movi	r5,50
 80013f4:	01800104 	movi	r6,4
 80013f8:	01c00044 	movi	r7,1
 80013fc:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(198, 50, BLUE, WHITE, 116, 0);
 8001400:	00801d04 	movi	r2,116
 8001404:	d8800015 	stw	r2,0(sp)
 8001408:	d8000115 	stw	zero,4(sp)
 800140c:	01003184 	movi	r4,198
 8001410:	01400c84 	movi	r5,50
 8001414:	01800104 	movi	r6,4
 8001418:	01c00044 	movi	r7,1
 800141c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
				OutGraphicsCharFont2a(209, 50, BLUE, WHITE, 121, 0);								break;
 8001420:	00801e44 	movi	r2,121
 8001424:	d8800015 	stw	r2,0(sp)
 8001428:	d8000115 	stw	zero,4(sp)
 800142c:	01003444 	movi	r4,209
 8001430:	01400c84 	movi	r5,50
 8001434:	01800104 	movi	r6,4
 8001438:	01c00044 	movi	r7,1
 800143c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
 8001440:	00000306 	br	8001450 <graph_showGasFrame+0x3e8>
				break;
		default: printf("Unexpected gas name ...");
 8001444:	01020074 	movhi	r4,2049
 8001448:	2104ae04 	addi	r4,r4,4792
 800144c:	8001eec0 	call	8001eec <printf>
	}

	// print coordinate
	// print label
	// 100%
	OutGraphicsCharFont2a(47, 80, GREEN, WHITE, 49, 0);
 8001450:	00800c44 	movi	r2,49
 8001454:	d8800015 	stw	r2,0(sp)
 8001458:	d8000115 	stw	zero,4(sp)
 800145c:	01000bc4 	movi	r4,47
 8001460:	01401404 	movi	r5,80
 8001464:	01801904 	movi	r6,100
 8001468:	01c00044 	movi	r7,1
 800146c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(58, 80, GREEN, WHITE, 48, 0);
 8001470:	00800c04 	movi	r2,48
 8001474:	d8800015 	stw	r2,0(sp)
 8001478:	d8000115 	stw	zero,4(sp)
 800147c:	01000e84 	movi	r4,58
 8001480:	01401404 	movi	r5,80
 8001484:	01801904 	movi	r6,100
 8001488:	01c00044 	movi	r7,1
 800148c:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(69, 80, GREEN, WHITE, 48, 0);
 8001490:	00800c04 	movi	r2,48
 8001494:	d8800015 	stw	r2,0(sp)
 8001498:	d8000115 	stw	zero,4(sp)
 800149c:	01001144 	movi	r4,69
 80014a0:	01401404 	movi	r5,80
 80014a4:	01801904 	movi	r6,100
 80014a8:	01c00044 	movi	r7,1
 80014ac:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(80, 80, YELLOW, WHITE, 37, 0);
 80014b0:	00800944 	movi	r2,37
 80014b4:	d8800015 	stw	r2,0(sp)
 80014b8:	d8000115 	stw	zero,4(sp)
 80014bc:	01001404 	movi	r4,80
 80014c0:	01401404 	movi	r5,80
 80014c4:	01800144 	movi	r6,5
 80014c8:	01c00044 	movi	r7,1
 80014cc:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	// 0%
	OutGraphicsCharFont2a(69, 430, GREEN, WHITE, 48, 0);
 80014d0:	00800c04 	movi	r2,48
 80014d4:	d8800015 	stw	r2,0(sp)
 80014d8:	d8000115 	stw	zero,4(sp)
 80014dc:	01001144 	movi	r4,69
 80014e0:	01406b84 	movi	r5,430
 80014e4:	01801904 	movi	r6,100
 80014e8:	01c00044 	movi	r7,1
 80014ec:	80016580 	call	8001658 <OutGraphicsCharFont2a>
	OutGraphicsCharFont2a(80, 430, YELLOW, WHITE, 37, 0);
 80014f0:	00800944 	movi	r2,37
 80014f4:	d8800015 	stw	r2,0(sp)
 80014f8:	d8000115 	stw	zero,4(sp)
 80014fc:	01001404 	movi	r4,80
 8001500:	01406b84 	movi	r5,430
 8001504:	01800144 	movi	r6,5
 8001508:	01c00044 	movi	r7,1
 800150c:	80016580 	call	8001658 <OutGraphicsCharFont2a>

	// print axices
	VLine(100, 80, 350, GREEN);		// y-axis
 8001510:	01001904 	movi	r4,100
 8001514:	01401404 	movi	r5,80
 8001518:	01805784 	movi	r6,350
 800151c:	01c01904 	movi	r7,100
 8001520:	800041c0 	call	800041c <VLine>
	HLine(100, 430, 500, GREEN);	// x-axis
 8001524:	01001904 	movi	r4,100
 8001528:	01406b84 	movi	r5,430
 800152c:	01807d04 	movi	r6,500
 8001530:	01c01904 	movi	r7,100
 8001534:	80003800 	call	8000380 <HLine>
}
 8001538:	e037883a 	mov	sp,fp
 800153c:	dfc00117 	ldw	ra,4(sp)
 8001540:	df000017 	ldw	fp,0(sp)
 8001544:	dec00204 	addi	sp,sp,8
 8001548:	f800283a 	ret

0800154c <graph_updateGasValue>:


// global variable to remember the last height value of the bar
last_height = 0;		// initialize it to zero
void graph_updateGasValue(int val) {
 800154c:	defffb04 	addi	sp,sp,-20
 8001550:	dfc00415 	stw	ra,16(sp)
 8001554:	df000315 	stw	fp,12(sp)
 8001558:	df000304 	addi	fp,sp,12
 800155c:	e13fff15 	stw	r4,-4(fp)
	// check if input is valid
	if (val > 1024 || val < 0) return;
 8001560:	e0bfff17 	ldw	r2,-4(fp)
 8001564:	10810048 	cmpgei	r2,r2,1025
 8001568:	1000021e 	bne	r2,zero,8001574 <graph_updateGasValue+0x28>
 800156c:	e0bfff17 	ldw	r2,-4(fp)
 8001570:	1000010e 	bge	r2,zero,8001578 <graph_updateGasValue+0x2c>
 8001574:	00003306 	br	8001644 <graph_updateGasValue+0xf8>
	// get the height of the bar
	int height = 350 * val / 1024;
 8001578:	e0bfff17 	ldw	r2,-4(fp)
 800157c:	108057a4 	muli	r2,r2,350
 8001580:	1000010e 	bge	r2,zero,8001588 <graph_updateGasValue+0x3c>
 8001584:	1080ffc4 	addi	r2,r2,1023
 8001588:	1005d2ba 	srai	r2,r2,10
 800158c:	e0bffe15 	stw	r2,-8(fp)

	// change the bar image according to the difference between the current hight and the last height
	int i;
	if (height > last_height) {
 8001590:	d0e6d817 	ldw	r3,-25760(gp)
 8001594:	e0bffe17 	ldw	r2,-8(fp)
 8001598:	1880130e 	bge	r3,r2,80015e8 <graph_updateGasValue+0x9c>
		for (i=429-last_height; i>429-height; i--) {
 800159c:	d0a6d817 	ldw	r2,-25760(gp)
 80015a0:	00c06b44 	movi	r3,429
 80015a4:	1885c83a 	sub	r2,r3,r2
 80015a8:	e0bffd15 	stw	r2,-12(fp)
 80015ac:	00000806 	br	80015d0 <graph_updateGasValue+0x84>
			HLine(300, i, 100, YELLOW);
 80015b0:	01004b04 	movi	r4,300
 80015b4:	e17ffd17 	ldw	r5,-12(fp)
 80015b8:	01801904 	movi	r6,100
 80015bc:	01c00144 	movi	r7,5
 80015c0:	80003800 	call	8000380 <HLine>
	int height = 350 * val / 1024;

	// change the bar image according to the difference between the current hight and the last height
	int i;
	if (height > last_height) {
		for (i=429-last_height; i>429-height; i--) {
 80015c4:	e0bffd17 	ldw	r2,-12(fp)
 80015c8:	10bfffc4 	addi	r2,r2,-1
 80015cc:	e0bffd15 	stw	r2,-12(fp)
 80015d0:	00c06b44 	movi	r3,429
 80015d4:	e0bffe17 	ldw	r2,-8(fp)
 80015d8:	1887c83a 	sub	r3,r3,r2
 80015dc:	e0bffd17 	ldw	r2,-12(fp)
 80015e0:	18bff316 	blt	r3,r2,80015b0 <__alt_data_end+0xfc0015b0>
 80015e4:	00001506 	br	800163c <graph_updateGasValue+0xf0>
			HLine(300, i, 100, YELLOW);
		}
	} else if (height < last_height) {
 80015e8:	d0a6d817 	ldw	r2,-25760(gp)
 80015ec:	e0fffe17 	ldw	r3,-8(fp)
 80015f0:	1880120e 	bge	r3,r2,800163c <graph_updateGasValue+0xf0>
		for (i=429-last_height; i<429-height; i++) {
 80015f4:	d0a6d817 	ldw	r2,-25760(gp)
 80015f8:	00c06b44 	movi	r3,429
 80015fc:	1885c83a 	sub	r2,r3,r2
 8001600:	e0bffd15 	stw	r2,-12(fp)
 8001604:	00000806 	br	8001628 <graph_updateGasValue+0xdc>
			HLine(300, i, 100, BLACK);
 8001608:	01004b04 	movi	r4,300
 800160c:	e17ffd17 	ldw	r5,-12(fp)
 8001610:	01801904 	movi	r6,100
 8001614:	000f883a 	mov	r7,zero
 8001618:	80003800 	call	8000380 <HLine>
	if (height > last_height) {
		for (i=429-last_height; i>429-height; i--) {
			HLine(300, i, 100, YELLOW);
		}
	} else if (height < last_height) {
		for (i=429-last_height; i<429-height; i++) {
 800161c:	e0bffd17 	ldw	r2,-12(fp)
 8001620:	10800044 	addi	r2,r2,1
 8001624:	e0bffd15 	stw	r2,-12(fp)
 8001628:	00c06b44 	movi	r3,429
 800162c:	e0bffe17 	ldw	r2,-8(fp)
 8001630:	1885c83a 	sub	r2,r3,r2
 8001634:	e0fffd17 	ldw	r3,-12(fp)
 8001638:	18bff316 	blt	r3,r2,8001608 <__alt_data_end+0xfc001608>
			HLine(300, i, 100, BLACK);
		}
	}

	// update last height
	last_height = height;
 800163c:	e0bffe17 	ldw	r2,-8(fp)
 8001640:	d0a6d815 	stw	r2,-25760(gp)

}
 8001644:	e037883a 	mov	sp,fp
 8001648:	dfc00117 	ldw	ra,4(sp)
 800164c:	df000017 	ldw	fp,0(sp)
 8001650:	dec00204 	addi	sp,sp,8
 8001654:	f800283a 	ret

08001658 <OutGraphicsCharFont2a>:
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 8001658:	defff004 	addi	sp,sp,-64
 800165c:	dfc00f15 	stw	ra,60(sp)
 8001660:	df000e15 	stw	fp,56(sp)
 8001664:	ddc00d15 	stw	r23,52(sp)
 8001668:	dd800c15 	stw	r22,48(sp)
 800166c:	dd400b15 	stw	r21,44(sp)
 8001670:	dd000a15 	stw	r20,40(sp)
 8001674:	dcc00915 	stw	r19,36(sp)
 8001678:	dc800815 	stw	r18,32(sp)
 800167c:	dc400715 	stw	r17,28(sp)
 8001680:	dc000615 	stw	r16,24(sp)
 8001684:	df000e04 	addi	fp,sp,56
 8001688:	e13ff215 	stw	r4,-56(fp)
 800168c:	e17ff315 	stw	r5,-52(fp)
 8001690:	e1bff415 	stw	r6,-48(fp)
 8001694:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 8001698:	e53ff217 	ldw	r20,-56(fp)
					theY = y ;
 800169c:	e57ff317 	ldw	r21,-52(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 80016a0:	e0bff417 	ldw	r2,-48(fp)
 80016a4:	e0bff605 	stb	r2,-40(fp)
	register int 	BitMask,
					theCharacter = c,
 80016a8:	e4800217 	ldw	r18,8(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 80016ac:	e0bff217 	ldw	r2,-56(fp)
 80016b0:	10bfffcc 	andi	r2,r2,65535
 80016b4:	10a0001c 	xori	r2,r2,32768
 80016b8:	10a00004 	addi	r2,r2,-32768
 80016bc:	1080c808 	cmpgei	r2,r2,800
 80016c0:	1000061e 	bne	r2,zero,80016dc <OutGraphicsCharFont2a+0x84>
 80016c4:	e0bff317 	ldw	r2,-52(fp)
 80016c8:	10bfffcc 	andi	r2,r2,65535
 80016cc:	10a0001c 	xori	r2,r2,32768
 80016d0:	10a00004 	addi	r2,r2,-32768
 80016d4:	10807810 	cmplti	r2,r2,480
 80016d8:	1000011e 	bne	r2,zero,80016e0 <OutGraphicsCharFont2a+0x88>
        return ;
 80016dc:	00003506 	br	80017b4 <OutGraphicsCharFont2a+0x15c>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 80016e0:	9005883a 	mov	r2,r18
 80016e4:	10bfffcc 	andi	r2,r2,65535
 80016e8:	10a0001c 	xori	r2,r2,32768
 80016ec:	10a00004 	addi	r2,r2,-32768
 80016f0:	10800810 	cmplti	r2,r2,32
 80016f4:	10002f1e 	bne	r2,zero,80017b4 <OutGraphicsCharFont2a+0x15c>
 80016f8:	9005883a 	mov	r2,r18
 80016fc:	10bfffcc 	andi	r2,r2,65535
 8001700:	10a0001c 	xori	r2,r2,32768
 8001704:	10a00004 	addi	r2,r2,-32768
 8001708:	10801fc8 	cmpgei	r2,r2,127
 800170c:	1000291e 	bne	r2,zero,80017b4 <OutGraphicsCharFont2a+0x15c>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 8001710:	94bff804 	addi	r18,r18,-32
		theRow = FONT2_YPIXELS;
 8001714:	05800384 	movi	r22,14
		theColumn = FONT2_XPIXELS;
 8001718:	05c00284 	movi	r23,10

		for(row = 0; row < theRow ; row ++)	{
 800171c:	0021883a 	mov	r16,zero
 8001720:	00002306 	br	80017b0 <OutGraphicsCharFont2a+0x158>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 8001724:	00820074 	movhi	r2,2049
 8001728:	10855a84 	addi	r2,r2,5482
 800172c:	90c003a4 	muli	r3,r18,14
 8001730:	1c07883a 	add	r3,r3,r16
 8001734:	18c7883a 	add	r3,r3,r3
 8001738:	10c5883a 	add	r2,r2,r3
 800173c:	1080000b 	ldhu	r2,0(r2)
 8001740:	10bfffcc 	andi	r2,r2,65535
 8001744:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 8001748:	04c08004 	movi	r19,512
			for(column = 0; column < theColumn;   )  	{
 800174c:	0023883a 	mov	r17,zero
 8001750:	00001506 	br	80017a8 <OutGraphicsCharFont2a+0x150>
				if((pixels & BitMask))														// if valid pixel, then write it
 8001754:	e0fff717 	ldw	r3,-36(fp)
 8001758:	1cc4703a 	and	r2,r3,r19
 800175c:	10000726 	beq	r2,zero,800177c <OutGraphicsCharFont2a+0x124>
					WriteAPixel(theX+column, theY+row, theColour) ;
 8001760:	a449883a 	add	r4,r20,r17
 8001764:	ac07883a 	add	r3,r21,r16
 8001768:	e0bff607 	ldb	r2,-40(fp)
 800176c:	180b883a 	mov	r5,r3
 8001770:	100d883a 	mov	r6,r2
 8001774:	80001f80 	call	80001f8 <WriteAPixel>
 8001778:	00000906 	br	80017a0 <OutGraphicsCharFont2a+0x148>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == 1)
 800177c:	e0800317 	ldw	r2,12(fp)
 8001780:	10800058 	cmpnei	r2,r2,1
 8001784:	1000061e 	bne	r2,zero,80017a0 <OutGraphicsCharFont2a+0x148>
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 8001788:	a447883a 	add	r3,r20,r17
 800178c:	ac05883a 	add	r2,r21,r16
 8001790:	1809883a 	mov	r4,r3
 8001794:	100b883a 	mov	r5,r2
 8001798:	e1bff517 	ldw	r6,-44(fp)
 800179c:	80001f80 	call	80001f8 <WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 80017a0:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1 ;
 80017a4:	9827d07a 	srai	r19,r19,1
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 80017a8:	8dffea16 	blt	r17,r23,8001754 <__alt_data_end+0xfc001754>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 80017ac:	84000044 	addi	r16,r16,1
 80017b0:	85bfdc16 	blt	r16,r22,8001724 <__alt_data_end+0xfc001724>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 80017b4:	e6fff804 	addi	sp,fp,-32
 80017b8:	dfc00917 	ldw	ra,36(sp)
 80017bc:	df000817 	ldw	fp,32(sp)
 80017c0:	ddc00717 	ldw	r23,28(sp)
 80017c4:	dd800617 	ldw	r22,24(sp)
 80017c8:	dd400517 	ldw	r21,20(sp)
 80017cc:	dd000417 	ldw	r20,16(sp)
 80017d0:	dcc00317 	ldw	r19,12(sp)
 80017d4:	dc800217 	ldw	r18,8(sp)
 80017d8:	dc400117 	ldw	r17,4(sp)
 80017dc:	dc000017 	ldw	r16,0(sp)
 80017e0:	dec00a04 	addi	sp,sp,40
 80017e4:	f800283a 	ret

080017e8 <ScreenTouched>:
#include "project.h"
/*****************************************************************************
   tests for screen touched or data received from SENSOR
*****************************************************************************/
int ScreenTouched(void)
{
 80017e8:	deffff04 	addi	sp,sp,-4
 80017ec:	df000015 	stw	fp,0(sp)
 80017f0:	d839883a 	mov	fp,sp
	// return TRUE if any data received from 6850 connected to touchscreen
	// or FALSE otherwise
	if ( (TOUCH_Status & 0x01) == 0x00 )
 80017f4:	00a10034 	movhi	r2,33792
 80017f8:	10808c04 	addi	r2,r2,560
 80017fc:	10800003 	ldbu	r2,0(r2)
 8001800:	10803fcc 	andi	r2,r2,255
 8001804:	1080004c 	andi	r2,r2,1
 8001808:	1000021e 	bne	r2,zero,8001814 <ScreenTouched+0x2c>
		return FALSE;
 800180c:	0005883a 	mov	r2,zero
 8001810:	00000106 	br	8001818 <ScreenTouched+0x30>
	else{
		return TRUE;
 8001814:	00800044 	movi	r2,1
	}
}
 8001818:	e037883a 	mov	sp,fp
 800181c:	df000017 	ldw	fp,0(sp)
 8001820:	dec00104 	addi	sp,sp,4
 8001824:	f800283a 	ret

08001828 <SensorReceivedData>:

int SensorReceivedData(void)
{
 8001828:	deffff04 	addi	sp,sp,-4
 800182c:	df000015 	stw	fp,0(sp)
 8001830:	d839883a 	mov	fp,sp
	// return TRUE if any data received from 6850 connected to touchscreen
	// or FALSE otherwise
	if ( (SENSOR_Status & 0x01) == 0x00 )
 8001834:	00a10034 	movhi	r2,33792
 8001838:	10808404 	addi	r2,r2,528
 800183c:	10800003 	ldbu	r2,0(r2)
 8001840:	10803fcc 	andi	r2,r2,255
 8001844:	1080004c 	andi	r2,r2,1
 8001848:	1000021e 	bne	r2,zero,8001854 <SensorReceivedData+0x2c>
		return FALSE;
 800184c:	0005883a 	mov	r2,zero
 8001850:	00000106 	br	8001858 <SensorReceivedData+0x30>
	else{
		return TRUE;
 8001854:	00800044 	movi	r2,1
	}
}
 8001858:	e037883a 	mov	sp,fp
 800185c:	df000017 	ldw	fp,0(sp)
 8001860:	dec00104 	addi	sp,sp,4
 8001864:	f800283a 	ret

08001868 <WaitForData>:

/*****************************************************************************
**   wait for screen or SENSOR
*****************************************************************************/
void WaitForData()
{
 8001868:	defffe04 	addi	sp,sp,-8
 800186c:	dfc00115 	stw	ra,4(sp)
 8001870:	df000015 	stw	fp,0(sp)
 8001874:	d839883a 	mov	fp,sp
	while(!SensorReceivedData() && !ScreenTouched())
 8001878:	0001883a 	nop
 800187c:	80018280 	call	8001828 <SensorReceivedData>
 8001880:	1000021e 	bne	r2,zero,800188c <WaitForData+0x24>
 8001884:	80017e80 	call	80017e8 <ScreenTouched>
 8001888:	103ffc26 	beq	r2,zero,800187c <__alt_data_end+0xfc00187c>
				;
}
 800188c:	e037883a 	mov	sp,fp
 8001890:	dfc00117 	ldw	ra,4(sp)
 8001894:	df000017 	ldw	fp,0(sp)
 8001898:	dec00204 	addi	sp,sp,8
 800189c:	f800283a 	ret

080018a0 <GetPress>:

/*****************************************************************************
* Touch screen get points functions
*****************************************************************************/
Point GetPress(void)
{
 80018a0:	defff704 	addi	sp,sp,-36
 80018a4:	dfc00815 	stw	ra,32(sp)
 80018a8:	df000715 	stw	fp,28(sp)
 80018ac:	df000704 	addi	fp,sp,28
	// wait for a pen down command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
	int b1;

	do{
		b1 = getcharTouch();
 80018b0:	8001a480 	call	8001a48 <getcharTouch>
 80018b4:	e0bff915 	stw	r2,-28(fp)
	}while(b1 != 0x81);
 80018b8:	e0bff917 	ldw	r2,-28(fp)
 80018bc:	10802058 	cmpnei	r2,r2,129
 80018c0:	103ffb1e 	bne	r2,zero,80018b0 <__alt_data_end+0xfc0018b0>

	int b2 = getcharTouch();
 80018c4:	8001a480 	call	8001a48 <getcharTouch>
 80018c8:	e0bffa15 	stw	r2,-24(fp)
	int b3 = getcharTouch();
 80018cc:	8001a480 	call	8001a48 <getcharTouch>
 80018d0:	e0bffb15 	stw	r2,-20(fp)
	int b4 = getcharTouch();
 80018d4:	8001a480 	call	8001a48 <getcharTouch>
 80018d8:	e0bffc15 	stw	r2,-16(fp)
	int b5 = getcharTouch();
 80018dc:	8001a480 	call	8001a48 <getcharTouch>
 80018e0:	e0bffd15 	stw	r2,-12(fp)

	p1.x = ((b3 & 0x1f) << 7) | (b2 & 0x7e);
 80018e4:	e0bffb17 	ldw	r2,-20(fp)
 80018e8:	108007cc 	andi	r2,r2,31
 80018ec:	100691fa 	slli	r3,r2,7
 80018f0:	e0bffa17 	ldw	r2,-24(fp)
 80018f4:	10801f8c 	andi	r2,r2,126
 80018f8:	1884b03a 	or	r2,r3,r2
 80018fc:	e0bffe15 	stw	r2,-8(fp)
	p1.y = ((b5 & 0x1f) << 7) | (b4 & 0x7e);
 8001900:	e0bffd17 	ldw	r2,-12(fp)
 8001904:	108007cc 	andi	r2,r2,31
 8001908:	100691fa 	slli	r3,r2,7
 800190c:	e0bffc17 	ldw	r2,-16(fp)
 8001910:	10801f8c 	andi	r2,r2,126
 8001914:	1884b03a 	or	r2,r3,r2
 8001918:	e0bfff15 	stw	r2,-4(fp)
	p1.x = p1.x * 100 / 512;
 800191c:	e0bffe17 	ldw	r2,-8(fp)
 8001920:	10801924 	muli	r2,r2,100
 8001924:	1000010e 	bge	r2,zero,800192c <GetPress+0x8c>
 8001928:	10807fc4 	addi	r2,r2,511
 800192c:	1005d27a 	srai	r2,r2,9
 8001930:	e0bffe15 	stw	r2,-8(fp)
	p1.y = p1.y * 1000 / 8533;
 8001934:	e0bfff17 	ldw	r2,-4(fp)
 8001938:	10c0fa24 	muli	r3,r2,1000
 800193c:	00885544 	movi	r2,8533
 8001940:	1885283a 	div	r2,r3,r2
 8001944:	e0bfff15 	stw	r2,-4(fp)
	return p1;
 8001948:	e0bffe17 	ldw	r2,-8(fp)
 800194c:	e0ffff17 	ldw	r3,-4(fp)
 8001950:	1009883a 	mov	r4,r2
 8001954:	180b883a 	mov	r5,r3
}
 8001958:	2005883a 	mov	r2,r4
 800195c:	2807883a 	mov	r3,r5
 8001960:	e037883a 	mov	sp,fp
 8001964:	dfc00117 	ldw	ra,4(sp)
 8001968:	df000017 	ldw	fp,0(sp)
 800196c:	dec00204 	addi	sp,sp,8
 8001970:	f800283a 	ret

08001974 <GetRelease>:

Point GetRelease (void)
{
 8001974:	defff704 	addi	sp,sp,-36
 8001978:	dfc00815 	stw	ra,32(sp)
 800197c:	df000715 	stw	fp,28(sp)
 8001980:	df000704 	addi	fp,sp,28
	// wait for a pen up command then return the X,Y coord of the point
	// calibrated correctly so that it maps to a pixel on screen
		int b1;

		do{
			b1 = getcharTouch();
 8001984:	8001a480 	call	8001a48 <getcharTouch>
 8001988:	e0bff915 	stw	r2,-28(fp)
		}while(b1 != 0x80);
 800198c:	e0bff917 	ldw	r2,-28(fp)
 8001990:	10802018 	cmpnei	r2,r2,128
 8001994:	103ffb1e 	bne	r2,zero,8001984 <__alt_data_end+0xfc001984>

		int b2 = getcharTouch();
 8001998:	8001a480 	call	8001a48 <getcharTouch>
 800199c:	e0bffa15 	stw	r2,-24(fp)
		int b3 = getcharTouch();
 80019a0:	8001a480 	call	8001a48 <getcharTouch>
 80019a4:	e0bffb15 	stw	r2,-20(fp)
		int b4 = getcharTouch();
 80019a8:	8001a480 	call	8001a48 <getcharTouch>
 80019ac:	e0bffc15 	stw	r2,-16(fp)
		int b5 = getcharTouch();
 80019b0:	8001a480 	call	8001a48 <getcharTouch>
 80019b4:	e0bffd15 	stw	r2,-12(fp)

		p1.x = ((b3 & 0x1f) << 7) | (b2 & 0x7e);
 80019b8:	e0bffb17 	ldw	r2,-20(fp)
 80019bc:	108007cc 	andi	r2,r2,31
 80019c0:	100691fa 	slli	r3,r2,7
 80019c4:	e0bffa17 	ldw	r2,-24(fp)
 80019c8:	10801f8c 	andi	r2,r2,126
 80019cc:	1884b03a 	or	r2,r3,r2
 80019d0:	e0bffe15 	stw	r2,-8(fp)
		p1.y = ((b5 & 0x1f) << 7) | (b4 & 0x7e);
 80019d4:	e0bffd17 	ldw	r2,-12(fp)
 80019d8:	108007cc 	andi	r2,r2,31
 80019dc:	100691fa 	slli	r3,r2,7
 80019e0:	e0bffc17 	ldw	r2,-16(fp)
 80019e4:	10801f8c 	andi	r2,r2,126
 80019e8:	1884b03a 	or	r2,r3,r2
 80019ec:	e0bfff15 	stw	r2,-4(fp)
		p1.x = p1.x * 100 / 512;
 80019f0:	e0bffe17 	ldw	r2,-8(fp)
 80019f4:	10801924 	muli	r2,r2,100
 80019f8:	1000010e 	bge	r2,zero,8001a00 <GetRelease+0x8c>
 80019fc:	10807fc4 	addi	r2,r2,511
 8001a00:	1005d27a 	srai	r2,r2,9
 8001a04:	e0bffe15 	stw	r2,-8(fp)
		p1.y = p1.y * 1000 / 8533;
 8001a08:	e0bfff17 	ldw	r2,-4(fp)
 8001a0c:	10c0fa24 	muli	r3,r2,1000
 8001a10:	00885544 	movi	r2,8533
 8001a14:	1885283a 	div	r2,r3,r2
 8001a18:	e0bfff15 	stw	r2,-4(fp)
		return p1;
 8001a1c:	e0bffe17 	ldw	r2,-8(fp)
 8001a20:	e0ffff17 	ldw	r3,-4(fp)
 8001a24:	1009883a 	mov	r4,r2
 8001a28:	180b883a 	mov	r5,r3
}
 8001a2c:	2005883a 	mov	r2,r4
 8001a30:	2807883a 	mov	r3,r5
 8001a34:	e037883a 	mov	sp,fp
 8001a38:	dfc00117 	ldw	ra,4(sp)
 8001a3c:	df000017 	ldw	fp,0(sp)
 8001a40:	dec00204 	addi	sp,sp,8
 8001a44:	f800283a 	ret

08001a48 <getcharTouch>:

int getcharTouch( void )
{
 8001a48:	deffff04 	addi	sp,sp,-4
 8001a4c:	df000015 	stw	fp,0(sp)
 8001a50:	d839883a 	mov	fp,sp
	while ( (TOUCH_Status & 0x01) == 0x00 ) {}
 8001a54:	0001883a 	nop
 8001a58:	00a10034 	movhi	r2,33792
 8001a5c:	10808c04 	addi	r2,r2,560
 8001a60:	10800003 	ldbu	r2,0(r2)
 8001a64:	10803fcc 	andi	r2,r2,255
 8001a68:	1080004c 	andi	r2,r2,1
 8001a6c:	103ffa26 	beq	r2,zero,8001a58 <__alt_data_end+0xfc001a58>
	return TOUCH_RxData;
 8001a70:	00a10034 	movhi	r2,33792
 8001a74:	10808c84 	addi	r2,r2,562
 8001a78:	10800003 	ldbu	r2,0(r2)
 8001a7c:	10803fcc 	andi	r2,r2,255
}
 8001a80:	e037883a 	mov	sp,fp
 8001a84:	df000017 	ldw	fp,0(sp)
 8001a88:	dec00104 	addi	sp,sp,4
 8001a8c:	f800283a 	ret

08001a90 <getcharSensor>:
#define AIRQ	4
/*
 * Functions to get data from Arduino and update the gas values
 */
int getcharSensor( void )
{
 8001a90:	deffff04 	addi	sp,sp,-4
 8001a94:	df000015 	stw	fp,0(sp)
 8001a98:	d839883a 	mov	fp,sp
 // poll Rx bit in 6850 status register. Wait for it to become '1'
 // read received character from 6850 RxData register.

	while ( (SENSOR_Status & 0x01) == 0x00 ) {}
 8001a9c:	0001883a 	nop
 8001aa0:	00a10034 	movhi	r2,33792
 8001aa4:	10808404 	addi	r2,r2,528
 8001aa8:	10800003 	ldbu	r2,0(r2)
 8001aac:	10803fcc 	andi	r2,r2,255
 8001ab0:	1080004c 	andi	r2,r2,1
 8001ab4:	103ffa26 	beq	r2,zero,8001aa0 <__alt_data_end+0xfc001aa0>
	return SENSOR_RxData;
 8001ab8:	00a10034 	movhi	r2,33792
 8001abc:	10808484 	addi	r2,r2,530
 8001ac0:	10800003 	ldbu	r2,0(r2)
 8001ac4:	10803fcc 	andi	r2,r2,255
}
 8001ac8:	e037883a 	mov	sp,fp
 8001acc:	df000017 	ldw	fp,0(sp)
 8001ad0:	dec00104 	addi	sp,sp,4
 8001ad4:	f800283a 	ret

08001ad8 <update>:

//updates the gas value
void update(void){
 8001ad8:	defff104 	addi	sp,sp,-60
 8001adc:	dfc00e15 	stw	ra,56(sp)
 8001ae0:	df000d15 	stw	fp,52(sp)
 8001ae4:	df000d04 	addi	fp,sp,52
	int mq2_Val;
	int mq4_Val;

	//check control,
	do{
		control = getcharSensor();
 8001ae8:	8001a900 	call	8001a90 <getcharSensor>
 8001aec:	e0bff315 	stw	r2,-52(fp)
	}while(control != 0x80);
 8001af0:	e0bff317 	ldw	r2,-52(fp)
 8001af4:	10802018 	cmpnei	r2,r2,128
 8001af8:	103ffb1e 	bne	r2,zero,8001ae8 <__alt_data_end+0xfc001ae8>

	//data for mq5
		mq5_b1 = getcharSensor();
 8001afc:	8001a900 	call	8001a90 <getcharSensor>
 8001b00:	e0bff415 	stw	r2,-48(fp)
		mq5_b2 = getcharSensor();
 8001b04:	8001a900 	call	8001a90 <getcharSensor>
 8001b08:	e0bff515 	stw	r2,-44(fp)
		mq5_Val = ((mq5_b1 & 0x1f) << 5) | (mq5_b2 & 0x1f) ;
 8001b0c:	e0bff417 	ldw	r2,-48(fp)
 8001b10:	108007cc 	andi	r2,r2,31
 8001b14:	1006917a 	slli	r3,r2,5
 8001b18:	e0bff517 	ldw	r2,-44(fp)
 8001b1c:	108007cc 	andi	r2,r2,31
 8001b20:	1884b03a 	or	r2,r3,r2
 8001b24:	e0bff615 	stw	r2,-40(fp)
		printf("mq5 = %d, ", mq5_Val);
 8001b28:	010200b4 	movhi	r4,2050
 8001b2c:	212dfd04 	addi	r4,r4,-18444
 8001b30:	e17ff617 	ldw	r5,-40(fp)
 8001b34:	8001eec0 	call	8001eec <printf>
	//data for mq135
		mq135_b1 = getcharSensor();
 8001b38:	8001a900 	call	8001a90 <getcharSensor>
 8001b3c:	e0bff715 	stw	r2,-36(fp)
		mq135_b2 = getcharSensor();
 8001b40:	8001a900 	call	8001a90 <getcharSensor>
 8001b44:	e0bff815 	stw	r2,-32(fp)
		mq135_Val = ((mq135_b1 & 0x1f) << 5) | (mq135_b2 & 0x1f) ;
 8001b48:	e0bff717 	ldw	r2,-36(fp)
 8001b4c:	108007cc 	andi	r2,r2,31
 8001b50:	1006917a 	slli	r3,r2,5
 8001b54:	e0bff817 	ldw	r2,-32(fp)
 8001b58:	108007cc 	andi	r2,r2,31
 8001b5c:	1884b03a 	or	r2,r3,r2
 8001b60:	e0bff915 	stw	r2,-28(fp)
		printf("mq135 = %d, ", mq135_Val);
 8001b64:	010200b4 	movhi	r4,2050
 8001b68:	212e0004 	addi	r4,r4,-18432
 8001b6c:	e17ff917 	ldw	r5,-28(fp)
 8001b70:	8001eec0 	call	8001eec <printf>
	//data for mq2
		mq2_b1 = getcharSensor();
 8001b74:	8001a900 	call	8001a90 <getcharSensor>
 8001b78:	e0bffa15 	stw	r2,-24(fp)
		mq2_b2 = getcharSensor();
 8001b7c:	8001a900 	call	8001a90 <getcharSensor>
 8001b80:	e0bffb15 	stw	r2,-20(fp)
		mq2_Val = ((mq2_b1 & 0x1f) << 5) | (mq2_b2 & 0x1f) ;
 8001b84:	e0bffa17 	ldw	r2,-24(fp)
 8001b88:	108007cc 	andi	r2,r2,31
 8001b8c:	1006917a 	slli	r3,r2,5
 8001b90:	e0bffb17 	ldw	r2,-20(fp)
 8001b94:	108007cc 	andi	r2,r2,31
 8001b98:	1884b03a 	or	r2,r3,r2
 8001b9c:	e0bffc15 	stw	r2,-16(fp)
		printf("mq2 = %d, ", mq2_Val);
 8001ba0:	010200b4 	movhi	r4,2050
 8001ba4:	212e0404 	addi	r4,r4,-18416
 8001ba8:	e17ffc17 	ldw	r5,-16(fp)
 8001bac:	8001eec0 	call	8001eec <printf>
	//data for mq4
		mq4_b1 = getcharSensor();
 8001bb0:	8001a900 	call	8001a90 <getcharSensor>
 8001bb4:	e0bffd15 	stw	r2,-12(fp)
		mq4_b2 = getcharSensor();
 8001bb8:	8001a900 	call	8001a90 <getcharSensor>
 8001bbc:	e0bffe15 	stw	r2,-8(fp)
		mq4_Val = ((mq4_b1 & 0x1f) << 5) | (mq4_b2 & 0x1f) ;
 8001bc0:	e0bffd17 	ldw	r2,-12(fp)
 8001bc4:	108007cc 	andi	r2,r2,31
 8001bc8:	1006917a 	slli	r3,r2,5
 8001bcc:	e0bffe17 	ldw	r2,-8(fp)
 8001bd0:	108007cc 	andi	r2,r2,31
 8001bd4:	1884b03a 	or	r2,r3,r2
 8001bd8:	e0bfff15 	stw	r2,-4(fp)
		printf("mq4 = %d \n", mq4_Val);
 8001bdc:	010200b4 	movhi	r4,2050
 8001be0:	212e0704 	addi	r4,r4,-18404
 8001be4:	e17fff17 	ldw	r5,-4(fp)
 8001be8:	8001eec0 	call	8001eec <printf>
		
		// while in gas demo state
		if (current_state != MENU) {
 8001bec:	d0a6d917 	ldw	r2,-25756(gp)
 8001bf0:	10001a26 	beq	r2,zero,8001c5c <update+0x184>
			last_height = 0;
 8001bf4:	d026d815 	stw	zero,-25760(gp)
			switch(current_state){
 8001bf8:	d0a6d917 	ldw	r2,-25756(gp)
 8001bfc:	10c000a0 	cmpeqi	r3,r2,2
 8001c00:	18000d1e 	bne	r3,zero,8001c38 <update+0x160>
 8001c04:	10c000c8 	cmpgei	r3,r2,3
 8001c08:	1800031e 	bne	r3,zero,8001c18 <update+0x140>
 8001c0c:	10800060 	cmpeqi	r2,r2,1
 8001c10:	1000061e 	bne	r2,zero,8001c2c <update+0x154>
 8001c14:	00001106 	br	8001c5c <update+0x184>
 8001c18:	10c000e0 	cmpeqi	r3,r2,3
 8001c1c:	1800091e 	bne	r3,zero,8001c44 <update+0x16c>
 8001c20:	10800120 	cmpeqi	r2,r2,4
 8001c24:	10000a1e 	bne	r2,zero,8001c50 <update+0x178>
 8001c28:	00000c06 	br	8001c5c <update+0x184>
				case CH4: graph_updateGasValue(mq4_Val); break;
 8001c2c:	e13fff17 	ldw	r4,-4(fp)
 8001c30:	800154c0 	call	800154c <graph_updateGasValue>
 8001c34:	00000906 	br	8001c5c <update+0x184>
				case SMOKE: graph_updateGasValue(mq2_Val); break;
 8001c38:	e13ffc17 	ldw	r4,-16(fp)
 8001c3c:	800154c0 	call	800154c <graph_updateGasValue>
 8001c40:	00000606 	br	8001c5c <update+0x184>
				case NGAS: graph_updateGasValue(mq5_Val); break;
 8001c44:	e13ff617 	ldw	r4,-40(fp)
 8001c48:	800154c0 	call	800154c <graph_updateGasValue>
 8001c4c:	00000306 	br	8001c5c <update+0x184>
				case AIRQ: graph_updateGasValue(mq135_Val); break;
 8001c50:	e13ff917 	ldw	r4,-28(fp)
 8001c54:	800154c0 	call	800154c <graph_updateGasValue>
 8001c58:	0001883a 	nop
			}
		}

}
 8001c5c:	e037883a 	mov	sp,fp
 8001c60:	dfc00117 	ldw	ra,4(sp)
 8001c64:	df000017 	ldw	fp,0(sp)
 8001c68:	dec00204 	addi	sp,sp,8
 8001c6c:	f800283a 	ret

08001c70 <main>:
/********************************************************************************
 * Main function
 *******************************************************************************/

void main()
{
 8001c70:	defffa04 	addi	sp,sp,-24
 8001c74:	dfc00515 	stw	ra,20(sp)
 8001c78:	df000415 	stw	fp,16(sp)
 8001c7c:	df000404 	addi	fp,sp,16
   printf("Starting cpen391 project\n");
 8001c80:	010200b4 	movhi	r4,2050
 8001c84:	212e0a04 	addi	r4,r4,-18392
 8001c88:	8001fe00 	call	8001fe0 <puts>

   Init_Sensor();
 8001c8c:	8001e380 	call	8001e38 <Init_Sensor>
   Init_Touch();
 8001c90:	8001e740 	call	8001e74 <Init_Touch>
   graph_goto_menu();
 8001c94:	8000c280 	call	8000c28 <graph_goto_menu>

   while(TRUE){

//	   printf("Waiting for data...\n");
	   WaitForData();
 8001c98:	80018680 	call	8001868 <WaitForData>
//	   printf("data received\n");
	   //determine if the data came from the screen or from SENSOR
	   if(ScreenTouched()){
 8001c9c:	80017e80 	call	80017e8 <ScreenTouched>
 8001ca0:	10006126 	beq	r2,zero,8001e28 <main+0x1b8>
		   //if the data came from touch screen, decode the coordinates
		   Point p1 = GetPress();
 8001ca4:	80018a00 	call	80018a0 <GetPress>
 8001ca8:	1009883a 	mov	r4,r2
 8001cac:	180b883a 	mov	r5,r3
 8001cb0:	e13ffc15 	stw	r4,-16(fp)
 8001cb4:	e17ffd15 	stw	r5,-12(fp)
		   Point p2 = GetRelease();
 8001cb8:	80019740 	call	8001974 <GetRelease>
 8001cbc:	1009883a 	mov	r4,r2
 8001cc0:	180b883a 	mov	r5,r3
 8001cc4:	e13ffe15 	stw	r4,-8(fp)
 8001cc8:	e17fff15 	stw	r5,-4(fp)
		   printf("Press point: x = %d, y = %d\n", p1.x, p1.y);
 8001ccc:	e0fffc17 	ldw	r3,-16(fp)
 8001cd0:	e0bffd17 	ldw	r2,-12(fp)
 8001cd4:	010200b4 	movhi	r4,2050
 8001cd8:	212e1104 	addi	r4,r4,-18364
 8001cdc:	180b883a 	mov	r5,r3
 8001ce0:	100d883a 	mov	r6,r2
 8001ce4:	8001eec0 	call	8001eec <printf>
		   printf("Release point: x = %d, y = %d\n", p2.x, p2.y);
 8001ce8:	e0fffe17 	ldw	r3,-8(fp)
 8001cec:	e0bfff17 	ldw	r2,-4(fp)
 8001cf0:	010200b4 	movhi	r4,2050
 8001cf4:	212e1904 	addi	r4,r4,-18332
 8001cf8:	180b883a 	mov	r5,r3
 8001cfc:	100d883a 	mov	r6,r2
 8001d00:	8001eec0 	call	8001eec <printf>

		   //TODO: What happens when the coordinate is a button?
		   // jump to special gas state 
		   if (current_state == MENU) {
 8001d04:	d0a6d917 	ldw	r2,-25756(gp)
 8001d08:	1000451e 	bne	r2,zero,8001e20 <main+0x1b0>
				if(p1.x >174 && p1.x <374 && p1.y >49 && p1.y < 214){
 8001d0c:	e0bffc17 	ldw	r2,-16(fp)
 8001d10:	10802bd0 	cmplti	r2,r2,175
 8001d14:	10000e1e 	bne	r2,zero,8001d50 <main+0xe0>
 8001d18:	e0bffc17 	ldw	r2,-16(fp)
 8001d1c:	10805d88 	cmpgei	r2,r2,374
 8001d20:	10000b1e 	bne	r2,zero,8001d50 <main+0xe0>
 8001d24:	e0bffd17 	ldw	r2,-12(fp)
 8001d28:	10800c90 	cmplti	r2,r2,50
 8001d2c:	1000081e 	bne	r2,zero,8001d50 <main+0xe0>
 8001d30:	e0bffd17 	ldw	r2,-12(fp)
 8001d34:	10803588 	cmpgei	r2,r2,214
 8001d38:	1000051e 	bne	r2,zero,8001d50 <main+0xe0>
					current_state = CH4;		// change state
 8001d3c:	00800044 	movi	r2,1
 8001d40:	d0a6d915 	stw	r2,-25756(gp)
					graph_showGasFrame(CH4);	// show CH4 frame
 8001d44:	01000044 	movi	r4,1
 8001d48:	80010680 	call	8001068 <graph_showGasFrame>
 8001d4c:	00003306 	br	8001e1c <main+0x1ac>
				} else if (p1.x >174 && p1.x <374 && p1.y >264 && p1.y < 429) {
 8001d50:	e0bffc17 	ldw	r2,-16(fp)
 8001d54:	10802bd0 	cmplti	r2,r2,175
 8001d58:	10000e1e 	bne	r2,zero,8001d94 <main+0x124>
 8001d5c:	e0bffc17 	ldw	r2,-16(fp)
 8001d60:	10805d88 	cmpgei	r2,r2,374
 8001d64:	10000b1e 	bne	r2,zero,8001d94 <main+0x124>
 8001d68:	e0bffd17 	ldw	r2,-12(fp)
 8001d6c:	10804250 	cmplti	r2,r2,265
 8001d70:	1000081e 	bne	r2,zero,8001d94 <main+0x124>
 8001d74:	e0bffd17 	ldw	r2,-12(fp)
 8001d78:	10806b48 	cmpgei	r2,r2,429
 8001d7c:	1000051e 	bne	r2,zero,8001d94 <main+0x124>
					current_state = SMOKE;		// change state
 8001d80:	00800084 	movi	r2,2
 8001d84:	d0a6d915 	stw	r2,-25756(gp)
					graph_showGasFrame(SMOKE);	// show smoke frame
 8001d88:	01000084 	movi	r4,2
 8001d8c:	80010680 	call	8001068 <graph_showGasFrame>
 8001d90:	00002206 	br	8001e1c <main+0x1ac>
				} else if (p1.x >424 && p1.x <624 && p1.y >49 && p1.y < 214) {
 8001d94:	e0bffc17 	ldw	r2,-16(fp)
 8001d98:	10806a50 	cmplti	r2,r2,425
 8001d9c:	10000e1e 	bne	r2,zero,8001dd8 <main+0x168>
 8001da0:	e0bffc17 	ldw	r2,-16(fp)
 8001da4:	10809c08 	cmpgei	r2,r2,624
 8001da8:	10000b1e 	bne	r2,zero,8001dd8 <main+0x168>
 8001dac:	e0bffd17 	ldw	r2,-12(fp)
 8001db0:	10800c90 	cmplti	r2,r2,50
 8001db4:	1000081e 	bne	r2,zero,8001dd8 <main+0x168>
 8001db8:	e0bffd17 	ldw	r2,-12(fp)
 8001dbc:	10803588 	cmpgei	r2,r2,214
 8001dc0:	1000051e 	bne	r2,zero,8001dd8 <main+0x168>
					current_state = NGAS;		// change state
 8001dc4:	008000c4 	movi	r2,3
 8001dc8:	d0a6d915 	stw	r2,-25756(gp)
					graph_showGasFrame(NGAS);	// show natural gas frame
 8001dcc:	010000c4 	movi	r4,3
 8001dd0:	80010680 	call	8001068 <graph_showGasFrame>
 8001dd4:	00001106 	br	8001e1c <main+0x1ac>
				} else if (p1.x >424 && p1.x <624 && p1.y >264 && p1.y < 429) {
 8001dd8:	e0bffc17 	ldw	r2,-16(fp)
 8001ddc:	10806a50 	cmplti	r2,r2,425
 8001de0:	1000111e 	bne	r2,zero,8001e28 <main+0x1b8>
 8001de4:	e0bffc17 	ldw	r2,-16(fp)
 8001de8:	10809c08 	cmpgei	r2,r2,624
 8001dec:	10000e1e 	bne	r2,zero,8001e28 <main+0x1b8>
 8001df0:	e0bffd17 	ldw	r2,-12(fp)
 8001df4:	10804250 	cmplti	r2,r2,265
 8001df8:	10000b1e 	bne	r2,zero,8001e28 <main+0x1b8>
 8001dfc:	e0bffd17 	ldw	r2,-12(fp)
 8001e00:	10806b48 	cmpgei	r2,r2,429
 8001e04:	1000081e 	bne	r2,zero,8001e28 <main+0x1b8>
					current_state = AIRQ;		// change state
 8001e08:	00800104 	movi	r2,4
 8001e0c:	d0a6d915 	stw	r2,-25756(gp)
					graph_showGasFrame(AIRQ);	// show air quality frame
 8001e10:	01000104 	movi	r4,4
 8001e14:	80010680 	call	8001068 <graph_showGasFrame>
 8001e18:	00000306 	br	8001e28 <main+0x1b8>
 8001e1c:	00000206 	br	8001e28 <main+0x1b8>
				}
		   }
		   
		   // jump back to menu if showing gas value
		   else {
			   current_state = MENU;
 8001e20:	d026d915 	stw	zero,-25756(gp)
			   graph_goto_menu();
 8001e24:	8000c280 	call	8000c28 <graph_goto_menu>
		   }
		   
	   }
	   if(SensorReceivedData()){
 8001e28:	80018280 	call	8001828 <SensorReceivedData>
 8001e2c:	10000126 	beq	r2,zero,8001e34 <main+0x1c4>
		   //if the data is from the Arduino, update gas value 
			update(); 
 8001e30:	8001ad80 	call	8001ad8 <update>
//			printf("calling update\n");
	   }
   }
 8001e34:	003f9806 	br	8001c98 <__alt_data_end+0xfc001c98>

08001e38 <Init_Sensor>:
#include "project.h"
/**************************************************************************
/* Initialization functions
****************************************************************************/
void Init_Sensor(void)
{
 8001e38:	deffff04 	addi	sp,sp,-4
 8001e3c:	df000015 	stw	fp,0(sp)
 8001e40:	d839883a 	mov	fp,sp
	SENSOR_Control = 0x15; // binary 00010101 - divide by 16 clock, set RTS low, use 8 bits of data, no parity, 1 stop bit,
 8001e44:	00a10034 	movhi	r2,33792
 8001e48:	10808404 	addi	r2,r2,528
 8001e4c:	00c00544 	movi	r3,21
 8001e50:	10c00005 	stb	r3,0(r2)
	SENSOR_Baud = 0x05;	// program for 9600 baud
 8001e54:	00a10034 	movhi	r2,33792
 8001e58:	10808504 	addi	r2,r2,532
 8001e5c:	00c00144 	movi	r3,5
 8001e60:	10c00005 	stb	r3,0(r2)
}
 8001e64:	e037883a 	mov	sp,fp
 8001e68:	df000017 	ldw	fp,0(sp)
 8001e6c:	dec00104 	addi	sp,sp,4
 8001e70:	f800283a 	ret

08001e74 <Init_Touch>:
void Init_Touch(void)
{
 8001e74:	deffff04 	addi	sp,sp,-4
 8001e78:	df000015 	stw	fp,0(sp)
 8001e7c:	d839883a 	mov	fp,sp
	//setup 6850 controller
	TOUCH_Control = 0x15;
 8001e80:	00a10034 	movhi	r2,33792
 8001e84:	10808c04 	addi	r2,r2,560
 8001e88:	00c00544 	movi	r3,21
 8001e8c:	10c00005 	stb	r3,0(r2)

	//set touch screen baud rate to 9600
	TOUCH_Baud = 0x05;
 8001e90:	00a10034 	movhi	r2,33792
 8001e94:	10808d04 	addi	r2,r2,564
 8001e98:	00c00144 	movi	r3,5
 8001e9c:	10c00005 	stb	r3,0(r2)

	//send enable touch command
	TOUCH_TxData = 0x12;
 8001ea0:	00a10034 	movhi	r2,33792
 8001ea4:	10808c84 	addi	r2,r2,562
 8001ea8:	00c00484 	movi	r3,18
 8001eac:	10c00005 	stb	r3,0(r2)
}
 8001eb0:	e037883a 	mov	sp,fp
 8001eb4:	df000017 	ldw	fp,0(sp)
 8001eb8:	dec00104 	addi	sp,sp,4
 8001ebc:	f800283a 	ret

08001ec0 <_printf_r>:
 8001ec0:	defffd04 	addi	sp,sp,-12
 8001ec4:	dfc00015 	stw	ra,0(sp)
 8001ec8:	d9800115 	stw	r6,4(sp)
 8001ecc:	d9c00215 	stw	r7,8(sp)
 8001ed0:	280d883a 	mov	r6,r5
 8001ed4:	21400217 	ldw	r5,8(r4)
 8001ed8:	d9c00104 	addi	r7,sp,4
 8001edc:	800208c0 	call	800208c <___vfprintf_internal_r>
 8001ee0:	dfc00017 	ldw	ra,0(sp)
 8001ee4:	dec00304 	addi	sp,sp,12
 8001ee8:	f800283a 	ret

08001eec <printf>:
 8001eec:	defffc04 	addi	sp,sp,-16
 8001ef0:	dfc00015 	stw	ra,0(sp)
 8001ef4:	d9400115 	stw	r5,4(sp)
 8001ef8:	d9800215 	stw	r6,8(sp)
 8001efc:	d9c00315 	stw	r7,12(sp)
 8001f00:	008200b4 	movhi	r2,2050
 8001f04:	10b59f04 	addi	r2,r2,-10628
 8001f08:	10800017 	ldw	r2,0(r2)
 8001f0c:	200b883a 	mov	r5,r4
 8001f10:	d9800104 	addi	r6,sp,4
 8001f14:	11000217 	ldw	r4,8(r2)
 8001f18:	80040880 	call	8004088 <__vfprintf_internal>
 8001f1c:	dfc00017 	ldw	ra,0(sp)
 8001f20:	dec00404 	addi	sp,sp,16
 8001f24:	f800283a 	ret

08001f28 <_puts_r>:
 8001f28:	defff604 	addi	sp,sp,-40
 8001f2c:	dc000715 	stw	r16,28(sp)
 8001f30:	2021883a 	mov	r16,r4
 8001f34:	2809883a 	mov	r4,r5
 8001f38:	dc400815 	stw	r17,32(sp)
 8001f3c:	dfc00915 	stw	ra,36(sp)
 8001f40:	2823883a 	mov	r17,r5
 8001f44:	8001ff40 	call	8001ff4 <strlen>
 8001f48:	00c200b4 	movhi	r3,2050
 8001f4c:	18f59f04 	addi	r3,r3,-10628
 8001f50:	18c00017 	ldw	r3,0(r3)
 8001f54:	11000044 	addi	r4,r2,1
 8001f58:	d8800115 	stw	r2,4(sp)
 8001f5c:	18c00217 	ldw	r3,8(r3)
 8001f60:	014200b4 	movhi	r5,2050
 8001f64:	296e2104 	addi	r5,r5,-18300
 8001f68:	1880030b 	ldhu	r2,12(r3)
 8001f6c:	d9400215 	stw	r5,8(sp)
 8001f70:	d9000615 	stw	r4,24(sp)
 8001f74:	01400044 	movi	r5,1
 8001f78:	01000084 	movi	r4,2
 8001f7c:	d9000515 	stw	r4,20(sp)
 8001f80:	dc400015 	stw	r17,0(sp)
 8001f84:	d9400315 	stw	r5,12(sp)
 8001f88:	dec00415 	stw	sp,16(sp)
 8001f8c:	1108000c 	andi	r4,r2,8192
 8001f90:	2000061e 	bne	r4,zero,8001fac <_puts_r+0x84>
 8001f94:	19401917 	ldw	r5,100(r3)
 8001f98:	0137ffc4 	movi	r4,-8193
 8001f9c:	10880014 	ori	r2,r2,8192
 8001fa0:	2908703a 	and	r4,r5,r4
 8001fa4:	1880030d 	sth	r2,12(r3)
 8001fa8:	19001915 	stw	r4,100(r3)
 8001fac:	81400217 	ldw	r5,8(r16)
 8001fb0:	8009883a 	mov	r4,r16
 8001fb4:	d9800404 	addi	r6,sp,16
 8001fb8:	80065100 	call	8006510 <__sfvwrite_r>
 8001fbc:	1000061e 	bne	r2,zero,8001fd8 <_puts_r+0xb0>
 8001fc0:	00800284 	movi	r2,10
 8001fc4:	dfc00917 	ldw	ra,36(sp)
 8001fc8:	dc400817 	ldw	r17,32(sp)
 8001fcc:	dc000717 	ldw	r16,28(sp)
 8001fd0:	dec00a04 	addi	sp,sp,40
 8001fd4:	f800283a 	ret
 8001fd8:	00bfffc4 	movi	r2,-1
 8001fdc:	003ff906 	br	8001fc4 <__alt_data_end+0xfc001fc4>

08001fe0 <puts>:
 8001fe0:	008200b4 	movhi	r2,2050
 8001fe4:	10b59f04 	addi	r2,r2,-10628
 8001fe8:	200b883a 	mov	r5,r4
 8001fec:	11000017 	ldw	r4,0(r2)
 8001ff0:	8001f281 	jmpi	8001f28 <_puts_r>

08001ff4 <strlen>:
 8001ff4:	208000cc 	andi	r2,r4,3
 8001ff8:	10002026 	beq	r2,zero,800207c <strlen+0x88>
 8001ffc:	20800007 	ldb	r2,0(r4)
 8002000:	10002026 	beq	r2,zero,8002084 <strlen+0x90>
 8002004:	2005883a 	mov	r2,r4
 8002008:	00000206 	br	8002014 <strlen+0x20>
 800200c:	10c00007 	ldb	r3,0(r2)
 8002010:	18001826 	beq	r3,zero,8002074 <strlen+0x80>
 8002014:	10800044 	addi	r2,r2,1
 8002018:	10c000cc 	andi	r3,r2,3
 800201c:	183ffb1e 	bne	r3,zero,800200c <__alt_data_end+0xfc00200c>
 8002020:	10c00017 	ldw	r3,0(r2)
 8002024:	01ffbff4 	movhi	r7,65279
 8002028:	39ffbfc4 	addi	r7,r7,-257
 800202c:	00ca303a 	nor	r5,zero,r3
 8002030:	01a02074 	movhi	r6,32897
 8002034:	19c7883a 	add	r3,r3,r7
 8002038:	31a02004 	addi	r6,r6,-32640
 800203c:	1946703a 	and	r3,r3,r5
 8002040:	1986703a 	and	r3,r3,r6
 8002044:	1800091e 	bne	r3,zero,800206c <strlen+0x78>
 8002048:	10800104 	addi	r2,r2,4
 800204c:	10c00017 	ldw	r3,0(r2)
 8002050:	19cb883a 	add	r5,r3,r7
 8002054:	00c6303a 	nor	r3,zero,r3
 8002058:	28c6703a 	and	r3,r5,r3
 800205c:	1986703a 	and	r3,r3,r6
 8002060:	183ff926 	beq	r3,zero,8002048 <__alt_data_end+0xfc002048>
 8002064:	00000106 	br	800206c <strlen+0x78>
 8002068:	10800044 	addi	r2,r2,1
 800206c:	10c00007 	ldb	r3,0(r2)
 8002070:	183ffd1e 	bne	r3,zero,8002068 <__alt_data_end+0xfc002068>
 8002074:	1105c83a 	sub	r2,r2,r4
 8002078:	f800283a 	ret
 800207c:	2005883a 	mov	r2,r4
 8002080:	003fe706 	br	8002020 <__alt_data_end+0xfc002020>
 8002084:	0005883a 	mov	r2,zero
 8002088:	f800283a 	ret

0800208c <___vfprintf_internal_r>:
 800208c:	defeb604 	addi	sp,sp,-1320
 8002090:	dfc14915 	stw	ra,1316(sp)
 8002094:	ddc14715 	stw	r23,1308(sp)
 8002098:	dd814615 	stw	r22,1304(sp)
 800209c:	282f883a 	mov	r23,r5
 80020a0:	202d883a 	mov	r22,r4
 80020a4:	d9812a15 	stw	r6,1192(sp)
 80020a8:	d9c12d15 	stw	r7,1204(sp)
 80020ac:	df014815 	stw	fp,1312(sp)
 80020b0:	dd414515 	stw	r21,1300(sp)
 80020b4:	dd014415 	stw	r20,1296(sp)
 80020b8:	dcc14315 	stw	r19,1292(sp)
 80020bc:	dc814215 	stw	r18,1288(sp)
 80020c0:	dc414115 	stw	r17,1284(sp)
 80020c4:	dc014015 	stw	r16,1280(sp)
 80020c8:	8006bd00 	call	8006bd0 <_localeconv_r>
 80020cc:	10800017 	ldw	r2,0(r2)
 80020d0:	1009883a 	mov	r4,r2
 80020d4:	d8813515 	stw	r2,1236(sp)
 80020d8:	8001ff40 	call	8001ff4 <strlen>
 80020dc:	d8813815 	stw	r2,1248(sp)
 80020e0:	b0000226 	beq	r22,zero,80020ec <___vfprintf_internal_r+0x60>
 80020e4:	b0800e17 	ldw	r2,56(r22)
 80020e8:	10010426 	beq	r2,zero,80024fc <___vfprintf_internal_r+0x470>
 80020ec:	b8c0030b 	ldhu	r3,12(r23)
 80020f0:	1908000c 	andi	r4,r3,8192
 80020f4:	1805883a 	mov	r2,r3
 80020f8:	2000071e 	bne	r4,zero,8002118 <___vfprintf_internal_r+0x8c>
 80020fc:	b9001917 	ldw	r4,100(r23)
 8002100:	18880014 	ori	r2,r3,8192
 8002104:	00f7ffc4 	movi	r3,-8193
 8002108:	20c8703a 	and	r4,r4,r3
 800210c:	b880030d 	sth	r2,12(r23)
 8002110:	1007883a 	mov	r3,r2
 8002114:	b9001915 	stw	r4,100(r23)
 8002118:	1100020c 	andi	r4,r2,8
 800211c:	2000a726 	beq	r4,zero,80023bc <___vfprintf_internal_r+0x330>
 8002120:	b9000417 	ldw	r4,16(r23)
 8002124:	2000a526 	beq	r4,zero,80023bc <___vfprintf_internal_r+0x330>
 8002128:	1080068c 	andi	r2,r2,26
 800212c:	01000284 	movi	r4,10
 8002130:	1100ab26 	beq	r2,r4,80023e0 <___vfprintf_internal_r+0x354>
 8002134:	dac10e04 	addi	r11,sp,1080
 8002138:	db010dc4 	addi	r12,sp,1079
 800213c:	d8800404 	addi	r2,sp,16
 8002140:	050200b4 	movhi	r20,2050
 8002144:	dac12815 	stw	r11,1184(sp)
 8002148:	5b17c83a 	sub	r11,r11,r12
 800214c:	a52e3284 	addi	r20,r20,-18230
 8002150:	db012915 	stw	r12,1188(sp)
 8002154:	d8811e15 	stw	r2,1144(sp)
 8002158:	d8012015 	stw	zero,1152(sp)
 800215c:	d8011f15 	stw	zero,1148(sp)
 8002160:	d8013315 	stw	zero,1228(sp)
 8002164:	d8013715 	stw	zero,1244(sp)
 8002168:	d8013915 	stw	zero,1252(sp)
 800216c:	d8013b15 	stw	zero,1260(sp)
 8002170:	d8013a15 	stw	zero,1256(sp)
 8002174:	d8012f15 	stw	zero,1212(sp)
 8002178:	1011883a 	mov	r8,r2
 800217c:	dac13c15 	stw	r11,1264(sp)
 8002180:	db012a17 	ldw	r12,1192(sp)
 8002184:	60800007 	ldb	r2,0(r12)
 8002188:	1000df26 	beq	r2,zero,8002508 <___vfprintf_internal_r+0x47c>
 800218c:	00c00944 	movi	r3,37
 8002190:	10c0dd26 	beq	r2,r3,8002508 <___vfprintf_internal_r+0x47c>
 8002194:	6021883a 	mov	r16,r12
 8002198:	00000106 	br	80021a0 <___vfprintf_internal_r+0x114>
 800219c:	10c08426 	beq	r2,r3,80023b0 <___vfprintf_internal_r+0x324>
 80021a0:	84000044 	addi	r16,r16,1
 80021a4:	80800007 	ldb	r2,0(r16)
 80021a8:	103ffc1e 	bne	r2,zero,800219c <__alt_data_end+0xfc00219c>
 80021ac:	dac12a17 	ldw	r11,1192(sp)
 80021b0:	82e3c83a 	sub	r17,r16,r11
 80021b4:	88000f26 	beq	r17,zero,80021f4 <___vfprintf_internal_r+0x168>
 80021b8:	d8c12017 	ldw	r3,1152(sp)
 80021bc:	d8811f17 	ldw	r2,1148(sp)
 80021c0:	dac12a17 	ldw	r11,1192(sp)
 80021c4:	1c47883a 	add	r3,r3,r17
 80021c8:	10800044 	addi	r2,r2,1
 80021cc:	d8c12015 	stw	r3,1152(sp)
 80021d0:	42c00015 	stw	r11,0(r8)
 80021d4:	44400115 	stw	r17,4(r8)
 80021d8:	d8811f15 	stw	r2,1148(sp)
 80021dc:	00c001c4 	movi	r3,7
 80021e0:	1880b416 	blt	r3,r2,80024b4 <___vfprintf_internal_r+0x428>
 80021e4:	42000204 	addi	r8,r8,8
 80021e8:	db012f17 	ldw	r12,1212(sp)
 80021ec:	6459883a 	add	r12,r12,r17
 80021f0:	db012f15 	stw	r12,1212(sp)
 80021f4:	80800007 	ldb	r2,0(r16)
 80021f8:	1000b526 	beq	r2,zero,80024d0 <___vfprintf_internal_r+0x444>
 80021fc:	80800044 	addi	r2,r16,1
 8002200:	84000047 	ldb	r16,1(r16)
 8002204:	d8012785 	stb	zero,1182(sp)
 8002208:	000d883a 	mov	r6,zero
 800220c:	027fffc4 	movi	r9,-1
 8002210:	d8012e15 	stw	zero,1208(sp)
 8002214:	0023883a 	mov	r17,zero
 8002218:	01001604 	movi	r4,88
 800221c:	01400244 	movi	r5,9
 8002220:	02800a84 	movi	r10,42
 8002224:	01c01b04 	movi	r7,108
 8002228:	10c00044 	addi	r3,r2,1
 800222c:	80bff804 	addi	r2,r16,-32
 8002230:	2082f236 	bltu	r4,r2,8002dfc <___vfprintf_internal_r+0xd70>
 8002234:	100490ba 	slli	r2,r2,2
 8002238:	02c20034 	movhi	r11,2048
 800223c:	5ac89304 	addi	r11,r11,8780
 8002240:	12c5883a 	add	r2,r2,r11
 8002244:	10800017 	ldw	r2,0(r2)
 8002248:	1000683a 	jmp	r2
 800224c:	08002c44 	addi	zero,at,177
 8002250:	08002dfc 	xorhi	zero,at,183
 8002254:	08002dfc 	xorhi	zero,at,183
 8002258:	08002c64 	muli	zero,at,177
 800225c:	08002dfc 	xorhi	zero,at,183
 8002260:	08002dfc 	xorhi	zero,at,183
 8002264:	08002dfc 	xorhi	zero,at,183
 8002268:	08002dfc 	xorhi	zero,at,183
 800226c:	08002dfc 	xorhi	zero,at,183
 8002270:	08002dfc 	xorhi	zero,at,183
 8002274:	08002dc0 	call	8002dc <__alt_mem_sdram-0x77ffd24>
 8002278:	08002dec 	andhi	zero,at,183
 800227c:	08002dfc 	xorhi	zero,at,183
 8002280:	08002510 	cmplti	zero,at,148
 8002284:	08002520 	cmpeqi	zero,at,148
 8002288:	08002dfc 	xorhi	zero,at,183
 800228c:	08002560 	cmpeqi	zero,at,149
 8002290:	08002a54 	ori	zero,at,169
 8002294:	08002a54 	ori	zero,at,169
 8002298:	08002a54 	ori	zero,at,169
 800229c:	08002a54 	ori	zero,at,169
 80022a0:	08002a54 	ori	zero,at,169
 80022a4:	08002a54 	ori	zero,at,169
 80022a8:	08002a54 	ori	zero,at,169
 80022ac:	08002a54 	ori	zero,at,169
 80022b0:	08002a54 	ori	zero,at,169
 80022b4:	08002dfc 	xorhi	zero,at,183
 80022b8:	08002dfc 	xorhi	zero,at,183
 80022bc:	08002dfc 	xorhi	zero,at,183
 80022c0:	08002dfc 	xorhi	zero,at,183
 80022c4:	08002dfc 	xorhi	zero,at,183
 80022c8:	08002dfc 	xorhi	zero,at,183
 80022cc:	08002dfc 	xorhi	zero,at,183
 80022d0:	08002dfc 	xorhi	zero,at,183
 80022d4:	08002dfc 	xorhi	zero,at,183
 80022d8:	08002dfc 	xorhi	zero,at,183
 80022dc:	08002a88 	cmpgei	zero,at,170
 80022e0:	08002570 	cmpltui	zero,at,149
 80022e4:	08002dfc 	xorhi	zero,at,183
 80022e8:	08002570 	cmpltui	zero,at,149
 80022ec:	08002dfc 	xorhi	zero,at,183
 80022f0:	08002dfc 	xorhi	zero,at,183
 80022f4:	08002dfc 	xorhi	zero,at,183
 80022f8:	08002dfc 	xorhi	zero,at,183
 80022fc:	08002614 	ori	zero,at,152
 8002300:	08002dfc 	xorhi	zero,at,183
 8002304:	08002dfc 	xorhi	zero,at,183
 8002308:	08002624 	muli	zero,at,152
 800230c:	08002dfc 	xorhi	zero,at,183
 8002310:	08002dfc 	xorhi	zero,at,183
 8002314:	08002dfc 	xorhi	zero,at,183
 8002318:	08002dfc 	xorhi	zero,at,183
 800231c:	08002dfc 	xorhi	zero,at,183
 8002320:	08002a20 	cmpeqi	zero,at,168
 8002324:	08002dfc 	xorhi	zero,at,183
 8002328:	08002dfc 	xorhi	zero,at,183
 800232c:	08002ad0 	cmplti	zero,at,171
 8002330:	08002dfc 	xorhi	zero,at,183
 8002334:	08002dfc 	xorhi	zero,at,183
 8002338:	08002dfc 	xorhi	zero,at,183
 800233c:	08002dfc 	xorhi	zero,at,183
 8002340:	08002dfc 	xorhi	zero,at,183
 8002344:	08002dfc 	xorhi	zero,at,183
 8002348:	08002dfc 	xorhi	zero,at,183
 800234c:	08002dfc 	xorhi	zero,at,183
 8002350:	08002dfc 	xorhi	zero,at,183
 8002354:	08002dfc 	xorhi	zero,at,183
 8002358:	08002cc4 	addi	zero,at,179
 800235c:	08002c74 	orhi	zero,at,177
 8002360:	08002570 	cmpltui	zero,at,149
 8002364:	08002570 	cmpltui	zero,at,149
 8002368:	08002570 	cmpltui	zero,at,149
 800236c:	08002cb4 	orhi	zero,at,178
 8002370:	08002c74 	orhi	zero,at,177
 8002374:	08002dfc 	xorhi	zero,at,183
 8002378:	08002dfc 	xorhi	zero,at,183
 800237c:	08002bbc 	xorhi	zero,at,174
 8002380:	08002dfc 	xorhi	zero,at,183
 8002384:	08002bd0 	cmplti	zero,at,175
 8002388:	08002c04 	addi	zero,at,176
 800238c:	08002d04 	addi	zero,at,180
 8002390:	08002b2c 	andhi	zero,at,172
 8002394:	08002dfc 	xorhi	zero,at,183
 8002398:	08002d4c 	andi	zero,at,181
 800239c:	08002dfc 	xorhi	zero,at,183
 80023a0:	08002b3c 	xorhi	zero,at,172
 80023a4:	08002dfc 	xorhi	zero,at,183
 80023a8:	08002dfc 	xorhi	zero,at,183
 80023ac:	08002b7c 	xorhi	zero,at,173
 80023b0:	db012a17 	ldw	r12,1192(sp)
 80023b4:	8323c83a 	sub	r17,r16,r12
 80023b8:	003f7e06 	br	80021b4 <__alt_data_end+0xfc0021b4>
 80023bc:	b009883a 	mov	r4,r22
 80023c0:	b80b883a 	mov	r5,r23
 80023c4:	80040ac0 	call	80040ac <__swsetup_r>
 80023c8:	10002d1e 	bne	r2,zero,8002480 <___vfprintf_internal_r+0x3f4>
 80023cc:	b8c0030b 	ldhu	r3,12(r23)
 80023d0:	01000284 	movi	r4,10
 80023d4:	1805883a 	mov	r2,r3
 80023d8:	1080068c 	andi	r2,r2,26
 80023dc:	113f551e 	bne	r2,r4,8002134 <__alt_data_end+0xfc002134>
 80023e0:	b880038b 	ldhu	r2,14(r23)
 80023e4:	113fffcc 	andi	r4,r2,65535
 80023e8:	2120001c 	xori	r4,r4,32768
 80023ec:	21200004 	addi	r4,r4,-32768
 80023f0:	203f5016 	blt	r4,zero,8002134 <__alt_data_end+0xfc002134>
 80023f4:	bac01917 	ldw	r11,100(r23)
 80023f8:	ba800717 	ldw	r10,28(r23)
 80023fc:	ba400917 	ldw	r9,36(r23)
 8002400:	d9812a17 	ldw	r6,1192(sp)
 8002404:	d9c12d17 	ldw	r7,1204(sp)
 8002408:	02010004 	movi	r8,1024
 800240c:	18ffff4c 	andi	r3,r3,65533
 8002410:	d881078d 	sth	r2,1054(sp)
 8002414:	b009883a 	mov	r4,r22
 8002418:	d8800404 	addi	r2,sp,16
 800241c:	d9410404 	addi	r5,sp,1040
 8002420:	d8c1070d 	sth	r3,1052(sp)
 8002424:	dac11d15 	stw	r11,1140(sp)
 8002428:	da810b15 	stw	r10,1068(sp)
 800242c:	da410d15 	stw	r9,1076(sp)
 8002430:	d8810415 	stw	r2,1040(sp)
 8002434:	d8810815 	stw	r2,1056(sp)
 8002438:	da010615 	stw	r8,1048(sp)
 800243c:	da010915 	stw	r8,1060(sp)
 8002440:	d8010a15 	stw	zero,1064(sp)
 8002444:	800208c0 	call	800208c <___vfprintf_internal_r>
 8002448:	1021883a 	mov	r16,r2
 800244c:	10000416 	blt	r2,zero,8002460 <___vfprintf_internal_r+0x3d4>
 8002450:	b009883a 	mov	r4,r22
 8002454:	d9410404 	addi	r5,sp,1040
 8002458:	8005b040 	call	8005b04 <_fflush_r>
 800245c:	1006ee1e 	bne	r2,zero,8004018 <___vfprintf_internal_r+0x1f8c>
 8002460:	d881070b 	ldhu	r2,1052(sp)
 8002464:	1080100c 	andi	r2,r2,64
 8002468:	10000326 	beq	r2,zero,8002478 <___vfprintf_internal_r+0x3ec>
 800246c:	b880030b 	ldhu	r2,12(r23)
 8002470:	10801014 	ori	r2,r2,64
 8002474:	b880030d 	sth	r2,12(r23)
 8002478:	8005883a 	mov	r2,r16
 800247c:	00000106 	br	8002484 <___vfprintf_internal_r+0x3f8>
 8002480:	00bfffc4 	movi	r2,-1
 8002484:	dfc14917 	ldw	ra,1316(sp)
 8002488:	df014817 	ldw	fp,1312(sp)
 800248c:	ddc14717 	ldw	r23,1308(sp)
 8002490:	dd814617 	ldw	r22,1304(sp)
 8002494:	dd414517 	ldw	r21,1300(sp)
 8002498:	dd014417 	ldw	r20,1296(sp)
 800249c:	dcc14317 	ldw	r19,1292(sp)
 80024a0:	dc814217 	ldw	r18,1288(sp)
 80024a4:	dc414117 	ldw	r17,1284(sp)
 80024a8:	dc014017 	ldw	r16,1280(sp)
 80024ac:	dec14a04 	addi	sp,sp,1320
 80024b0:	f800283a 	ret
 80024b4:	b009883a 	mov	r4,r22
 80024b8:	b80b883a 	mov	r5,r23
 80024bc:	d9811e04 	addi	r6,sp,1144
 80024c0:	80092d40 	call	80092d4 <__sprint_r>
 80024c4:	1000081e 	bne	r2,zero,80024e8 <___vfprintf_internal_r+0x45c>
 80024c8:	da000404 	addi	r8,sp,16
 80024cc:	003f4606 	br	80021e8 <__alt_data_end+0xfc0021e8>
 80024d0:	d8812017 	ldw	r2,1152(sp)
 80024d4:	10000426 	beq	r2,zero,80024e8 <___vfprintf_internal_r+0x45c>
 80024d8:	b009883a 	mov	r4,r22
 80024dc:	b80b883a 	mov	r5,r23
 80024e0:	d9811e04 	addi	r6,sp,1144
 80024e4:	80092d40 	call	80092d4 <__sprint_r>
 80024e8:	b880030b 	ldhu	r2,12(r23)
 80024ec:	1080100c 	andi	r2,r2,64
 80024f0:	103fe31e 	bne	r2,zero,8002480 <__alt_data_end+0xfc002480>
 80024f4:	d8812f17 	ldw	r2,1212(sp)
 80024f8:	003fe206 	br	8002484 <__alt_data_end+0xfc002484>
 80024fc:	b009883a 	mov	r4,r22
 8002500:	80060ac0 	call	80060ac <__sinit>
 8002504:	003ef906 	br	80020ec <__alt_data_end+0xfc0020ec>
 8002508:	dc012a17 	ldw	r16,1192(sp)
 800250c:	003f3906 	br	80021f4 <__alt_data_end+0xfc0021f4>
 8002510:	1805883a 	mov	r2,r3
 8002514:	8c400114 	ori	r17,r17,4
 8002518:	1c000007 	ldb	r16,0(r3)
 800251c:	003f4206 	br	8002228 <__alt_data_end+0xfc002228>
 8002520:	1c000007 	ldb	r16,0(r3)
 8002524:	18800044 	addi	r2,r3,1
 8002528:	8286b326 	beq	r16,r10,8003ff8 <___vfprintf_internal_r+0x1f6c>
 800252c:	82fff404 	addi	r11,r16,-48
 8002530:	1007883a 	mov	r3,r2
 8002534:	0013883a 	mov	r9,zero
 8002538:	2aff3c36 	bltu	r5,r11,800222c <__alt_data_end+0xfc00222c>
 800253c:	1c000007 	ldb	r16,0(r3)
 8002540:	4a4002a4 	muli	r9,r9,10
 8002544:	18c00044 	addi	r3,r3,1
 8002548:	5a53883a 	add	r9,r11,r9
 800254c:	82fff404 	addi	r11,r16,-48
 8002550:	2afffa2e 	bgeu	r5,r11,800253c <__alt_data_end+0xfc00253c>
 8002554:	483f350e 	bge	r9,zero,800222c <__alt_data_end+0xfc00222c>
 8002558:	027fffc4 	movi	r9,-1
 800255c:	003f3306 	br	800222c <__alt_data_end+0xfc00222c>
 8002560:	8c402014 	ori	r17,r17,128
 8002564:	1805883a 	mov	r2,r3
 8002568:	1c000007 	ldb	r16,0(r3)
 800256c:	003f2e06 	br	8002228 <__alt_data_end+0xfc002228>
 8002570:	db012d17 	ldw	r12,1204(sp)
 8002574:	dac12d17 	ldw	r11,1204(sp)
 8002578:	d8c12a15 	stw	r3,1192(sp)
 800257c:	63000017 	ldw	r12,0(r12)
 8002580:	5ac00117 	ldw	r11,4(r11)
 8002584:	d9812785 	stb	r6,1182(sp)
 8002588:	6009883a 	mov	r4,r12
 800258c:	580b883a 	mov	r5,r11
 8002590:	db013715 	stw	r12,1244(sp)
 8002594:	da013f15 	stw	r8,1276(sp)
 8002598:	da413e15 	stw	r9,1272(sp)
 800259c:	dac13915 	stw	r11,1252(sp)
 80025a0:	8008f300 	call	8008f30 <__fpclassifyd>
 80025a4:	db012d17 	ldw	r12,1204(sp)
 80025a8:	04800044 	movi	r18,1
 80025ac:	da013f17 	ldw	r8,1276(sp)
 80025b0:	64c00204 	addi	r19,r12,8
 80025b4:	da413e17 	ldw	r9,1272(sp)
 80025b8:	d9013717 	ldw	r4,1244(sp)
 80025bc:	d9413917 	ldw	r5,1252(sp)
 80025c0:	1484581e 	bne	r2,r18,8003724 <___vfprintf_internal_r+0x1698>
 80025c4:	000d883a 	mov	r6,zero
 80025c8:	000f883a 	mov	r7,zero
 80025cc:	800ceec0 	call	800ceec <__ledf2>
 80025d0:	da013f17 	ldw	r8,1276(sp)
 80025d4:	1005ef16 	blt	r2,zero,8003d94 <___vfprintf_internal_r+0x1d08>
 80025d8:	dd412783 	ldbu	r21,1182(sp)
 80025dc:	008011c4 	movi	r2,71
 80025e0:	14053b0e 	bge	r2,r16,8003ad0 <___vfprintf_internal_r+0x1a44>
 80025e4:	00c200b4 	movhi	r3,2050
 80025e8:	18ee2304 	addi	r3,r3,-18292
 80025ec:	d8c13115 	stw	r3,1220(sp)
 80025f0:	02c000c4 	movi	r11,3
 80025f4:	00bfdfc4 	movi	r2,-129
 80025f8:	dac12b15 	stw	r11,1196(sp)
 80025fc:	88a2703a 	and	r17,r17,r2
 8002600:	dcc12d15 	stw	r19,1204(sp)
 8002604:	5825883a 	mov	r18,r11
 8002608:	d8013215 	stw	zero,1224(sp)
 800260c:	d8013415 	stw	zero,1232(sp)
 8002610:	00003206 	br	80026dc <___vfprintf_internal_r+0x650>
 8002614:	8c400214 	ori	r17,r17,8
 8002618:	1805883a 	mov	r2,r3
 800261c:	1c000007 	ldb	r16,0(r3)
 8002620:	003f0106 	br	8002228 <__alt_data_end+0xfc002228>
 8002624:	8c400414 	ori	r17,r17,16
 8002628:	d8c12a15 	stw	r3,1192(sp)
 800262c:	88c0080c 	andi	r3,r17,32
 8002630:	d8812d17 	ldw	r2,1204(sp)
 8002634:	18017726 	beq	r3,zero,8002c14 <___vfprintf_internal_r+0xb88>
 8002638:	db012d17 	ldw	r12,1204(sp)
 800263c:	14c00017 	ldw	r19,0(r2)
 8002640:	17000117 	ldw	fp,4(r2)
 8002644:	63000204 	addi	r12,r12,8
 8002648:	db012d15 	stw	r12,1204(sp)
 800264c:	0005883a 	mov	r2,zero
 8002650:	9f06b03a 	or	r3,r19,fp
 8002654:	d8012785 	stb	zero,1182(sp)
 8002658:	da413215 	stw	r9,1224(sp)
 800265c:	002b883a 	mov	r21,zero
 8002660:	48000216 	blt	r9,zero,800266c <___vfprintf_internal_r+0x5e0>
 8002664:	013fdfc4 	movi	r4,-129
 8002668:	8922703a 	and	r17,r17,r4
 800266c:	1801ed1e 	bne	r3,zero,8002e24 <___vfprintf_internal_r+0xd98>
 8002670:	4802e026 	beq	r9,zero,80031f4 <___vfprintf_internal_r+0x1168>
 8002674:	10803fcc 	andi	r2,r2,255
 8002678:	00c00044 	movi	r3,1
 800267c:	10c20f26 	beq	r2,r3,8002ebc <___vfprintf_internal_r+0xe30>
 8002680:	00c00084 	movi	r3,2
 8002684:	10c2fd26 	beq	r2,r3,800327c <___vfprintf_internal_r+0x11f0>
 8002688:	d8c10e04 	addi	r3,sp,1080
 800268c:	9808d0fa 	srli	r4,r19,3
 8002690:	e00a977a 	slli	r5,fp,29
 8002694:	e038d0fa 	srli	fp,fp,3
 8002698:	9cc001cc 	andi	r19,r19,7
 800269c:	98800c04 	addi	r2,r19,48
 80026a0:	18ffffc4 	addi	r3,r3,-1
 80026a4:	2926b03a 	or	r19,r5,r4
 80026a8:	18800005 	stb	r2,0(r3)
 80026ac:	9f08b03a 	or	r4,r19,fp
 80026b0:	203ff61e 	bne	r4,zero,800268c <__alt_data_end+0xfc00268c>
 80026b4:	8900004c 	andi	r4,r17,1
 80026b8:	d8c13115 	stw	r3,1220(sp)
 80026bc:	2003791e 	bne	r4,zero,80034a4 <___vfprintf_internal_r+0x1418>
 80026c0:	dac12817 	ldw	r11,1184(sp)
 80026c4:	58e5c83a 	sub	r18,r11,r3
 80026c8:	9005883a 	mov	r2,r18
 80026cc:	9240010e 	bge	r18,r9,80026d4 <___vfprintf_internal_r+0x648>
 80026d0:	4805883a 	mov	r2,r9
 80026d4:	d8812b15 	stw	r2,1196(sp)
 80026d8:	d8013415 	stw	zero,1232(sp)
 80026dc:	a8803fcc 	andi	r2,r21,255
 80026e0:	1080201c 	xori	r2,r2,128
 80026e4:	10bfe004 	addi	r2,r2,-128
 80026e8:	10000326 	beq	r2,zero,80026f8 <___vfprintf_internal_r+0x66c>
 80026ec:	db012b17 	ldw	r12,1196(sp)
 80026f0:	63000044 	addi	r12,r12,1
 80026f4:	db012b15 	stw	r12,1196(sp)
 80026f8:	88c0008c 	andi	r3,r17,2
 80026fc:	d8c12c15 	stw	r3,1200(sp)
 8002700:	18000326 	beq	r3,zero,8002710 <___vfprintf_internal_r+0x684>
 8002704:	dac12b17 	ldw	r11,1196(sp)
 8002708:	5ac00084 	addi	r11,r11,2
 800270c:	dac12b15 	stw	r11,1196(sp)
 8002710:	8b00210c 	andi	r12,r17,132
 8002714:	db013015 	stw	r12,1216(sp)
 8002718:	6001c01e 	bne	r12,zero,8002e1c <___vfprintf_internal_r+0xd90>
 800271c:	dac12e17 	ldw	r11,1208(sp)
 8002720:	db012b17 	ldw	r12,1196(sp)
 8002724:	5b39c83a 	sub	fp,r11,r12
 8002728:	0701bc0e 	bge	zero,fp,8002e1c <___vfprintf_internal_r+0xd90>
 800272c:	02400404 	movi	r9,16
 8002730:	d8c12017 	ldw	r3,1152(sp)
 8002734:	d8811f17 	ldw	r2,1148(sp)
 8002738:	4f05220e 	bge	r9,fp,8003bc4 <___vfprintf_internal_r+0x1b38>
 800273c:	014200b4 	movhi	r5,2050
 8002740:	296e3684 	addi	r5,r5,-18214
 8002744:	d9413615 	stw	r5,1240(sp)
 8002748:	482b883a 	mov	r21,r9
 800274c:	04c001c4 	movi	r19,7
 8002750:	00000306 	br	8002760 <___vfprintf_internal_r+0x6d4>
 8002754:	e73ffc04 	addi	fp,fp,-16
 8002758:	42000204 	addi	r8,r8,8
 800275c:	af00130e 	bge	r21,fp,80027ac <___vfprintf_internal_r+0x720>
 8002760:	02c200b4 	movhi	r11,2050
 8002764:	18c00404 	addi	r3,r3,16
 8002768:	10800044 	addi	r2,r2,1
 800276c:	5aee3684 	addi	r11,r11,-18214
 8002770:	42c00015 	stw	r11,0(r8)
 8002774:	45400115 	stw	r21,4(r8)
 8002778:	d8c12015 	stw	r3,1152(sp)
 800277c:	d8811f15 	stw	r2,1148(sp)
 8002780:	98bff40e 	bge	r19,r2,8002754 <__alt_data_end+0xfc002754>
 8002784:	b009883a 	mov	r4,r22
 8002788:	b80b883a 	mov	r5,r23
 800278c:	d9811e04 	addi	r6,sp,1144
 8002790:	80092d40 	call	80092d4 <__sprint_r>
 8002794:	103f541e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8002798:	e73ffc04 	addi	fp,fp,-16
 800279c:	d8c12017 	ldw	r3,1152(sp)
 80027a0:	d8811f17 	ldw	r2,1148(sp)
 80027a4:	da000404 	addi	r8,sp,16
 80027a8:	af3fed16 	blt	r21,fp,8002760 <__alt_data_end+0xfc002760>
 80027ac:	db013617 	ldw	r12,1240(sp)
 80027b0:	e0c7883a 	add	r3,fp,r3
 80027b4:	10800044 	addi	r2,r2,1
 80027b8:	43000015 	stw	r12,0(r8)
 80027bc:	47000115 	stw	fp,4(r8)
 80027c0:	d8c12015 	stw	r3,1152(sp)
 80027c4:	d8811f15 	stw	r2,1148(sp)
 80027c8:	010001c4 	movi	r4,7
 80027cc:	2082f416 	blt	r4,r2,80033a0 <___vfprintf_internal_r+0x1314>
 80027d0:	d8812787 	ldb	r2,1182(sp)
 80027d4:	42000204 	addi	r8,r8,8
 80027d8:	10000c26 	beq	r2,zero,800280c <___vfprintf_internal_r+0x780>
 80027dc:	d8811f17 	ldw	r2,1148(sp)
 80027e0:	d9012784 	addi	r4,sp,1182
 80027e4:	18c00044 	addi	r3,r3,1
 80027e8:	10800044 	addi	r2,r2,1
 80027ec:	41000015 	stw	r4,0(r8)
 80027f0:	01000044 	movi	r4,1
 80027f4:	41000115 	stw	r4,4(r8)
 80027f8:	d8c12015 	stw	r3,1152(sp)
 80027fc:	d8811f15 	stw	r2,1148(sp)
 8002800:	010001c4 	movi	r4,7
 8002804:	20828d16 	blt	r4,r2,800323c <___vfprintf_internal_r+0x11b0>
 8002808:	42000204 	addi	r8,r8,8
 800280c:	dac12c17 	ldw	r11,1200(sp)
 8002810:	58000c26 	beq	r11,zero,8002844 <___vfprintf_internal_r+0x7b8>
 8002814:	d8811f17 	ldw	r2,1148(sp)
 8002818:	d9012704 	addi	r4,sp,1180
 800281c:	18c00084 	addi	r3,r3,2
 8002820:	10800044 	addi	r2,r2,1
 8002824:	41000015 	stw	r4,0(r8)
 8002828:	01000084 	movi	r4,2
 800282c:	41000115 	stw	r4,4(r8)
 8002830:	d8c12015 	stw	r3,1152(sp)
 8002834:	d8811f15 	stw	r2,1148(sp)
 8002838:	010001c4 	movi	r4,7
 800283c:	20828716 	blt	r4,r2,800325c <___vfprintf_internal_r+0x11d0>
 8002840:	42000204 	addi	r8,r8,8
 8002844:	db013017 	ldw	r12,1216(sp)
 8002848:	00802004 	movi	r2,128
 800284c:	6081e926 	beq	r12,r2,8002ff4 <___vfprintf_internal_r+0xf68>
 8002850:	db013217 	ldw	r12,1224(sp)
 8002854:	64abc83a 	sub	r21,r12,r18
 8002858:	0540260e 	bge	zero,r21,80028f4 <___vfprintf_internal_r+0x868>
 800285c:	07000404 	movi	fp,16
 8002860:	d8811f17 	ldw	r2,1148(sp)
 8002864:	e5443d0e 	bge	fp,r21,800395c <___vfprintf_internal_r+0x18d0>
 8002868:	014200b4 	movhi	r5,2050
 800286c:	296e3284 	addi	r5,r5,-18230
 8002870:	d9412c15 	stw	r5,1200(sp)
 8002874:	04c001c4 	movi	r19,7
 8002878:	00000306 	br	8002888 <___vfprintf_internal_r+0x7fc>
 800287c:	ad7ffc04 	addi	r21,r21,-16
 8002880:	42000204 	addi	r8,r8,8
 8002884:	e540110e 	bge	fp,r21,80028cc <___vfprintf_internal_r+0x840>
 8002888:	18c00404 	addi	r3,r3,16
 800288c:	10800044 	addi	r2,r2,1
 8002890:	45000015 	stw	r20,0(r8)
 8002894:	47000115 	stw	fp,4(r8)
 8002898:	d8c12015 	stw	r3,1152(sp)
 800289c:	d8811f15 	stw	r2,1148(sp)
 80028a0:	98bff60e 	bge	r19,r2,800287c <__alt_data_end+0xfc00287c>
 80028a4:	b009883a 	mov	r4,r22
 80028a8:	b80b883a 	mov	r5,r23
 80028ac:	d9811e04 	addi	r6,sp,1144
 80028b0:	80092d40 	call	80092d4 <__sprint_r>
 80028b4:	103f0c1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80028b8:	ad7ffc04 	addi	r21,r21,-16
 80028bc:	d8c12017 	ldw	r3,1152(sp)
 80028c0:	d8811f17 	ldw	r2,1148(sp)
 80028c4:	da000404 	addi	r8,sp,16
 80028c8:	e57fef16 	blt	fp,r21,8002888 <__alt_data_end+0xfc002888>
 80028cc:	dac12c17 	ldw	r11,1200(sp)
 80028d0:	1d47883a 	add	r3,r3,r21
 80028d4:	10800044 	addi	r2,r2,1
 80028d8:	42c00015 	stw	r11,0(r8)
 80028dc:	45400115 	stw	r21,4(r8)
 80028e0:	d8c12015 	stw	r3,1152(sp)
 80028e4:	d8811f15 	stw	r2,1148(sp)
 80028e8:	010001c4 	movi	r4,7
 80028ec:	20824b16 	blt	r4,r2,800321c <___vfprintf_internal_r+0x1190>
 80028f0:	42000204 	addi	r8,r8,8
 80028f4:	8880400c 	andi	r2,r17,256
 80028f8:	1001761e 	bne	r2,zero,8002ed4 <___vfprintf_internal_r+0xe48>
 80028fc:	d8811f17 	ldw	r2,1148(sp)
 8002900:	db013117 	ldw	r12,1220(sp)
 8002904:	1c87883a 	add	r3,r3,r18
 8002908:	10800044 	addi	r2,r2,1
 800290c:	43000015 	stw	r12,0(r8)
 8002910:	44800115 	stw	r18,4(r8)
 8002914:	d8c12015 	stw	r3,1152(sp)
 8002918:	d8811f15 	stw	r2,1148(sp)
 800291c:	010001c4 	movi	r4,7
 8002920:	20822616 	blt	r4,r2,80031bc <___vfprintf_internal_r+0x1130>
 8002924:	42000204 	addi	r8,r8,8
 8002928:	8c40010c 	andi	r17,r17,4
 800292c:	88003126 	beq	r17,zero,80029f4 <___vfprintf_internal_r+0x968>
 8002930:	db012e17 	ldw	r12,1208(sp)
 8002934:	dac12b17 	ldw	r11,1196(sp)
 8002938:	62e1c83a 	sub	r16,r12,r11
 800293c:	04002d0e 	bge	zero,r16,80029f4 <___vfprintf_internal_r+0x968>
 8002940:	04400404 	movi	r17,16
 8002944:	d8811f17 	ldw	r2,1148(sp)
 8002948:	8c04df0e 	bge	r17,r16,8003cc8 <___vfprintf_internal_r+0x1c3c>
 800294c:	010200b4 	movhi	r4,2050
 8002950:	212e3684 	addi	r4,r4,-18214
 8002954:	d9013615 	stw	r4,1240(sp)
 8002958:	048001c4 	movi	r18,7
 800295c:	00000306 	br	800296c <___vfprintf_internal_r+0x8e0>
 8002960:	843ffc04 	addi	r16,r16,-16
 8002964:	42000204 	addi	r8,r8,8
 8002968:	8c00130e 	bge	r17,r16,80029b8 <___vfprintf_internal_r+0x92c>
 800296c:	014200b4 	movhi	r5,2050
 8002970:	18c00404 	addi	r3,r3,16
 8002974:	10800044 	addi	r2,r2,1
 8002978:	296e3684 	addi	r5,r5,-18214
 800297c:	41400015 	stw	r5,0(r8)
 8002980:	44400115 	stw	r17,4(r8)
 8002984:	d8c12015 	stw	r3,1152(sp)
 8002988:	d8811f15 	stw	r2,1148(sp)
 800298c:	90bff40e 	bge	r18,r2,8002960 <__alt_data_end+0xfc002960>
 8002990:	b009883a 	mov	r4,r22
 8002994:	b80b883a 	mov	r5,r23
 8002998:	d9811e04 	addi	r6,sp,1144
 800299c:	80092d40 	call	80092d4 <__sprint_r>
 80029a0:	103ed11e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80029a4:	843ffc04 	addi	r16,r16,-16
 80029a8:	d8c12017 	ldw	r3,1152(sp)
 80029ac:	d8811f17 	ldw	r2,1148(sp)
 80029b0:	da000404 	addi	r8,sp,16
 80029b4:	8c3fed16 	blt	r17,r16,800296c <__alt_data_end+0xfc00296c>
 80029b8:	dac13617 	ldw	r11,1240(sp)
 80029bc:	1c07883a 	add	r3,r3,r16
 80029c0:	10800044 	addi	r2,r2,1
 80029c4:	42c00015 	stw	r11,0(r8)
 80029c8:	44000115 	stw	r16,4(r8)
 80029cc:	d8c12015 	stw	r3,1152(sp)
 80029d0:	d8811f15 	stw	r2,1148(sp)
 80029d4:	010001c4 	movi	r4,7
 80029d8:	2080060e 	bge	r4,r2,80029f4 <___vfprintf_internal_r+0x968>
 80029dc:	b009883a 	mov	r4,r22
 80029e0:	b80b883a 	mov	r5,r23
 80029e4:	d9811e04 	addi	r6,sp,1144
 80029e8:	80092d40 	call	80092d4 <__sprint_r>
 80029ec:	103ebe1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80029f0:	d8c12017 	ldw	r3,1152(sp)
 80029f4:	d8812b17 	ldw	r2,1196(sp)
 80029f8:	db012e17 	ldw	r12,1208(sp)
 80029fc:	1300010e 	bge	r2,r12,8002a04 <___vfprintf_internal_r+0x978>
 8002a00:	6005883a 	mov	r2,r12
 8002a04:	dac12f17 	ldw	r11,1212(sp)
 8002a08:	5897883a 	add	r11,r11,r2
 8002a0c:	dac12f15 	stw	r11,1212(sp)
 8002a10:	1801f21e 	bne	r3,zero,80031dc <___vfprintf_internal_r+0x1150>
 8002a14:	d8011f15 	stw	zero,1148(sp)
 8002a18:	da000404 	addi	r8,sp,16
 8002a1c:	003dd806 	br	8002180 <__alt_data_end+0xfc002180>
 8002a20:	8c400414 	ori	r17,r17,16
 8002a24:	d8c12a15 	stw	r3,1192(sp)
 8002a28:	88c0080c 	andi	r3,r17,32
 8002a2c:	d8812d17 	ldw	r2,1204(sp)
 8002a30:	18004626 	beq	r3,zero,8002b4c <___vfprintf_internal_r+0xac0>
 8002a34:	dac12d17 	ldw	r11,1204(sp)
 8002a38:	14c00017 	ldw	r19,0(r2)
 8002a3c:	17000117 	ldw	fp,4(r2)
 8002a40:	5ac00204 	addi	r11,r11,8
 8002a44:	dac12d15 	stw	r11,1204(sp)
 8002a48:	00800044 	movi	r2,1
 8002a4c:	9f06b03a 	or	r3,r19,fp
 8002a50:	003f0006 	br	8002654 <__alt_data_end+0xfc002654>
 8002a54:	1805883a 	mov	r2,r3
 8002a58:	d8012e15 	stw	zero,1208(sp)
 8002a5c:	82fff404 	addi	r11,r16,-48
 8002a60:	0019883a 	mov	r12,zero
 8002a64:	14000007 	ldb	r16,0(r2)
 8002a68:	630002a4 	muli	r12,r12,10
 8002a6c:	18c00044 	addi	r3,r3,1
 8002a70:	1805883a 	mov	r2,r3
 8002a74:	62d9883a 	add	r12,r12,r11
 8002a78:	82fff404 	addi	r11,r16,-48
 8002a7c:	2afff92e 	bgeu	r5,r11,8002a64 <__alt_data_end+0xfc002a64>
 8002a80:	db012e15 	stw	r12,1208(sp)
 8002a84:	003de906 	br	800222c <__alt_data_end+0xfc00222c>
 8002a88:	8c400414 	ori	r17,r17,16
 8002a8c:	d8c12a15 	stw	r3,1192(sp)
 8002a90:	d9812785 	stb	r6,1182(sp)
 8002a94:	8880080c 	andi	r2,r17,32
 8002a98:	d8c12d17 	ldw	r3,1204(sp)
 8002a9c:	10007a26 	beq	r2,zero,8002c88 <___vfprintf_internal_r+0xbfc>
 8002aa0:	db012d17 	ldw	r12,1204(sp)
 8002aa4:	18800117 	ldw	r2,4(r3)
 8002aa8:	1cc00017 	ldw	r19,0(r3)
 8002aac:	63000204 	addi	r12,r12,8
 8002ab0:	db012d15 	stw	r12,1204(sp)
 8002ab4:	1039883a 	mov	fp,r2
 8002ab8:	10031016 	blt	r2,zero,80036fc <___vfprintf_internal_r+0x1670>
 8002abc:	dd412783 	ldbu	r21,1182(sp)
 8002ac0:	da413215 	stw	r9,1224(sp)
 8002ac4:	00800044 	movi	r2,1
 8002ac8:	9f06b03a 	or	r3,r19,fp
 8002acc:	003ee406 	br	8002660 <__alt_data_end+0xfc002660>
 8002ad0:	030200b4 	movhi	r12,2050
 8002ad4:	632e2604 	addi	r12,r12,-18280
 8002ad8:	d8c12a15 	stw	r3,1192(sp)
 8002adc:	d9812785 	stb	r6,1182(sp)
 8002ae0:	db013b15 	stw	r12,1260(sp)
 8002ae4:	88c0080c 	andi	r3,r17,32
 8002ae8:	d8812d17 	ldw	r2,1204(sp)
 8002aec:	18002b26 	beq	r3,zero,8002b9c <___vfprintf_internal_r+0xb10>
 8002af0:	dac12d17 	ldw	r11,1204(sp)
 8002af4:	14c00017 	ldw	r19,0(r2)
 8002af8:	17000117 	ldw	fp,4(r2)
 8002afc:	5ac00204 	addi	r11,r11,8
 8002b00:	dac12d15 	stw	r11,1204(sp)
 8002b04:	8880004c 	andi	r2,r17,1
 8002b08:	10025b26 	beq	r2,zero,8003478 <___vfprintf_internal_r+0x13ec>
 8002b0c:	9f06b03a 	or	r3,r19,fp
 8002b10:	18037026 	beq	r3,zero,80038d4 <___vfprintf_internal_r+0x1848>
 8002b14:	00800c04 	movi	r2,48
 8002b18:	d8812705 	stb	r2,1180(sp)
 8002b1c:	dc012745 	stb	r16,1181(sp)
 8002b20:	8c400094 	ori	r17,r17,2
 8002b24:	00800084 	movi	r2,2
 8002b28:	003eca06 	br	8002654 <__alt_data_end+0xfc002654>
 8002b2c:	8c400814 	ori	r17,r17,32
 8002b30:	1805883a 	mov	r2,r3
 8002b34:	1c000007 	ldb	r16,0(r3)
 8002b38:	003dbb06 	br	8002228 <__alt_data_end+0xfc002228>
 8002b3c:	d8c12a15 	stw	r3,1192(sp)
 8002b40:	88c0080c 	andi	r3,r17,32
 8002b44:	d8812d17 	ldw	r2,1204(sp)
 8002b48:	183fba1e 	bne	r3,zero,8002a34 <__alt_data_end+0xfc002a34>
 8002b4c:	88c0040c 	andi	r3,r17,16
 8002b50:	18024c1e 	bne	r3,zero,8003484 <___vfprintf_internal_r+0x13f8>
 8002b54:	88c0100c 	andi	r3,r17,64
 8002b58:	18024a26 	beq	r3,zero,8003484 <___vfprintf_internal_r+0x13f8>
 8002b5c:	dac12d17 	ldw	r11,1204(sp)
 8002b60:	14c0000b 	ldhu	r19,0(r2)
 8002b64:	0039883a 	mov	fp,zero
 8002b68:	5ac00104 	addi	r11,r11,4
 8002b6c:	dac12d15 	stw	r11,1204(sp)
 8002b70:	00800044 	movi	r2,1
 8002b74:	9807883a 	mov	r3,r19
 8002b78:	003eb606 	br	8002654 <__alt_data_end+0xfc002654>
 8002b7c:	008200b4 	movhi	r2,2050
 8002b80:	10ae2b04 	addi	r2,r2,-18260
 8002b84:	d8c12a15 	stw	r3,1192(sp)
 8002b88:	d8813b15 	stw	r2,1260(sp)
 8002b8c:	d9812785 	stb	r6,1182(sp)
 8002b90:	88c0080c 	andi	r3,r17,32
 8002b94:	d8812d17 	ldw	r2,1204(sp)
 8002b98:	183fd51e 	bne	r3,zero,8002af0 <__alt_data_end+0xfc002af0>
 8002b9c:	88c0040c 	andi	r3,r17,16
 8002ba0:	18034126 	beq	r3,zero,80038a8 <___vfprintf_internal_r+0x181c>
 8002ba4:	db012d17 	ldw	r12,1204(sp)
 8002ba8:	14c00017 	ldw	r19,0(r2)
 8002bac:	0039883a 	mov	fp,zero
 8002bb0:	63000104 	addi	r12,r12,4
 8002bb4:	db012d15 	stw	r12,1204(sp)
 8002bb8:	003fd206 	br	8002b04 <__alt_data_end+0xfc002b04>
 8002bbc:	1c000007 	ldb	r16,0(r3)
 8002bc0:	81c3d626 	beq	r16,r7,8003b1c <___vfprintf_internal_r+0x1a90>
 8002bc4:	8c400414 	ori	r17,r17,16
 8002bc8:	1805883a 	mov	r2,r3
 8002bcc:	003d9606 	br	8002228 <__alt_data_end+0xfc002228>
 8002bd0:	d8c12a15 	stw	r3,1192(sp)
 8002bd4:	d9812785 	stb	r6,1182(sp)
 8002bd8:	8880080c 	andi	r2,r17,32
 8002bdc:	10033f26 	beq	r2,zero,80038dc <___vfprintf_internal_r+0x1850>
 8002be0:	db012d17 	ldw	r12,1204(sp)
 8002be4:	dac12f17 	ldw	r11,1212(sp)
 8002be8:	60800017 	ldw	r2,0(r12)
 8002bec:	5807d7fa 	srai	r3,r11,31
 8002bf0:	63000104 	addi	r12,r12,4
 8002bf4:	db012d15 	stw	r12,1204(sp)
 8002bf8:	12c00015 	stw	r11,0(r2)
 8002bfc:	10c00115 	stw	r3,4(r2)
 8002c00:	003d5f06 	br	8002180 <__alt_data_end+0xfc002180>
 8002c04:	d8c12a15 	stw	r3,1192(sp)
 8002c08:	88c0080c 	andi	r3,r17,32
 8002c0c:	d8812d17 	ldw	r2,1204(sp)
 8002c10:	183e891e 	bne	r3,zero,8002638 <__alt_data_end+0xfc002638>
 8002c14:	88c0040c 	andi	r3,r17,16
 8002c18:	1801ea1e 	bne	r3,zero,80033c4 <___vfprintf_internal_r+0x1338>
 8002c1c:	88c0100c 	andi	r3,r17,64
 8002c20:	1801e826 	beq	r3,zero,80033c4 <___vfprintf_internal_r+0x1338>
 8002c24:	db012d17 	ldw	r12,1204(sp)
 8002c28:	14c0000b 	ldhu	r19,0(r2)
 8002c2c:	0039883a 	mov	fp,zero
 8002c30:	63000104 	addi	r12,r12,4
 8002c34:	db012d15 	stw	r12,1204(sp)
 8002c38:	0005883a 	mov	r2,zero
 8002c3c:	9807883a 	mov	r3,r19
 8002c40:	003e8406 	br	8002654 <__alt_data_end+0xfc002654>
 8002c44:	30803fcc 	andi	r2,r6,255
 8002c48:	1080201c 	xori	r2,r2,128
 8002c4c:	10bfe004 	addi	r2,r2,-128
 8002c50:	10031d1e 	bne	r2,zero,80038c8 <___vfprintf_internal_r+0x183c>
 8002c54:	1805883a 	mov	r2,r3
 8002c58:	01800804 	movi	r6,32
 8002c5c:	1c000007 	ldb	r16,0(r3)
 8002c60:	003d7106 	br	8002228 <__alt_data_end+0xfc002228>
 8002c64:	8c400054 	ori	r17,r17,1
 8002c68:	1805883a 	mov	r2,r3
 8002c6c:	1c000007 	ldb	r16,0(r3)
 8002c70:	003d6d06 	br	8002228 <__alt_data_end+0xfc002228>
 8002c74:	d8c12a15 	stw	r3,1192(sp)
 8002c78:	d9812785 	stb	r6,1182(sp)
 8002c7c:	8880080c 	andi	r2,r17,32
 8002c80:	d8c12d17 	ldw	r3,1204(sp)
 8002c84:	103f861e 	bne	r2,zero,8002aa0 <__alt_data_end+0xfc002aa0>
 8002c88:	8880040c 	andi	r2,r17,16
 8002c8c:	1001f31e 	bne	r2,zero,800345c <___vfprintf_internal_r+0x13d0>
 8002c90:	8880100c 	andi	r2,r17,64
 8002c94:	1001f126 	beq	r2,zero,800345c <___vfprintf_internal_r+0x13d0>
 8002c98:	1cc0000f 	ldh	r19,0(r3)
 8002c9c:	db012d17 	ldw	r12,1204(sp)
 8002ca0:	9839d7fa 	srai	fp,r19,31
 8002ca4:	63000104 	addi	r12,r12,4
 8002ca8:	db012d15 	stw	r12,1204(sp)
 8002cac:	e005883a 	mov	r2,fp
 8002cb0:	003f8106 	br	8002ab8 <__alt_data_end+0xfc002ab8>
 8002cb4:	8c401014 	ori	r17,r17,64
 8002cb8:	1805883a 	mov	r2,r3
 8002cbc:	1c000007 	ldb	r16,0(r3)
 8002cc0:	003d5906 	br	8002228 <__alt_data_end+0xfc002228>
 8002cc4:	db012d17 	ldw	r12,1204(sp)
 8002cc8:	d8c12a15 	stw	r3,1192(sp)
 8002ccc:	00c00044 	movi	r3,1
 8002cd0:	60800017 	ldw	r2,0(r12)
 8002cd4:	63000104 	addi	r12,r12,4
 8002cd8:	d8c12b15 	stw	r3,1196(sp)
 8002cdc:	d8012785 	stb	zero,1182(sp)
 8002ce0:	d8810405 	stb	r2,1040(sp)
 8002ce4:	db012d15 	stw	r12,1204(sp)
 8002ce8:	dac10404 	addi	r11,sp,1040
 8002cec:	1825883a 	mov	r18,r3
 8002cf0:	d8013215 	stw	zero,1224(sp)
 8002cf4:	d8013415 	stw	zero,1232(sp)
 8002cf8:	dac13115 	stw	r11,1220(sp)
 8002cfc:	0005883a 	mov	r2,zero
 8002d00:	003e7d06 	br	80026f8 <__alt_data_end+0xfc0026f8>
 8002d04:	db012d17 	ldw	r12,1204(sp)
 8002d08:	00800c04 	movi	r2,48
 8002d0c:	d8812705 	stb	r2,1180(sp)
 8002d10:	64c00017 	ldw	r19,0(r12)
 8002d14:	00801e04 	movi	r2,120
 8002d18:	d8812745 	stb	r2,1181(sp)
 8002d1c:	008200b4 	movhi	r2,2050
 8002d20:	10ae2b04 	addi	r2,r2,-18260
 8002d24:	63000104 	addi	r12,r12,4
 8002d28:	d8c12a15 	stw	r3,1192(sp)
 8002d2c:	d8813b15 	stw	r2,1260(sp)
 8002d30:	0039883a 	mov	fp,zero
 8002d34:	8c400094 	ori	r17,r17,2
 8002d38:	db012d15 	stw	r12,1204(sp)
 8002d3c:	00800084 	movi	r2,2
 8002d40:	04001e04 	movi	r16,120
 8002d44:	9807883a 	mov	r3,r19
 8002d48:	003e4206 	br	8002654 <__alt_data_end+0xfc002654>
 8002d4c:	dac12d17 	ldw	r11,1204(sp)
 8002d50:	db012d17 	ldw	r12,1204(sp)
 8002d54:	d8c12a15 	stw	r3,1192(sp)
 8002d58:	5ac00017 	ldw	r11,0(r11)
 8002d5c:	d8012785 	stb	zero,1182(sp)
 8002d60:	64c00104 	addi	r19,r12,4
 8002d64:	dac13115 	stw	r11,1220(sp)
 8002d68:	5803e826 	beq	r11,zero,8003d0c <___vfprintf_internal_r+0x1c80>
 8002d6c:	d9013117 	ldw	r4,1220(sp)
 8002d70:	48037a16 	blt	r9,zero,8003b5c <___vfprintf_internal_r+0x1ad0>
 8002d74:	480d883a 	mov	r6,r9
 8002d78:	000b883a 	mov	r5,zero
 8002d7c:	da013f15 	stw	r8,1276(sp)
 8002d80:	da413e15 	stw	r9,1272(sp)
 8002d84:	80075640 	call	8007564 <memchr>
 8002d88:	da013f17 	ldw	r8,1276(sp)
 8002d8c:	da413e17 	ldw	r9,1272(sp)
 8002d90:	10044426 	beq	r2,zero,8003ea4 <___vfprintf_internal_r+0x1e18>
 8002d94:	d8c13117 	ldw	r3,1220(sp)
 8002d98:	10e5c83a 	sub	r18,r2,r3
 8002d9c:	4c834416 	blt	r9,r18,8003ab0 <___vfprintf_internal_r+0x1a24>
 8002da0:	9005883a 	mov	r2,r18
 8002da4:	90037216 	blt	r18,zero,8003b70 <___vfprintf_internal_r+0x1ae4>
 8002da8:	dd412783 	ldbu	r21,1182(sp)
 8002dac:	d8812b15 	stw	r2,1196(sp)
 8002db0:	dcc12d15 	stw	r19,1204(sp)
 8002db4:	d8013215 	stw	zero,1224(sp)
 8002db8:	d8013415 	stw	zero,1232(sp)
 8002dbc:	003e4706 	br	80026dc <__alt_data_end+0xfc0026dc>
 8002dc0:	dac12d17 	ldw	r11,1204(sp)
 8002dc4:	db012d17 	ldw	r12,1204(sp)
 8002dc8:	5ac00017 	ldw	r11,0(r11)
 8002dcc:	dac12e15 	stw	r11,1208(sp)
 8002dd0:	62c00104 	addi	r11,r12,4
 8002dd4:	db012e17 	ldw	r12,1208(sp)
 8002dd8:	60034a16 	blt	r12,zero,8003b04 <___vfprintf_internal_r+0x1a78>
 8002ddc:	dac12d15 	stw	r11,1204(sp)
 8002de0:	1805883a 	mov	r2,r3
 8002de4:	1c000007 	ldb	r16,0(r3)
 8002de8:	003d0f06 	br	8002228 <__alt_data_end+0xfc002228>
 8002dec:	1805883a 	mov	r2,r3
 8002df0:	01800ac4 	movi	r6,43
 8002df4:	1c000007 	ldb	r16,0(r3)
 8002df8:	003d0b06 	br	8002228 <__alt_data_end+0xfc002228>
 8002dfc:	d8c12a15 	stw	r3,1192(sp)
 8002e00:	d9812785 	stb	r6,1182(sp)
 8002e04:	803db226 	beq	r16,zero,80024d0 <__alt_data_end+0xfc0024d0>
 8002e08:	00c00044 	movi	r3,1
 8002e0c:	d8c12b15 	stw	r3,1196(sp)
 8002e10:	dc010405 	stb	r16,1040(sp)
 8002e14:	d8012785 	stb	zero,1182(sp)
 8002e18:	003fb306 	br	8002ce8 <__alt_data_end+0xfc002ce8>
 8002e1c:	d8c12017 	ldw	r3,1152(sp)
 8002e20:	003e6d06 	br	80027d8 <__alt_data_end+0xfc0027d8>
 8002e24:	10803fcc 	andi	r2,r2,255
 8002e28:	00c00044 	movi	r3,1
 8002e2c:	10fe141e 	bne	r2,r3,8002680 <__alt_data_end+0xfc002680>
 8002e30:	e000021e 	bne	fp,zero,8002e3c <___vfprintf_internal_r+0xdb0>
 8002e34:	00800244 	movi	r2,9
 8002e38:	14c0202e 	bgeu	r2,r19,8002ebc <___vfprintf_internal_r+0xe30>
 8002e3c:	dc012b15 	stw	r16,1196(sp)
 8002e40:	dc412c15 	stw	r17,1200(sp)
 8002e44:	9821883a 	mov	r16,r19
 8002e48:	e023883a 	mov	r17,fp
 8002e4c:	dc810e04 	addi	r18,sp,1080
 8002e50:	4027883a 	mov	r19,r8
 8002e54:	4839883a 	mov	fp,r9
 8002e58:	8009883a 	mov	r4,r16
 8002e5c:	880b883a 	mov	r5,r17
 8002e60:	01800284 	movi	r6,10
 8002e64:	000f883a 	mov	r7,zero
 8002e68:	800b5640 	call	800b564 <__umoddi3>
 8002e6c:	10800c04 	addi	r2,r2,48
 8002e70:	94bfffc4 	addi	r18,r18,-1
 8002e74:	8009883a 	mov	r4,r16
 8002e78:	880b883a 	mov	r5,r17
 8002e7c:	01800284 	movi	r6,10
 8002e80:	000f883a 	mov	r7,zero
 8002e84:	90800005 	stb	r2,0(r18)
 8002e88:	800afa40 	call	800afa4 <__udivdi3>
 8002e8c:	1021883a 	mov	r16,r2
 8002e90:	10c4b03a 	or	r2,r2,r3
 8002e94:	1823883a 	mov	r17,r3
 8002e98:	103fef1e 	bne	r2,zero,8002e58 <__alt_data_end+0xfc002e58>
 8002e9c:	dac12817 	ldw	r11,1184(sp)
 8002ea0:	dc813115 	stw	r18,1220(sp)
 8002ea4:	dc012b17 	ldw	r16,1196(sp)
 8002ea8:	9811883a 	mov	r8,r19
 8002eac:	dc412c17 	ldw	r17,1200(sp)
 8002eb0:	e013883a 	mov	r9,fp
 8002eb4:	5ca5c83a 	sub	r18,r11,r18
 8002eb8:	003e0306 	br	80026c8 <__alt_data_end+0xfc0026c8>
 8002ebc:	9cc00c04 	addi	r19,r19,48
 8002ec0:	d8c10dc4 	addi	r3,sp,1079
 8002ec4:	dcc10dc5 	stb	r19,1079(sp)
 8002ec8:	dc813c17 	ldw	r18,1264(sp)
 8002ecc:	d8c13115 	stw	r3,1220(sp)
 8002ed0:	003dfd06 	br	80026c8 <__alt_data_end+0xfc0026c8>
 8002ed4:	00801944 	movi	r2,101
 8002ed8:	1400710e 	bge	r2,r16,80030a0 <___vfprintf_internal_r+0x1014>
 8002edc:	d9013717 	ldw	r4,1244(sp)
 8002ee0:	d9413917 	ldw	r5,1252(sp)
 8002ee4:	000d883a 	mov	r6,zero
 8002ee8:	000f883a 	mov	r7,zero
 8002eec:	d8c13d15 	stw	r3,1268(sp)
 8002ef0:	da013f15 	stw	r8,1276(sp)
 8002ef4:	800cd880 	call	800cd88 <__eqdf2>
 8002ef8:	d8c13d17 	ldw	r3,1268(sp)
 8002efc:	da013f17 	ldw	r8,1276(sp)
 8002f00:	1000ef1e 	bne	r2,zero,80032c0 <___vfprintf_internal_r+0x1234>
 8002f04:	d8811f17 	ldw	r2,1148(sp)
 8002f08:	010200b4 	movhi	r4,2050
 8002f0c:	212e3204 	addi	r4,r4,-18232
 8002f10:	18c00044 	addi	r3,r3,1
 8002f14:	10800044 	addi	r2,r2,1
 8002f18:	41000015 	stw	r4,0(r8)
 8002f1c:	01000044 	movi	r4,1
 8002f20:	41000115 	stw	r4,4(r8)
 8002f24:	d8c12015 	stw	r3,1152(sp)
 8002f28:	d8811f15 	stw	r2,1148(sp)
 8002f2c:	010001c4 	movi	r4,7
 8002f30:	20828e16 	blt	r4,r2,800396c <___vfprintf_internal_r+0x18e0>
 8002f34:	42000204 	addi	r8,r8,8
 8002f38:	d8812617 	ldw	r2,1176(sp)
 8002f3c:	dac13317 	ldw	r11,1228(sp)
 8002f40:	12c00216 	blt	r2,r11,8002f4c <___vfprintf_internal_r+0xec0>
 8002f44:	8880004c 	andi	r2,r17,1
 8002f48:	103e7726 	beq	r2,zero,8002928 <__alt_data_end+0xfc002928>
 8002f4c:	db013817 	ldw	r12,1248(sp)
 8002f50:	d8811f17 	ldw	r2,1148(sp)
 8002f54:	dac13517 	ldw	r11,1236(sp)
 8002f58:	1b07883a 	add	r3,r3,r12
 8002f5c:	10800044 	addi	r2,r2,1
 8002f60:	42c00015 	stw	r11,0(r8)
 8002f64:	43000115 	stw	r12,4(r8)
 8002f68:	d8c12015 	stw	r3,1152(sp)
 8002f6c:	d8811f15 	stw	r2,1148(sp)
 8002f70:	010001c4 	movi	r4,7
 8002f74:	2082ed16 	blt	r4,r2,8003b2c <___vfprintf_internal_r+0x1aa0>
 8002f78:	42000204 	addi	r8,r8,8
 8002f7c:	db013317 	ldw	r12,1228(sp)
 8002f80:	643fffc4 	addi	r16,r12,-1
 8002f84:	043e680e 	bge	zero,r16,8002928 <__alt_data_end+0xfc002928>
 8002f88:	04800404 	movi	r18,16
 8002f8c:	d8811f17 	ldw	r2,1148(sp)
 8002f90:	94007e0e 	bge	r18,r16,800318c <___vfprintf_internal_r+0x1100>
 8002f94:	014200b4 	movhi	r5,2050
 8002f98:	296e3284 	addi	r5,r5,-18230
 8002f9c:	d9412c15 	stw	r5,1200(sp)
 8002fa0:	054001c4 	movi	r21,7
 8002fa4:	00000306 	br	8002fb4 <___vfprintf_internal_r+0xf28>
 8002fa8:	42000204 	addi	r8,r8,8
 8002fac:	843ffc04 	addi	r16,r16,-16
 8002fb0:	9400790e 	bge	r18,r16,8003198 <___vfprintf_internal_r+0x110c>
 8002fb4:	18c00404 	addi	r3,r3,16
 8002fb8:	10800044 	addi	r2,r2,1
 8002fbc:	45000015 	stw	r20,0(r8)
 8002fc0:	44800115 	stw	r18,4(r8)
 8002fc4:	d8c12015 	stw	r3,1152(sp)
 8002fc8:	d8811f15 	stw	r2,1148(sp)
 8002fcc:	a8bff60e 	bge	r21,r2,8002fa8 <__alt_data_end+0xfc002fa8>
 8002fd0:	b009883a 	mov	r4,r22
 8002fd4:	b80b883a 	mov	r5,r23
 8002fd8:	d9811e04 	addi	r6,sp,1144
 8002fdc:	80092d40 	call	80092d4 <__sprint_r>
 8002fe0:	103d411e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8002fe4:	d8c12017 	ldw	r3,1152(sp)
 8002fe8:	d8811f17 	ldw	r2,1148(sp)
 8002fec:	da000404 	addi	r8,sp,16
 8002ff0:	003fee06 	br	8002fac <__alt_data_end+0xfc002fac>
 8002ff4:	dac12e17 	ldw	r11,1208(sp)
 8002ff8:	db012b17 	ldw	r12,1196(sp)
 8002ffc:	5b2bc83a 	sub	r21,r11,r12
 8003000:	057e130e 	bge	zero,r21,8002850 <__alt_data_end+0xfc002850>
 8003004:	07000404 	movi	fp,16
 8003008:	d8811f17 	ldw	r2,1148(sp)
 800300c:	e543640e 	bge	fp,r21,8003da0 <___vfprintf_internal_r+0x1d14>
 8003010:	014200b4 	movhi	r5,2050
 8003014:	296e3284 	addi	r5,r5,-18230
 8003018:	d9412c15 	stw	r5,1200(sp)
 800301c:	04c001c4 	movi	r19,7
 8003020:	00000306 	br	8003030 <___vfprintf_internal_r+0xfa4>
 8003024:	ad7ffc04 	addi	r21,r21,-16
 8003028:	42000204 	addi	r8,r8,8
 800302c:	e540110e 	bge	fp,r21,8003074 <___vfprintf_internal_r+0xfe8>
 8003030:	18c00404 	addi	r3,r3,16
 8003034:	10800044 	addi	r2,r2,1
 8003038:	45000015 	stw	r20,0(r8)
 800303c:	47000115 	stw	fp,4(r8)
 8003040:	d8c12015 	stw	r3,1152(sp)
 8003044:	d8811f15 	stw	r2,1148(sp)
 8003048:	98bff60e 	bge	r19,r2,8003024 <__alt_data_end+0xfc003024>
 800304c:	b009883a 	mov	r4,r22
 8003050:	b80b883a 	mov	r5,r23
 8003054:	d9811e04 	addi	r6,sp,1144
 8003058:	80092d40 	call	80092d4 <__sprint_r>
 800305c:	103d221e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003060:	ad7ffc04 	addi	r21,r21,-16
 8003064:	d8c12017 	ldw	r3,1152(sp)
 8003068:	d8811f17 	ldw	r2,1148(sp)
 800306c:	da000404 	addi	r8,sp,16
 8003070:	e57fef16 	blt	fp,r21,8003030 <__alt_data_end+0xfc003030>
 8003074:	dac12c17 	ldw	r11,1200(sp)
 8003078:	1d47883a 	add	r3,r3,r21
 800307c:	10800044 	addi	r2,r2,1
 8003080:	42c00015 	stw	r11,0(r8)
 8003084:	45400115 	stw	r21,4(r8)
 8003088:	d8c12015 	stw	r3,1152(sp)
 800308c:	d8811f15 	stw	r2,1148(sp)
 8003090:	010001c4 	movi	r4,7
 8003094:	20819116 	blt	r4,r2,80036dc <___vfprintf_internal_r+0x1650>
 8003098:	42000204 	addi	r8,r8,8
 800309c:	003dec06 	br	8002850 <__alt_data_end+0xfc002850>
 80030a0:	db013317 	ldw	r12,1228(sp)
 80030a4:	00800044 	movi	r2,1
 80030a8:	18c00044 	addi	r3,r3,1
 80030ac:	1301530e 	bge	r2,r12,80035fc <___vfprintf_internal_r+0x1570>
 80030b0:	dc011f17 	ldw	r16,1148(sp)
 80030b4:	dac13117 	ldw	r11,1220(sp)
 80030b8:	00800044 	movi	r2,1
 80030bc:	84000044 	addi	r16,r16,1
 80030c0:	40800115 	stw	r2,4(r8)
 80030c4:	42c00015 	stw	r11,0(r8)
 80030c8:	d8c12015 	stw	r3,1152(sp)
 80030cc:	dc011f15 	stw	r16,1148(sp)
 80030d0:	008001c4 	movi	r2,7
 80030d4:	14016b16 	blt	r2,r16,8003684 <___vfprintf_internal_r+0x15f8>
 80030d8:	42000204 	addi	r8,r8,8
 80030dc:	db013817 	ldw	r12,1248(sp)
 80030e0:	dac13517 	ldw	r11,1236(sp)
 80030e4:	84000044 	addi	r16,r16,1
 80030e8:	1b07883a 	add	r3,r3,r12
 80030ec:	42c00015 	stw	r11,0(r8)
 80030f0:	43000115 	stw	r12,4(r8)
 80030f4:	d8c12015 	stw	r3,1152(sp)
 80030f8:	dc011f15 	stw	r16,1148(sp)
 80030fc:	008001c4 	movi	r2,7
 8003100:	14016916 	blt	r2,r16,80036a8 <___vfprintf_internal_r+0x161c>
 8003104:	44800204 	addi	r18,r8,8
 8003108:	d9013717 	ldw	r4,1244(sp)
 800310c:	d9413917 	ldw	r5,1252(sp)
 8003110:	000d883a 	mov	r6,zero
 8003114:	000f883a 	mov	r7,zero
 8003118:	d8c13d15 	stw	r3,1268(sp)
 800311c:	800cd880 	call	800cd88 <__eqdf2>
 8003120:	d8c13d17 	ldw	r3,1268(sp)
 8003124:	db013317 	ldw	r12,1228(sp)
 8003128:	1000ae26 	beq	r2,zero,80033e4 <___vfprintf_internal_r+0x1358>
 800312c:	dac13117 	ldw	r11,1220(sp)
 8003130:	60bfffc4 	addi	r2,r12,-1
 8003134:	1887883a 	add	r3,r3,r2
 8003138:	59000044 	addi	r4,r11,1
 800313c:	84000044 	addi	r16,r16,1
 8003140:	90800115 	stw	r2,4(r18)
 8003144:	91000015 	stw	r4,0(r18)
 8003148:	d8c12015 	stw	r3,1152(sp)
 800314c:	dc011f15 	stw	r16,1148(sp)
 8003150:	008001c4 	movi	r2,7
 8003154:	14014216 	blt	r2,r16,8003660 <___vfprintf_internal_r+0x15d4>
 8003158:	94800204 	addi	r18,r18,8
 800315c:	dac13a17 	ldw	r11,1256(sp)
 8003160:	dd4122c4 	addi	r21,sp,1163
 8003164:	84000044 	addi	r16,r16,1
 8003168:	58c7883a 	add	r3,r11,r3
 800316c:	95400015 	stw	r21,0(r18)
 8003170:	92c00115 	stw	r11,4(r18)
 8003174:	d8c12015 	stw	r3,1152(sp)
 8003178:	dc011f15 	stw	r16,1148(sp)
 800317c:	008001c4 	movi	r2,7
 8003180:	14000e16 	blt	r2,r16,80031bc <___vfprintf_internal_r+0x1130>
 8003184:	92000204 	addi	r8,r18,8
 8003188:	003de706 	br	8002928 <__alt_data_end+0xfc002928>
 800318c:	010200b4 	movhi	r4,2050
 8003190:	212e3284 	addi	r4,r4,-18230
 8003194:	d9012c15 	stw	r4,1200(sp)
 8003198:	dac12c17 	ldw	r11,1200(sp)
 800319c:	1c07883a 	add	r3,r3,r16
 80031a0:	44000115 	stw	r16,4(r8)
 80031a4:	42c00015 	stw	r11,0(r8)
 80031a8:	10800044 	addi	r2,r2,1
 80031ac:	d8c12015 	stw	r3,1152(sp)
 80031b0:	d8811f15 	stw	r2,1148(sp)
 80031b4:	010001c4 	movi	r4,7
 80031b8:	20bdda0e 	bge	r4,r2,8002924 <__alt_data_end+0xfc002924>
 80031bc:	b009883a 	mov	r4,r22
 80031c0:	b80b883a 	mov	r5,r23
 80031c4:	d9811e04 	addi	r6,sp,1144
 80031c8:	80092d40 	call	80092d4 <__sprint_r>
 80031cc:	103cc61e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80031d0:	d8c12017 	ldw	r3,1152(sp)
 80031d4:	da000404 	addi	r8,sp,16
 80031d8:	003dd306 	br	8002928 <__alt_data_end+0xfc002928>
 80031dc:	b009883a 	mov	r4,r22
 80031e0:	b80b883a 	mov	r5,r23
 80031e4:	d9811e04 	addi	r6,sp,1144
 80031e8:	80092d40 	call	80092d4 <__sprint_r>
 80031ec:	103e0926 	beq	r2,zero,8002a14 <__alt_data_end+0xfc002a14>
 80031f0:	003cbd06 	br	80024e8 <__alt_data_end+0xfc0024e8>
 80031f4:	10803fcc 	andi	r2,r2,255
 80031f8:	1000651e 	bne	r2,zero,8003390 <___vfprintf_internal_r+0x1304>
 80031fc:	8880004c 	andi	r2,r17,1
 8003200:	10013226 	beq	r2,zero,80036cc <___vfprintf_internal_r+0x1640>
 8003204:	00800c04 	movi	r2,48
 8003208:	d8c10dc4 	addi	r3,sp,1079
 800320c:	d8810dc5 	stb	r2,1079(sp)
 8003210:	dc813c17 	ldw	r18,1264(sp)
 8003214:	d8c13115 	stw	r3,1220(sp)
 8003218:	003d2b06 	br	80026c8 <__alt_data_end+0xfc0026c8>
 800321c:	b009883a 	mov	r4,r22
 8003220:	b80b883a 	mov	r5,r23
 8003224:	d9811e04 	addi	r6,sp,1144
 8003228:	80092d40 	call	80092d4 <__sprint_r>
 800322c:	103cae1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003230:	d8c12017 	ldw	r3,1152(sp)
 8003234:	da000404 	addi	r8,sp,16
 8003238:	003dae06 	br	80028f4 <__alt_data_end+0xfc0028f4>
 800323c:	b009883a 	mov	r4,r22
 8003240:	b80b883a 	mov	r5,r23
 8003244:	d9811e04 	addi	r6,sp,1144
 8003248:	80092d40 	call	80092d4 <__sprint_r>
 800324c:	103ca61e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003250:	d8c12017 	ldw	r3,1152(sp)
 8003254:	da000404 	addi	r8,sp,16
 8003258:	003d6c06 	br	800280c <__alt_data_end+0xfc00280c>
 800325c:	b009883a 	mov	r4,r22
 8003260:	b80b883a 	mov	r5,r23
 8003264:	d9811e04 	addi	r6,sp,1144
 8003268:	80092d40 	call	80092d4 <__sprint_r>
 800326c:	103c9e1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003270:	d8c12017 	ldw	r3,1152(sp)
 8003274:	da000404 	addi	r8,sp,16
 8003278:	003d7206 	br	8002844 <__alt_data_end+0xfc002844>
 800327c:	d9413b17 	ldw	r5,1260(sp)
 8003280:	d8c10e04 	addi	r3,sp,1080
 8003284:	988003cc 	andi	r2,r19,15
 8003288:	e008973a 	slli	r4,fp,28
 800328c:	2885883a 	add	r2,r5,r2
 8003290:	9826d13a 	srli	r19,r19,4
 8003294:	10800003 	ldbu	r2,0(r2)
 8003298:	e038d13a 	srli	fp,fp,4
 800329c:	18ffffc4 	addi	r3,r3,-1
 80032a0:	24e6b03a 	or	r19,r4,r19
 80032a4:	18800005 	stb	r2,0(r3)
 80032a8:	9f04b03a 	or	r2,r19,fp
 80032ac:	103ff51e 	bne	r2,zero,8003284 <__alt_data_end+0xfc003284>
 80032b0:	db012817 	ldw	r12,1184(sp)
 80032b4:	d8c13115 	stw	r3,1220(sp)
 80032b8:	60e5c83a 	sub	r18,r12,r3
 80032bc:	003d0206 	br	80026c8 <__alt_data_end+0xfc0026c8>
 80032c0:	dc012617 	ldw	r16,1176(sp)
 80032c4:	0401b10e 	bge	zero,r16,800398c <___vfprintf_internal_r+0x1900>
 80032c8:	db013117 	ldw	r12,1220(sp)
 80032cc:	dac13317 	ldw	r11,1228(sp)
 80032d0:	62e1883a 	add	r16,r12,r11
 80032d4:	db013417 	ldw	r12,1232(sp)
 80032d8:	5825883a 	mov	r18,r11
 80032dc:	62c0010e 	bge	r12,r11,80032e4 <___vfprintf_internal_r+0x1258>
 80032e0:	6025883a 	mov	r18,r12
 80032e4:	04800b0e 	bge	zero,r18,8003314 <___vfprintf_internal_r+0x1288>
 80032e8:	d8811f17 	ldw	r2,1148(sp)
 80032ec:	dac13117 	ldw	r11,1220(sp)
 80032f0:	1c87883a 	add	r3,r3,r18
 80032f4:	10800044 	addi	r2,r2,1
 80032f8:	42c00015 	stw	r11,0(r8)
 80032fc:	44800115 	stw	r18,4(r8)
 8003300:	d8c12015 	stw	r3,1152(sp)
 8003304:	d8811f15 	stw	r2,1148(sp)
 8003308:	010001c4 	movi	r4,7
 800330c:	20824f16 	blt	r4,r2,8003c4c <___vfprintf_internal_r+0x1bc0>
 8003310:	42000204 	addi	r8,r8,8
 8003314:	90024b16 	blt	r18,zero,8003c44 <___vfprintf_internal_r+0x1bb8>
 8003318:	db013417 	ldw	r12,1232(sp)
 800331c:	64a5c83a 	sub	r18,r12,r18
 8003320:	0480730e 	bge	zero,r18,80034f0 <___vfprintf_internal_r+0x1464>
 8003324:	05400404 	movi	r21,16
 8003328:	d8811f17 	ldw	r2,1148(sp)
 800332c:	ac817d0e 	bge	r21,r18,8003924 <___vfprintf_internal_r+0x1898>
 8003330:	014200b4 	movhi	r5,2050
 8003334:	296e3284 	addi	r5,r5,-18230
 8003338:	d9412c15 	stw	r5,1200(sp)
 800333c:	070001c4 	movi	fp,7
 8003340:	00000306 	br	8003350 <___vfprintf_internal_r+0x12c4>
 8003344:	42000204 	addi	r8,r8,8
 8003348:	94bffc04 	addi	r18,r18,-16
 800334c:	ac81780e 	bge	r21,r18,8003930 <___vfprintf_internal_r+0x18a4>
 8003350:	18c00404 	addi	r3,r3,16
 8003354:	10800044 	addi	r2,r2,1
 8003358:	45000015 	stw	r20,0(r8)
 800335c:	45400115 	stw	r21,4(r8)
 8003360:	d8c12015 	stw	r3,1152(sp)
 8003364:	d8811f15 	stw	r2,1148(sp)
 8003368:	e0bff60e 	bge	fp,r2,8003344 <__alt_data_end+0xfc003344>
 800336c:	b009883a 	mov	r4,r22
 8003370:	b80b883a 	mov	r5,r23
 8003374:	d9811e04 	addi	r6,sp,1144
 8003378:	80092d40 	call	80092d4 <__sprint_r>
 800337c:	103c5a1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003380:	d8c12017 	ldw	r3,1152(sp)
 8003384:	d8811f17 	ldw	r2,1148(sp)
 8003388:	da000404 	addi	r8,sp,16
 800338c:	003fee06 	br	8003348 <__alt_data_end+0xfc003348>
 8003390:	dac10e04 	addi	r11,sp,1080
 8003394:	0025883a 	mov	r18,zero
 8003398:	dac13115 	stw	r11,1220(sp)
 800339c:	003cca06 	br	80026c8 <__alt_data_end+0xfc0026c8>
 80033a0:	b009883a 	mov	r4,r22
 80033a4:	b80b883a 	mov	r5,r23
 80033a8:	d9811e04 	addi	r6,sp,1144
 80033ac:	80092d40 	call	80092d4 <__sprint_r>
 80033b0:	103c4d1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80033b4:	d8c12017 	ldw	r3,1152(sp)
 80033b8:	d8812787 	ldb	r2,1182(sp)
 80033bc:	da000404 	addi	r8,sp,16
 80033c0:	003d0506 	br	80027d8 <__alt_data_end+0xfc0027d8>
 80033c4:	dac12d17 	ldw	r11,1204(sp)
 80033c8:	14c00017 	ldw	r19,0(r2)
 80033cc:	0039883a 	mov	fp,zero
 80033d0:	5ac00104 	addi	r11,r11,4
 80033d4:	dac12d15 	stw	r11,1204(sp)
 80033d8:	0005883a 	mov	r2,zero
 80033dc:	9807883a 	mov	r3,r19
 80033e0:	003c9c06 	br	8002654 <__alt_data_end+0xfc002654>
 80033e4:	657fffc4 	addi	r21,r12,-1
 80033e8:	057f5c0e 	bge	zero,r21,800315c <__alt_data_end+0xfc00315c>
 80033ec:	07000404 	movi	fp,16
 80033f0:	e5408f0e 	bge	fp,r21,8003630 <___vfprintf_internal_r+0x15a4>
 80033f4:	010200b4 	movhi	r4,2050
 80033f8:	212e3284 	addi	r4,r4,-18230
 80033fc:	d9012c15 	stw	r4,1200(sp)
 8003400:	01c001c4 	movi	r7,7
 8003404:	00000306 	br	8003414 <___vfprintf_internal_r+0x1388>
 8003408:	94800204 	addi	r18,r18,8
 800340c:	ad7ffc04 	addi	r21,r21,-16
 8003410:	e5408a0e 	bge	fp,r21,800363c <___vfprintf_internal_r+0x15b0>
 8003414:	18c00404 	addi	r3,r3,16
 8003418:	84000044 	addi	r16,r16,1
 800341c:	95000015 	stw	r20,0(r18)
 8003420:	97000115 	stw	fp,4(r18)
 8003424:	d8c12015 	stw	r3,1152(sp)
 8003428:	dc011f15 	stw	r16,1148(sp)
 800342c:	3c3ff60e 	bge	r7,r16,8003408 <__alt_data_end+0xfc003408>
 8003430:	b009883a 	mov	r4,r22
 8003434:	b80b883a 	mov	r5,r23
 8003438:	d9811e04 	addi	r6,sp,1144
 800343c:	d9c13d15 	stw	r7,1268(sp)
 8003440:	80092d40 	call	80092d4 <__sprint_r>
 8003444:	d9c13d17 	ldw	r7,1268(sp)
 8003448:	103c271e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 800344c:	d8c12017 	ldw	r3,1152(sp)
 8003450:	dc011f17 	ldw	r16,1148(sp)
 8003454:	dc800404 	addi	r18,sp,16
 8003458:	003fec06 	br	800340c <__alt_data_end+0xfc00340c>
 800345c:	1cc00017 	ldw	r19,0(r3)
 8003460:	dac12d17 	ldw	r11,1204(sp)
 8003464:	9839d7fa 	srai	fp,r19,31
 8003468:	5ac00104 	addi	r11,r11,4
 800346c:	dac12d15 	stw	r11,1204(sp)
 8003470:	e005883a 	mov	r2,fp
 8003474:	003d9006 	br	8002ab8 <__alt_data_end+0xfc002ab8>
 8003478:	00800084 	movi	r2,2
 800347c:	9f06b03a 	or	r3,r19,fp
 8003480:	003c7406 	br	8002654 <__alt_data_end+0xfc002654>
 8003484:	db012d17 	ldw	r12,1204(sp)
 8003488:	14c00017 	ldw	r19,0(r2)
 800348c:	0039883a 	mov	fp,zero
 8003490:	63000104 	addi	r12,r12,4
 8003494:	db012d15 	stw	r12,1204(sp)
 8003498:	00800044 	movi	r2,1
 800349c:	9807883a 	mov	r3,r19
 80034a0:	003c6c06 	br	8002654 <__alt_data_end+0xfc002654>
 80034a4:	10803fcc 	andi	r2,r2,255
 80034a8:	1080201c 	xori	r2,r2,128
 80034ac:	10bfe004 	addi	r2,r2,-128
 80034b0:	01000c04 	movi	r4,48
 80034b4:	1101a526 	beq	r2,r4,8003b4c <___vfprintf_internal_r+0x1ac0>
 80034b8:	dac13117 	ldw	r11,1220(sp)
 80034bc:	db012817 	ldw	r12,1184(sp)
 80034c0:	193fffc5 	stb	r4,-1(r3)
 80034c4:	5affffc4 	addi	r11,r11,-1
 80034c8:	dac13115 	stw	r11,1220(sp)
 80034cc:	62e5c83a 	sub	r18,r12,r11
 80034d0:	003c7d06 	br	80026c8 <__alt_data_end+0xfc0026c8>
 80034d4:	b009883a 	mov	r4,r22
 80034d8:	b80b883a 	mov	r5,r23
 80034dc:	d9811e04 	addi	r6,sp,1144
 80034e0:	80092d40 	call	80092d4 <__sprint_r>
 80034e4:	103c001e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80034e8:	d8c12017 	ldw	r3,1152(sp)
 80034ec:	da000404 	addi	r8,sp,16
 80034f0:	db013117 	ldw	r12,1220(sp)
 80034f4:	dac13417 	ldw	r11,1232(sp)
 80034f8:	d8812617 	ldw	r2,1176(sp)
 80034fc:	62e5883a 	add	r18,r12,r11
 8003500:	db013317 	ldw	r12,1228(sp)
 8003504:	13000216 	blt	r2,r12,8003510 <___vfprintf_internal_r+0x1484>
 8003508:	8900004c 	andi	r4,r17,1
 800350c:	20000c26 	beq	r4,zero,8003540 <___vfprintf_internal_r+0x14b4>
 8003510:	dac13817 	ldw	r11,1248(sp)
 8003514:	d9011f17 	ldw	r4,1148(sp)
 8003518:	db013517 	ldw	r12,1236(sp)
 800351c:	1ac7883a 	add	r3,r3,r11
 8003520:	21000044 	addi	r4,r4,1
 8003524:	43000015 	stw	r12,0(r8)
 8003528:	42c00115 	stw	r11,4(r8)
 800352c:	d8c12015 	stw	r3,1152(sp)
 8003530:	d9011f15 	stw	r4,1148(sp)
 8003534:	014001c4 	movi	r5,7
 8003538:	2901cc16 	blt	r5,r4,8003c6c <___vfprintf_internal_r+0x1be0>
 800353c:	42000204 	addi	r8,r8,8
 8003540:	dac13317 	ldw	r11,1228(sp)
 8003544:	8489c83a 	sub	r4,r16,r18
 8003548:	5885c83a 	sub	r2,r11,r2
 800354c:	1021883a 	mov	r16,r2
 8003550:	2080010e 	bge	r4,r2,8003558 <___vfprintf_internal_r+0x14cc>
 8003554:	2021883a 	mov	r16,r4
 8003558:	04000a0e 	bge	zero,r16,8003584 <___vfprintf_internal_r+0x14f8>
 800355c:	d9011f17 	ldw	r4,1148(sp)
 8003560:	1c07883a 	add	r3,r3,r16
 8003564:	44800015 	stw	r18,0(r8)
 8003568:	21000044 	addi	r4,r4,1
 800356c:	44000115 	stw	r16,4(r8)
 8003570:	d8c12015 	stw	r3,1152(sp)
 8003574:	d9011f15 	stw	r4,1148(sp)
 8003578:	014001c4 	movi	r5,7
 800357c:	2901d616 	blt	r5,r4,8003cd8 <___vfprintf_internal_r+0x1c4c>
 8003580:	42000204 	addi	r8,r8,8
 8003584:	8001df16 	blt	r16,zero,8003d04 <___vfprintf_internal_r+0x1c78>
 8003588:	1421c83a 	sub	r16,r2,r16
 800358c:	043ce60e 	bge	zero,r16,8002928 <__alt_data_end+0xfc002928>
 8003590:	04800404 	movi	r18,16
 8003594:	d8811f17 	ldw	r2,1148(sp)
 8003598:	943efc0e 	bge	r18,r16,800318c <__alt_data_end+0xfc00318c>
 800359c:	014200b4 	movhi	r5,2050
 80035a0:	296e3284 	addi	r5,r5,-18230
 80035a4:	d9412c15 	stw	r5,1200(sp)
 80035a8:	054001c4 	movi	r21,7
 80035ac:	00000306 	br	80035bc <___vfprintf_internal_r+0x1530>
 80035b0:	42000204 	addi	r8,r8,8
 80035b4:	843ffc04 	addi	r16,r16,-16
 80035b8:	943ef70e 	bge	r18,r16,8003198 <__alt_data_end+0xfc003198>
 80035bc:	18c00404 	addi	r3,r3,16
 80035c0:	10800044 	addi	r2,r2,1
 80035c4:	45000015 	stw	r20,0(r8)
 80035c8:	44800115 	stw	r18,4(r8)
 80035cc:	d8c12015 	stw	r3,1152(sp)
 80035d0:	d8811f15 	stw	r2,1148(sp)
 80035d4:	a8bff60e 	bge	r21,r2,80035b0 <__alt_data_end+0xfc0035b0>
 80035d8:	b009883a 	mov	r4,r22
 80035dc:	b80b883a 	mov	r5,r23
 80035e0:	d9811e04 	addi	r6,sp,1144
 80035e4:	80092d40 	call	80092d4 <__sprint_r>
 80035e8:	103bbf1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80035ec:	d8c12017 	ldw	r3,1152(sp)
 80035f0:	d8811f17 	ldw	r2,1148(sp)
 80035f4:	da000404 	addi	r8,sp,16
 80035f8:	003fee06 	br	80035b4 <__alt_data_end+0xfc0035b4>
 80035fc:	8888703a 	and	r4,r17,r2
 8003600:	203eab1e 	bne	r4,zero,80030b0 <__alt_data_end+0xfc0030b0>
 8003604:	dc011f17 	ldw	r16,1148(sp)
 8003608:	db013117 	ldw	r12,1220(sp)
 800360c:	40800115 	stw	r2,4(r8)
 8003610:	84000044 	addi	r16,r16,1
 8003614:	43000015 	stw	r12,0(r8)
 8003618:	d8c12015 	stw	r3,1152(sp)
 800361c:	dc011f15 	stw	r16,1148(sp)
 8003620:	008001c4 	movi	r2,7
 8003624:	14000e16 	blt	r2,r16,8003660 <___vfprintf_internal_r+0x15d4>
 8003628:	44800204 	addi	r18,r8,8
 800362c:	003ecb06 	br	800315c <__alt_data_end+0xfc00315c>
 8003630:	008200b4 	movhi	r2,2050
 8003634:	10ae3284 	addi	r2,r2,-18230
 8003638:	d8812c15 	stw	r2,1200(sp)
 800363c:	dac12c17 	ldw	r11,1200(sp)
 8003640:	1d47883a 	add	r3,r3,r21
 8003644:	84000044 	addi	r16,r16,1
 8003648:	92c00015 	stw	r11,0(r18)
 800364c:	95400115 	stw	r21,4(r18)
 8003650:	d8c12015 	stw	r3,1152(sp)
 8003654:	dc011f15 	stw	r16,1148(sp)
 8003658:	008001c4 	movi	r2,7
 800365c:	143ebe0e 	bge	r2,r16,8003158 <__alt_data_end+0xfc003158>
 8003660:	b009883a 	mov	r4,r22
 8003664:	b80b883a 	mov	r5,r23
 8003668:	d9811e04 	addi	r6,sp,1144
 800366c:	80092d40 	call	80092d4 <__sprint_r>
 8003670:	103b9d1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003674:	d8c12017 	ldw	r3,1152(sp)
 8003678:	dc011f17 	ldw	r16,1148(sp)
 800367c:	dc800404 	addi	r18,sp,16
 8003680:	003eb606 	br	800315c <__alt_data_end+0xfc00315c>
 8003684:	b009883a 	mov	r4,r22
 8003688:	b80b883a 	mov	r5,r23
 800368c:	d9811e04 	addi	r6,sp,1144
 8003690:	80092d40 	call	80092d4 <__sprint_r>
 8003694:	103b941e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003698:	d8c12017 	ldw	r3,1152(sp)
 800369c:	dc011f17 	ldw	r16,1148(sp)
 80036a0:	da000404 	addi	r8,sp,16
 80036a4:	003e8d06 	br	80030dc <__alt_data_end+0xfc0030dc>
 80036a8:	b009883a 	mov	r4,r22
 80036ac:	b80b883a 	mov	r5,r23
 80036b0:	d9811e04 	addi	r6,sp,1144
 80036b4:	80092d40 	call	80092d4 <__sprint_r>
 80036b8:	103b8b1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80036bc:	d8c12017 	ldw	r3,1152(sp)
 80036c0:	dc011f17 	ldw	r16,1148(sp)
 80036c4:	dc800404 	addi	r18,sp,16
 80036c8:	003e8f06 	br	8003108 <__alt_data_end+0xfc003108>
 80036cc:	db010e04 	addi	r12,sp,1080
 80036d0:	0025883a 	mov	r18,zero
 80036d4:	db013115 	stw	r12,1220(sp)
 80036d8:	003bfb06 	br	80026c8 <__alt_data_end+0xfc0026c8>
 80036dc:	b009883a 	mov	r4,r22
 80036e0:	b80b883a 	mov	r5,r23
 80036e4:	d9811e04 	addi	r6,sp,1144
 80036e8:	80092d40 	call	80092d4 <__sprint_r>
 80036ec:	103b7e1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 80036f0:	d8c12017 	ldw	r3,1152(sp)
 80036f4:	da000404 	addi	r8,sp,16
 80036f8:	003c5506 	br	8002850 <__alt_data_end+0xfc002850>
 80036fc:	04e7c83a 	sub	r19,zero,r19
 8003700:	9804c03a 	cmpne	r2,r19,zero
 8003704:	0739c83a 	sub	fp,zero,fp
 8003708:	e0b9c83a 	sub	fp,fp,r2
 800370c:	05400b44 	movi	r21,45
 8003710:	dd412785 	stb	r21,1182(sp)
 8003714:	da413215 	stw	r9,1224(sp)
 8003718:	00800044 	movi	r2,1
 800371c:	9f06b03a 	or	r3,r19,fp
 8003720:	003bcf06 	br	8002660 <__alt_data_end+0xfc002660>
 8003724:	da013f15 	stw	r8,1276(sp)
 8003728:	da413e15 	stw	r9,1272(sp)
 800372c:	8008f300 	call	8008f30 <__fpclassifyd>
 8003730:	da013f17 	ldw	r8,1276(sp)
 8003734:	da413e17 	ldw	r9,1272(sp)
 8003738:	1000ce26 	beq	r2,zero,8003a74 <___vfprintf_internal_r+0x19e8>
 800373c:	057ff7c4 	movi	r21,-33
 8003740:	00bfffc4 	movi	r2,-1
 8003744:	856a703a 	and	r21,r16,r21
 8003748:	4881f026 	beq	r9,r2,8003f0c <___vfprintf_internal_r+0x1e80>
 800374c:	008011c4 	movi	r2,71
 8003750:	a881e526 	beq	r21,r2,8003ee8 <___vfprintf_internal_r+0x1e5c>
 8003754:	db013917 	ldw	r12,1252(sp)
 8003758:	8ac04014 	ori	r11,r17,256
 800375c:	dac12d15 	stw	r11,1204(sp)
 8003760:	6001e416 	blt	r12,zero,8003ef4 <___vfprintf_internal_r+0x1e68>
 8003764:	dc813917 	ldw	r18,1252(sp)
 8003768:	d8012b05 	stb	zero,1196(sp)
 800376c:	00801984 	movi	r2,102
 8003770:	80811826 	beq	r16,r2,8003bd4 <___vfprintf_internal_r+0x1b48>
 8003774:	00801184 	movi	r2,70
 8003778:	80811626 	beq	r16,r2,8003bd4 <___vfprintf_internal_r+0x1b48>
 800377c:	00801144 	movi	r2,69
 8003780:	a881e026 	beq	r21,r2,8003f04 <___vfprintf_internal_r+0x1e78>
 8003784:	4839883a 	mov	fp,r9
 8003788:	d8812604 	addi	r2,sp,1176
 800378c:	d8800115 	stw	r2,4(sp)
 8003790:	d9413717 	ldw	r5,1244(sp)
 8003794:	d8812504 	addi	r2,sp,1172
 8003798:	d8800215 	stw	r2,8(sp)
 800379c:	d8812104 	addi	r2,sp,1156
 80037a0:	df000015 	stw	fp,0(sp)
 80037a4:	d8800315 	stw	r2,12(sp)
 80037a8:	b009883a 	mov	r4,r22
 80037ac:	900d883a 	mov	r6,r18
 80037b0:	01c00084 	movi	r7,2
 80037b4:	da013f15 	stw	r8,1276(sp)
 80037b8:	da413e15 	stw	r9,1272(sp)
 80037bc:	80043dc0 	call	80043dc <_dtoa_r>
 80037c0:	d8813115 	stw	r2,1220(sp)
 80037c4:	008019c4 	movi	r2,103
 80037c8:	da013f17 	ldw	r8,1276(sp)
 80037cc:	da413e17 	ldw	r9,1272(sp)
 80037d0:	80800226 	beq	r16,r2,80037dc <___vfprintf_internal_r+0x1750>
 80037d4:	008011c4 	movi	r2,71
 80037d8:	8081101e 	bne	r16,r2,8003c1c <___vfprintf_internal_r+0x1b90>
 80037dc:	8880004c 	andi	r2,r17,1
 80037e0:	1001df26 	beq	r2,zero,8003f60 <___vfprintf_internal_r+0x1ed4>
 80037e4:	db013117 	ldw	r12,1220(sp)
 80037e8:	6715883a 	add	r10,r12,fp
 80037ec:	d9013717 	ldw	r4,1244(sp)
 80037f0:	900b883a 	mov	r5,r18
 80037f4:	000d883a 	mov	r6,zero
 80037f8:	000f883a 	mov	r7,zero
 80037fc:	da013f15 	stw	r8,1276(sp)
 8003800:	da413e15 	stw	r9,1272(sp)
 8003804:	da813d15 	stw	r10,1268(sp)
 8003808:	800cd880 	call	800cd88 <__eqdf2>
 800380c:	da013f17 	ldw	r8,1276(sp)
 8003810:	da413e17 	ldw	r9,1272(sp)
 8003814:	da813d17 	ldw	r10,1268(sp)
 8003818:	10016526 	beq	r2,zero,8003db0 <___vfprintf_internal_r+0x1d24>
 800381c:	d8812117 	ldw	r2,1156(sp)
 8003820:	1280062e 	bgeu	r2,r10,800383c <___vfprintf_internal_r+0x17b0>
 8003824:	01000c04 	movi	r4,48
 8003828:	10c00044 	addi	r3,r2,1
 800382c:	d8c12115 	stw	r3,1156(sp)
 8003830:	11000005 	stb	r4,0(r2)
 8003834:	d8812117 	ldw	r2,1156(sp)
 8003838:	12bffb36 	bltu	r2,r10,8003828 <__alt_data_end+0xfc003828>
 800383c:	db013117 	ldw	r12,1220(sp)
 8003840:	1305c83a 	sub	r2,r2,r12
 8003844:	d8813315 	stw	r2,1228(sp)
 8003848:	008011c4 	movi	r2,71
 800384c:	a8814a26 	beq	r21,r2,8003d78 <___vfprintf_internal_r+0x1cec>
 8003850:	00801944 	movi	r2,101
 8003854:	14020a0e 	bge	r2,r16,8004080 <___vfprintf_internal_r+0x1ff4>
 8003858:	00801984 	movi	r2,102
 800385c:	8081b626 	beq	r16,r2,8003f38 <___vfprintf_internal_r+0x1eac>
 8003860:	db012617 	ldw	r12,1176(sp)
 8003864:	db013415 	stw	r12,1232(sp)
 8003868:	db013417 	ldw	r12,1232(sp)
 800386c:	dac13317 	ldw	r11,1228(sp)
 8003870:	62c1a816 	blt	r12,r11,8003f14 <___vfprintf_internal_r+0x1e88>
 8003874:	8c40004c 	andi	r17,r17,1
 8003878:	8801ca1e 	bne	r17,zero,8003fa4 <___vfprintf_internal_r+0x1f18>
 800387c:	6005883a 	mov	r2,r12
 8003880:	6001b516 	blt	r12,zero,8003f58 <___vfprintf_internal_r+0x1ecc>
 8003884:	dc813417 	ldw	r18,1232(sp)
 8003888:	df012b07 	ldb	fp,1196(sp)
 800388c:	e001321e 	bne	fp,zero,8003d58 <___vfprintf_internal_r+0x1ccc>
 8003890:	dc412d17 	ldw	r17,1204(sp)
 8003894:	dd412783 	ldbu	r21,1182(sp)
 8003898:	d8812b15 	stw	r2,1196(sp)
 800389c:	dcc12d15 	stw	r19,1204(sp)
 80038a0:	d8013215 	stw	zero,1224(sp)
 80038a4:	003b8d06 	br	80026dc <__alt_data_end+0xfc0026dc>
 80038a8:	88c0100c 	andi	r3,r17,64
 80038ac:	18008226 	beq	r3,zero,8003ab8 <___vfprintf_internal_r+0x1a2c>
 80038b0:	dac12d17 	ldw	r11,1204(sp)
 80038b4:	14c0000b 	ldhu	r19,0(r2)
 80038b8:	0039883a 	mov	fp,zero
 80038bc:	5ac00104 	addi	r11,r11,4
 80038c0:	dac12d15 	stw	r11,1204(sp)
 80038c4:	003c8f06 	br	8002b04 <__alt_data_end+0xfc002b04>
 80038c8:	1c000007 	ldb	r16,0(r3)
 80038cc:	1805883a 	mov	r2,r3
 80038d0:	003a5506 	br	8002228 <__alt_data_end+0xfc002228>
 80038d4:	00800084 	movi	r2,2
 80038d8:	003b5e06 	br	8002654 <__alt_data_end+0xfc002654>
 80038dc:	8880040c 	andi	r2,r17,16
 80038e0:	1000091e 	bne	r2,zero,8003908 <___vfprintf_internal_r+0x187c>
 80038e4:	8c40100c 	andi	r17,r17,64
 80038e8:	88000726 	beq	r17,zero,8003908 <___vfprintf_internal_r+0x187c>
 80038ec:	db012d17 	ldw	r12,1204(sp)
 80038f0:	dac12f17 	ldw	r11,1212(sp)
 80038f4:	60800017 	ldw	r2,0(r12)
 80038f8:	63000104 	addi	r12,r12,4
 80038fc:	db012d15 	stw	r12,1204(sp)
 8003900:	12c0000d 	sth	r11,0(r2)
 8003904:	003a1e06 	br	8002180 <__alt_data_end+0xfc002180>
 8003908:	db012d17 	ldw	r12,1204(sp)
 800390c:	dac12f17 	ldw	r11,1212(sp)
 8003910:	60800017 	ldw	r2,0(r12)
 8003914:	63000104 	addi	r12,r12,4
 8003918:	db012d15 	stw	r12,1204(sp)
 800391c:	12c00015 	stw	r11,0(r2)
 8003920:	003a1706 	br	8002180 <__alt_data_end+0xfc002180>
 8003924:	010200b4 	movhi	r4,2050
 8003928:	212e3284 	addi	r4,r4,-18230
 800392c:	d9012c15 	stw	r4,1200(sp)
 8003930:	dac12c17 	ldw	r11,1200(sp)
 8003934:	1c87883a 	add	r3,r3,r18
 8003938:	10800044 	addi	r2,r2,1
 800393c:	42c00015 	stw	r11,0(r8)
 8003940:	44800115 	stw	r18,4(r8)
 8003944:	d8c12015 	stw	r3,1152(sp)
 8003948:	d8811f15 	stw	r2,1148(sp)
 800394c:	010001c4 	movi	r4,7
 8003950:	20bee016 	blt	r4,r2,80034d4 <__alt_data_end+0xfc0034d4>
 8003954:	42000204 	addi	r8,r8,8
 8003958:	003ee506 	br	80034f0 <__alt_data_end+0xfc0034f0>
 800395c:	010200b4 	movhi	r4,2050
 8003960:	212e3284 	addi	r4,r4,-18230
 8003964:	d9012c15 	stw	r4,1200(sp)
 8003968:	003bd806 	br	80028cc <__alt_data_end+0xfc0028cc>
 800396c:	b009883a 	mov	r4,r22
 8003970:	b80b883a 	mov	r5,r23
 8003974:	d9811e04 	addi	r6,sp,1144
 8003978:	80092d40 	call	80092d4 <__sprint_r>
 800397c:	103ada1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003980:	d8c12017 	ldw	r3,1152(sp)
 8003984:	da000404 	addi	r8,sp,16
 8003988:	003d6b06 	br	8002f38 <__alt_data_end+0xfc002f38>
 800398c:	d8811f17 	ldw	r2,1148(sp)
 8003990:	030200b4 	movhi	r12,2050
 8003994:	01000044 	movi	r4,1
 8003998:	18c00044 	addi	r3,r3,1
 800399c:	10800044 	addi	r2,r2,1
 80039a0:	632e3204 	addi	r12,r12,-18232
 80039a4:	41000115 	stw	r4,4(r8)
 80039a8:	43000015 	stw	r12,0(r8)
 80039ac:	d8c12015 	stw	r3,1152(sp)
 80039b0:	d8811f15 	stw	r2,1148(sp)
 80039b4:	010001c4 	movi	r4,7
 80039b8:	20804916 	blt	r4,r2,8003ae0 <___vfprintf_internal_r+0x1a54>
 80039bc:	42000204 	addi	r8,r8,8
 80039c0:	8000041e 	bne	r16,zero,80039d4 <___vfprintf_internal_r+0x1948>
 80039c4:	dac13317 	ldw	r11,1228(sp)
 80039c8:	5800021e 	bne	r11,zero,80039d4 <___vfprintf_internal_r+0x1948>
 80039cc:	8880004c 	andi	r2,r17,1
 80039d0:	103bd526 	beq	r2,zero,8002928 <__alt_data_end+0xfc002928>
 80039d4:	db013817 	ldw	r12,1248(sp)
 80039d8:	d8811f17 	ldw	r2,1148(sp)
 80039dc:	dac13517 	ldw	r11,1236(sp)
 80039e0:	1b07883a 	add	r3,r3,r12
 80039e4:	10800044 	addi	r2,r2,1
 80039e8:	42c00015 	stw	r11,0(r8)
 80039ec:	43000115 	stw	r12,4(r8)
 80039f0:	d8c12015 	stw	r3,1152(sp)
 80039f4:	d8811f15 	stw	r2,1148(sp)
 80039f8:	010001c4 	movi	r4,7
 80039fc:	20813016 	blt	r4,r2,8003ec0 <___vfprintf_internal_r+0x1e34>
 8003a00:	42000204 	addi	r8,r8,8
 8003a04:	0421c83a 	sub	r16,zero,r16
 8003a08:	0400630e 	bge	zero,r16,8003b98 <___vfprintf_internal_r+0x1b0c>
 8003a0c:	04800404 	movi	r18,16
 8003a10:	94009f0e 	bge	r18,r16,8003c90 <___vfprintf_internal_r+0x1c04>
 8003a14:	010200b4 	movhi	r4,2050
 8003a18:	212e3284 	addi	r4,r4,-18230
 8003a1c:	d9012c15 	stw	r4,1200(sp)
 8003a20:	054001c4 	movi	r21,7
 8003a24:	00000306 	br	8003a34 <___vfprintf_internal_r+0x19a8>
 8003a28:	42000204 	addi	r8,r8,8
 8003a2c:	843ffc04 	addi	r16,r16,-16
 8003a30:	94009a0e 	bge	r18,r16,8003c9c <___vfprintf_internal_r+0x1c10>
 8003a34:	18c00404 	addi	r3,r3,16
 8003a38:	10800044 	addi	r2,r2,1
 8003a3c:	45000015 	stw	r20,0(r8)
 8003a40:	44800115 	stw	r18,4(r8)
 8003a44:	d8c12015 	stw	r3,1152(sp)
 8003a48:	d8811f15 	stw	r2,1148(sp)
 8003a4c:	a8bff60e 	bge	r21,r2,8003a28 <__alt_data_end+0xfc003a28>
 8003a50:	b009883a 	mov	r4,r22
 8003a54:	b80b883a 	mov	r5,r23
 8003a58:	d9811e04 	addi	r6,sp,1144
 8003a5c:	80092d40 	call	80092d4 <__sprint_r>
 8003a60:	103aa11e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003a64:	d8c12017 	ldw	r3,1152(sp)
 8003a68:	d8811f17 	ldw	r2,1148(sp)
 8003a6c:	da000404 	addi	r8,sp,16
 8003a70:	003fee06 	br	8003a2c <__alt_data_end+0xfc003a2c>
 8003a74:	008011c4 	movi	r2,71
 8003a78:	1400b316 	blt	r2,r16,8003d48 <___vfprintf_internal_r+0x1cbc>
 8003a7c:	030200b4 	movhi	r12,2050
 8003a80:	632e2404 	addi	r12,r12,-18288
 8003a84:	db013115 	stw	r12,1220(sp)
 8003a88:	00c000c4 	movi	r3,3
 8003a8c:	00bfdfc4 	movi	r2,-129
 8003a90:	d8c12b15 	stw	r3,1196(sp)
 8003a94:	88a2703a 	and	r17,r17,r2
 8003a98:	dd412783 	ldbu	r21,1182(sp)
 8003a9c:	dcc12d15 	stw	r19,1204(sp)
 8003aa0:	1825883a 	mov	r18,r3
 8003aa4:	d8013215 	stw	zero,1224(sp)
 8003aa8:	d8013415 	stw	zero,1232(sp)
 8003aac:	003b0b06 	br	80026dc <__alt_data_end+0xfc0026dc>
 8003ab0:	4825883a 	mov	r18,r9
 8003ab4:	003cba06 	br	8002da0 <__alt_data_end+0xfc002da0>
 8003ab8:	db012d17 	ldw	r12,1204(sp)
 8003abc:	14c00017 	ldw	r19,0(r2)
 8003ac0:	0039883a 	mov	fp,zero
 8003ac4:	63000104 	addi	r12,r12,4
 8003ac8:	db012d15 	stw	r12,1204(sp)
 8003acc:	003c0d06 	br	8002b04 <__alt_data_end+0xfc002b04>
 8003ad0:	008200b4 	movhi	r2,2050
 8003ad4:	10ae2204 	addi	r2,r2,-18296
 8003ad8:	d8813115 	stw	r2,1220(sp)
 8003adc:	003ac406 	br	80025f0 <__alt_data_end+0xfc0025f0>
 8003ae0:	b009883a 	mov	r4,r22
 8003ae4:	b80b883a 	mov	r5,r23
 8003ae8:	d9811e04 	addi	r6,sp,1144
 8003aec:	80092d40 	call	80092d4 <__sprint_r>
 8003af0:	103a7d1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003af4:	dc012617 	ldw	r16,1176(sp)
 8003af8:	d8c12017 	ldw	r3,1152(sp)
 8003afc:	da000404 	addi	r8,sp,16
 8003b00:	003faf06 	br	80039c0 <__alt_data_end+0xfc0039c0>
 8003b04:	db012e17 	ldw	r12,1208(sp)
 8003b08:	1805883a 	mov	r2,r3
 8003b0c:	dac12d15 	stw	r11,1204(sp)
 8003b10:	0319c83a 	sub	r12,zero,r12
 8003b14:	db012e15 	stw	r12,1208(sp)
 8003b18:	003a7e06 	br	8002514 <__alt_data_end+0xfc002514>
 8003b1c:	18800044 	addi	r2,r3,1
 8003b20:	8c400814 	ori	r17,r17,32
 8003b24:	1c000047 	ldb	r16,1(r3)
 8003b28:	0039bf06 	br	8002228 <__alt_data_end+0xfc002228>
 8003b2c:	b009883a 	mov	r4,r22
 8003b30:	b80b883a 	mov	r5,r23
 8003b34:	d9811e04 	addi	r6,sp,1144
 8003b38:	80092d40 	call	80092d4 <__sprint_r>
 8003b3c:	103a6a1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003b40:	d8c12017 	ldw	r3,1152(sp)
 8003b44:	da000404 	addi	r8,sp,16
 8003b48:	003d0c06 	br	8002f7c <__alt_data_end+0xfc002f7c>
 8003b4c:	db012817 	ldw	r12,1184(sp)
 8003b50:	d8c13117 	ldw	r3,1220(sp)
 8003b54:	60e5c83a 	sub	r18,r12,r3
 8003b58:	003adb06 	br	80026c8 <__alt_data_end+0xfc0026c8>
 8003b5c:	da013f15 	stw	r8,1276(sp)
 8003b60:	8001ff40 	call	8001ff4 <strlen>
 8003b64:	1025883a 	mov	r18,r2
 8003b68:	da013f17 	ldw	r8,1276(sp)
 8003b6c:	903c8e0e 	bge	r18,zero,8002da8 <__alt_data_end+0xfc002da8>
 8003b70:	0005883a 	mov	r2,zero
 8003b74:	003c8c06 	br	8002da8 <__alt_data_end+0xfc002da8>
 8003b78:	b009883a 	mov	r4,r22
 8003b7c:	b80b883a 	mov	r5,r23
 8003b80:	d9811e04 	addi	r6,sp,1144
 8003b84:	80092d40 	call	80092d4 <__sprint_r>
 8003b88:	103a571e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003b8c:	d8c12017 	ldw	r3,1152(sp)
 8003b90:	d8811f17 	ldw	r2,1148(sp)
 8003b94:	da000404 	addi	r8,sp,16
 8003b98:	db013317 	ldw	r12,1228(sp)
 8003b9c:	dac13117 	ldw	r11,1220(sp)
 8003ba0:	10800044 	addi	r2,r2,1
 8003ba4:	60c7883a 	add	r3,r12,r3
 8003ba8:	42c00015 	stw	r11,0(r8)
 8003bac:	43000115 	stw	r12,4(r8)
 8003bb0:	d8c12015 	stw	r3,1152(sp)
 8003bb4:	d8811f15 	stw	r2,1148(sp)
 8003bb8:	010001c4 	movi	r4,7
 8003bbc:	20bb590e 	bge	r4,r2,8002924 <__alt_data_end+0xfc002924>
 8003bc0:	003d7e06 	br	80031bc <__alt_data_end+0xfc0031bc>
 8003bc4:	010200b4 	movhi	r4,2050
 8003bc8:	212e3684 	addi	r4,r4,-18214
 8003bcc:	d9013615 	stw	r4,1240(sp)
 8003bd0:	003af606 	br	80027ac <__alt_data_end+0xfc0027ac>
 8003bd4:	d8812604 	addi	r2,sp,1176
 8003bd8:	d8800115 	stw	r2,4(sp)
 8003bdc:	d9413717 	ldw	r5,1244(sp)
 8003be0:	d8812504 	addi	r2,sp,1172
 8003be4:	d8800215 	stw	r2,8(sp)
 8003be8:	d8812104 	addi	r2,sp,1156
 8003bec:	da400015 	stw	r9,0(sp)
 8003bf0:	d8800315 	stw	r2,12(sp)
 8003bf4:	b009883a 	mov	r4,r22
 8003bf8:	900d883a 	mov	r6,r18
 8003bfc:	01c000c4 	movi	r7,3
 8003c00:	da013f15 	stw	r8,1276(sp)
 8003c04:	da413e15 	stw	r9,1272(sp)
 8003c08:	80043dc0 	call	80043dc <_dtoa_r>
 8003c0c:	da413e17 	ldw	r9,1272(sp)
 8003c10:	da013f17 	ldw	r8,1276(sp)
 8003c14:	d8813115 	stw	r2,1220(sp)
 8003c18:	4839883a 	mov	fp,r9
 8003c1c:	dac13117 	ldw	r11,1220(sp)
 8003c20:	00801184 	movi	r2,70
 8003c24:	5f15883a 	add	r10,r11,fp
 8003c28:	a8bef01e 	bne	r21,r2,80037ec <__alt_data_end+0xfc0037ec>
 8003c2c:	59000007 	ldb	r4,0(r11)
 8003c30:	00800c04 	movi	r2,48
 8003c34:	2080e026 	beq	r4,r2,8003fb8 <___vfprintf_internal_r+0x1f2c>
 8003c38:	d8c12617 	ldw	r3,1176(sp)
 8003c3c:	50d5883a 	add	r10,r10,r3
 8003c40:	003eea06 	br	80037ec <__alt_data_end+0xfc0037ec>
 8003c44:	0025883a 	mov	r18,zero
 8003c48:	003db306 	br	8003318 <__alt_data_end+0xfc003318>
 8003c4c:	b009883a 	mov	r4,r22
 8003c50:	b80b883a 	mov	r5,r23
 8003c54:	d9811e04 	addi	r6,sp,1144
 8003c58:	80092d40 	call	80092d4 <__sprint_r>
 8003c5c:	103a221e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003c60:	d8c12017 	ldw	r3,1152(sp)
 8003c64:	da000404 	addi	r8,sp,16
 8003c68:	003daa06 	br	8003314 <__alt_data_end+0xfc003314>
 8003c6c:	b009883a 	mov	r4,r22
 8003c70:	b80b883a 	mov	r5,r23
 8003c74:	d9811e04 	addi	r6,sp,1144
 8003c78:	80092d40 	call	80092d4 <__sprint_r>
 8003c7c:	103a1a1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003c80:	d8812617 	ldw	r2,1176(sp)
 8003c84:	d8c12017 	ldw	r3,1152(sp)
 8003c88:	da000404 	addi	r8,sp,16
 8003c8c:	003e2c06 	br	8003540 <__alt_data_end+0xfc003540>
 8003c90:	030200b4 	movhi	r12,2050
 8003c94:	632e3284 	addi	r12,r12,-18230
 8003c98:	db012c15 	stw	r12,1200(sp)
 8003c9c:	dac12c17 	ldw	r11,1200(sp)
 8003ca0:	1c07883a 	add	r3,r3,r16
 8003ca4:	10800044 	addi	r2,r2,1
 8003ca8:	42c00015 	stw	r11,0(r8)
 8003cac:	44000115 	stw	r16,4(r8)
 8003cb0:	d8c12015 	stw	r3,1152(sp)
 8003cb4:	d8811f15 	stw	r2,1148(sp)
 8003cb8:	010001c4 	movi	r4,7
 8003cbc:	20bfae16 	blt	r4,r2,8003b78 <__alt_data_end+0xfc003b78>
 8003cc0:	42000204 	addi	r8,r8,8
 8003cc4:	003fb406 	br	8003b98 <__alt_data_end+0xfc003b98>
 8003cc8:	030200b4 	movhi	r12,2050
 8003ccc:	632e3684 	addi	r12,r12,-18214
 8003cd0:	db013615 	stw	r12,1240(sp)
 8003cd4:	003b3806 	br	80029b8 <__alt_data_end+0xfc0029b8>
 8003cd8:	b009883a 	mov	r4,r22
 8003cdc:	b80b883a 	mov	r5,r23
 8003ce0:	d9811e04 	addi	r6,sp,1144
 8003ce4:	80092d40 	call	80092d4 <__sprint_r>
 8003ce8:	1039ff1e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003cec:	d8812617 	ldw	r2,1176(sp)
 8003cf0:	db013317 	ldw	r12,1228(sp)
 8003cf4:	d8c12017 	ldw	r3,1152(sp)
 8003cf8:	da000404 	addi	r8,sp,16
 8003cfc:	6085c83a 	sub	r2,r12,r2
 8003d00:	003e2006 	br	8003584 <__alt_data_end+0xfc003584>
 8003d04:	0021883a 	mov	r16,zero
 8003d08:	003e1f06 	br	8003588 <__alt_data_end+0xfc003588>
 8003d0c:	00800184 	movi	r2,6
 8003d10:	1240012e 	bgeu	r2,r9,8003d18 <___vfprintf_internal_r+0x1c8c>
 8003d14:	1013883a 	mov	r9,r2
 8003d18:	4825883a 	mov	r18,r9
 8003d1c:	4805883a 	mov	r2,r9
 8003d20:	48009e16 	blt	r9,zero,8003f9c <___vfprintf_internal_r+0x1f10>
 8003d24:	d8812b15 	stw	r2,1196(sp)
 8003d28:	008200b4 	movhi	r2,2050
 8003d2c:	10ae3004 	addi	r2,r2,-18240
 8003d30:	d8813115 	stw	r2,1220(sp)
 8003d34:	dcc12d15 	stw	r19,1204(sp)
 8003d38:	d8013215 	stw	zero,1224(sp)
 8003d3c:	d8013415 	stw	zero,1232(sp)
 8003d40:	0005883a 	mov	r2,zero
 8003d44:	003a6c06 	br	80026f8 <__alt_data_end+0xfc0026f8>
 8003d48:	008200b4 	movhi	r2,2050
 8003d4c:	10ae2504 	addi	r2,r2,-18284
 8003d50:	d8813115 	stw	r2,1220(sp)
 8003d54:	003f4c06 	br	8003a88 <__alt_data_end+0xfc003a88>
 8003d58:	00c00b44 	movi	r3,45
 8003d5c:	d8812b15 	stw	r2,1196(sp)
 8003d60:	dc412d17 	ldw	r17,1204(sp)
 8003d64:	d8c12785 	stb	r3,1182(sp)
 8003d68:	dcc12d15 	stw	r19,1204(sp)
 8003d6c:	d8013215 	stw	zero,1224(sp)
 8003d70:	00800b44 	movi	r2,45
 8003d74:	003a5d06 	br	80026ec <__alt_data_end+0xfc0026ec>
 8003d78:	d8c12617 	ldw	r3,1176(sp)
 8003d7c:	00bfff44 	movi	r2,-3
 8003d80:	18800d16 	blt	r3,r2,8003db8 <___vfprintf_internal_r+0x1d2c>
 8003d84:	48c00c16 	blt	r9,r3,8003db8 <___vfprintf_internal_r+0x1d2c>
 8003d88:	d8c13415 	stw	r3,1232(sp)
 8003d8c:	040019c4 	movi	r16,103
 8003d90:	003eb506 	br	8003868 <__alt_data_end+0xfc003868>
 8003d94:	05400b44 	movi	r21,45
 8003d98:	dd412785 	stb	r21,1182(sp)
 8003d9c:	003a0f06 	br	80025dc <__alt_data_end+0xfc0025dc>
 8003da0:	010200b4 	movhi	r4,2050
 8003da4:	212e3284 	addi	r4,r4,-18230
 8003da8:	d9012c15 	stw	r4,1200(sp)
 8003dac:	003cb106 	br	8003074 <__alt_data_end+0xfc003074>
 8003db0:	5005883a 	mov	r2,r10
 8003db4:	003ea106 	br	800383c <__alt_data_end+0xfc00383c>
 8003db8:	843fff84 	addi	r16,r16,-2
 8003dbc:	1f3fffc4 	addi	fp,r3,-1
 8003dc0:	df012615 	stw	fp,1176(sp)
 8003dc4:	dc0122c5 	stb	r16,1163(sp)
 8003dc8:	e0009516 	blt	fp,zero,8004020 <___vfprintf_internal_r+0x1f94>
 8003dcc:	00800ac4 	movi	r2,43
 8003dd0:	d8812305 	stb	r2,1164(sp)
 8003dd4:	00800244 	movi	r2,9
 8003dd8:	1700690e 	bge	r2,fp,8003f80 <___vfprintf_internal_r+0x1ef4>
 8003ddc:	dd4122c4 	addi	r21,sp,1163
 8003de0:	dc012c15 	stw	r16,1200(sp)
 8003de4:	8825883a 	mov	r18,r17
 8003de8:	a821883a 	mov	r16,r21
 8003dec:	4023883a 	mov	r17,r8
 8003df0:	e009883a 	mov	r4,fp
 8003df4:	01400284 	movi	r5,10
 8003df8:	800bbb40 	call	800bbb4 <__modsi3>
 8003dfc:	10800c04 	addi	r2,r2,48
 8003e00:	843fffc4 	addi	r16,r16,-1
 8003e04:	e009883a 	mov	r4,fp
 8003e08:	01400284 	movi	r5,10
 8003e0c:	80800005 	stb	r2,0(r16)
 8003e10:	800bb600 	call	800bb60 <__divsi3>
 8003e14:	1039883a 	mov	fp,r2
 8003e18:	00800244 	movi	r2,9
 8003e1c:	173ff416 	blt	r2,fp,8003df0 <__alt_data_end+0xfc003df0>
 8003e20:	8811883a 	mov	r8,r17
 8003e24:	e0800c04 	addi	r2,fp,48
 8003e28:	9023883a 	mov	r17,r18
 8003e2c:	8025883a 	mov	r18,r16
 8003e30:	913fffc4 	addi	r4,r18,-1
 8003e34:	90bfffc5 	stb	r2,-1(r18)
 8003e38:	dc012c17 	ldw	r16,1200(sp)
 8003e3c:	25408e2e 	bgeu	r4,r21,8004078 <___vfprintf_internal_r+0x1fec>
 8003e40:	d9412384 	addi	r5,sp,1166
 8003e44:	2c8bc83a 	sub	r5,r5,r18
 8003e48:	d8c12344 	addi	r3,sp,1165
 8003e4c:	a94b883a 	add	r5,r21,r5
 8003e50:	00000106 	br	8003e58 <___vfprintf_internal_r+0x1dcc>
 8003e54:	20800003 	ldbu	r2,0(r4)
 8003e58:	18800005 	stb	r2,0(r3)
 8003e5c:	18c00044 	addi	r3,r3,1
 8003e60:	21000044 	addi	r4,r4,1
 8003e64:	197ffb1e 	bne	r3,r5,8003e54 <__alt_data_end+0xfc003e54>
 8003e68:	d8812304 	addi	r2,sp,1164
 8003e6c:	1485c83a 	sub	r2,r2,r18
 8003e70:	d8c12344 	addi	r3,sp,1165
 8003e74:	1885883a 	add	r2,r3,r2
 8003e78:	dac13317 	ldw	r11,1228(sp)
 8003e7c:	156bc83a 	sub	r21,r2,r21
 8003e80:	dd413a15 	stw	r21,1256(sp)
 8003e84:	00800044 	movi	r2,1
 8003e88:	5d65883a 	add	r18,r11,r21
 8003e8c:	12c0770e 	bge	r2,r11,800406c <___vfprintf_internal_r+0x1fe0>
 8003e90:	94800044 	addi	r18,r18,1
 8003e94:	9005883a 	mov	r2,r18
 8003e98:	90007216 	blt	r18,zero,8004064 <___vfprintf_internal_r+0x1fd8>
 8003e9c:	d8013415 	stw	zero,1232(sp)
 8003ea0:	003e7906 	br	8003888 <__alt_data_end+0xfc003888>
 8003ea4:	da412b15 	stw	r9,1196(sp)
 8003ea8:	dd412783 	ldbu	r21,1182(sp)
 8003eac:	4825883a 	mov	r18,r9
 8003eb0:	dcc12d15 	stw	r19,1204(sp)
 8003eb4:	d8013215 	stw	zero,1224(sp)
 8003eb8:	d8013415 	stw	zero,1232(sp)
 8003ebc:	003a0706 	br	80026dc <__alt_data_end+0xfc0026dc>
 8003ec0:	b009883a 	mov	r4,r22
 8003ec4:	b80b883a 	mov	r5,r23
 8003ec8:	d9811e04 	addi	r6,sp,1144
 8003ecc:	80092d40 	call	80092d4 <__sprint_r>
 8003ed0:	1039851e 	bne	r2,zero,80024e8 <__alt_data_end+0xfc0024e8>
 8003ed4:	dc012617 	ldw	r16,1176(sp)
 8003ed8:	d8c12017 	ldw	r3,1152(sp)
 8003edc:	d8811f17 	ldw	r2,1148(sp)
 8003ee0:	da000404 	addi	r8,sp,16
 8003ee4:	003ec706 	br	8003a04 <__alt_data_end+0xfc003a04>
 8003ee8:	483e1a1e 	bne	r9,zero,8003754 <__alt_data_end+0xfc003754>
 8003eec:	9013883a 	mov	r9,r18
 8003ef0:	003e1806 	br	8003754 <__alt_data_end+0xfc003754>
 8003ef4:	00c00b44 	movi	r3,45
 8003ef8:	64a0003c 	xorhi	r18,r12,32768
 8003efc:	d8c12b05 	stb	r3,1196(sp)
 8003f00:	003e1a06 	br	800376c <__alt_data_end+0xfc00376c>
 8003f04:	4f000044 	addi	fp,r9,1
 8003f08:	003e1f06 	br	8003788 <__alt_data_end+0xfc003788>
 8003f0c:	02400184 	movi	r9,6
 8003f10:	003e1006 	br	8003754 <__alt_data_end+0xfc003754>
 8003f14:	d8c13417 	ldw	r3,1232(sp)
 8003f18:	00c04b0e 	bge	zero,r3,8004048 <___vfprintf_internal_r+0x1fbc>
 8003f1c:	04800044 	movi	r18,1
 8003f20:	dac13317 	ldw	r11,1228(sp)
 8003f24:	92e5883a 	add	r18,r18,r11
 8003f28:	9005883a 	mov	r2,r18
 8003f2c:	903e560e 	bge	r18,zero,8003888 <__alt_data_end+0xfc003888>
 8003f30:	0005883a 	mov	r2,zero
 8003f34:	003e5406 	br	8003888 <__alt_data_end+0xfc003888>
 8003f38:	d8c12617 	ldw	r3,1176(sp)
 8003f3c:	d8c13415 	stw	r3,1232(sp)
 8003f40:	00c03b0e 	bge	zero,r3,8004030 <___vfprintf_internal_r+0x1fa4>
 8003f44:	4800081e 	bne	r9,zero,8003f68 <___vfprintf_internal_r+0x1edc>
 8003f48:	8c40004c 	andi	r17,r17,1
 8003f4c:	8800061e 	bne	r17,zero,8003f68 <___vfprintf_internal_r+0x1edc>
 8003f50:	1805883a 	mov	r2,r3
 8003f54:	183e4b0e 	bge	r3,zero,8003884 <__alt_data_end+0xfc003884>
 8003f58:	0005883a 	mov	r2,zero
 8003f5c:	003e4906 	br	8003884 <__alt_data_end+0xfc003884>
 8003f60:	d8812117 	ldw	r2,1156(sp)
 8003f64:	003e3506 	br	800383c <__alt_data_end+0xfc00383c>
 8003f68:	dac13417 	ldw	r11,1232(sp)
 8003f6c:	4a400044 	addi	r9,r9,1
 8003f70:	5a65883a 	add	r18,r11,r9
 8003f74:	9005883a 	mov	r2,r18
 8003f78:	903e430e 	bge	r18,zero,8003888 <__alt_data_end+0xfc003888>
 8003f7c:	003fec06 	br	8003f30 <__alt_data_end+0xfc003f30>
 8003f80:	00800c04 	movi	r2,48
 8003f84:	e0c00c04 	addi	r3,fp,48
 8003f88:	d8812345 	stb	r2,1165(sp)
 8003f8c:	d8c12385 	stb	r3,1166(sp)
 8003f90:	d88123c4 	addi	r2,sp,1167
 8003f94:	dd4122c4 	addi	r21,sp,1163
 8003f98:	003fb706 	br	8003e78 <__alt_data_end+0xfc003e78>
 8003f9c:	0005883a 	mov	r2,zero
 8003fa0:	003f6006 	br	8003d24 <__alt_data_end+0xfc003d24>
 8003fa4:	db013417 	ldw	r12,1232(sp)
 8003fa8:	64800044 	addi	r18,r12,1
 8003fac:	9005883a 	mov	r2,r18
 8003fb0:	903e350e 	bge	r18,zero,8003888 <__alt_data_end+0xfc003888>
 8003fb4:	003fde06 	br	8003f30 <__alt_data_end+0xfc003f30>
 8003fb8:	d9013717 	ldw	r4,1244(sp)
 8003fbc:	900b883a 	mov	r5,r18
 8003fc0:	000d883a 	mov	r6,zero
 8003fc4:	000f883a 	mov	r7,zero
 8003fc8:	da013f15 	stw	r8,1276(sp)
 8003fcc:	da413e15 	stw	r9,1272(sp)
 8003fd0:	da813d15 	stw	r10,1268(sp)
 8003fd4:	800cd880 	call	800cd88 <__eqdf2>
 8003fd8:	da013f17 	ldw	r8,1276(sp)
 8003fdc:	da413e17 	ldw	r9,1272(sp)
 8003fe0:	da813d17 	ldw	r10,1268(sp)
 8003fe4:	103f1426 	beq	r2,zero,8003c38 <__alt_data_end+0xfc003c38>
 8003fe8:	00800044 	movi	r2,1
 8003fec:	1707c83a 	sub	r3,r2,fp
 8003ff0:	d8c12615 	stw	r3,1176(sp)
 8003ff4:	003f1106 	br	8003c3c <__alt_data_end+0xfc003c3c>
 8003ff8:	dac12d17 	ldw	r11,1204(sp)
 8003ffc:	5a400017 	ldw	r9,0(r11)
 8004000:	5ac00104 	addi	r11,r11,4
 8004004:	dac12d15 	stw	r11,1204(sp)
 8004008:	483ec60e 	bge	r9,zero,8003b24 <__alt_data_end+0xfc003b24>
 800400c:	027fffc4 	movi	r9,-1
 8004010:	1c000047 	ldb	r16,1(r3)
 8004014:	00388406 	br	8002228 <__alt_data_end+0xfc002228>
 8004018:	043fffc4 	movi	r16,-1
 800401c:	00391006 	br	8002460 <__alt_data_end+0xfc002460>
 8004020:	00800b44 	movi	r2,45
 8004024:	0739c83a 	sub	fp,zero,fp
 8004028:	d8812305 	stb	r2,1164(sp)
 800402c:	003f6906 	br	8003dd4 <__alt_data_end+0xfc003dd4>
 8004030:	4800081e 	bne	r9,zero,8004054 <___vfprintf_internal_r+0x1fc8>
 8004034:	8c40004c 	andi	r17,r17,1
 8004038:	8800061e 	bne	r17,zero,8004054 <___vfprintf_internal_r+0x1fc8>
 800403c:	00800044 	movi	r2,1
 8004040:	1025883a 	mov	r18,r2
 8004044:	003e1006 	br	8003888 <__alt_data_end+0xfc003888>
 8004048:	04800084 	movi	r18,2
 800404c:	90e5c83a 	sub	r18,r18,r3
 8004050:	003fb306 	br	8003f20 <__alt_data_end+0xfc003f20>
 8004054:	4c800084 	addi	r18,r9,2
 8004058:	9005883a 	mov	r2,r18
 800405c:	903e0a0e 	bge	r18,zero,8003888 <__alt_data_end+0xfc003888>
 8004060:	003fb306 	br	8003f30 <__alt_data_end+0xfc003f30>
 8004064:	0005883a 	mov	r2,zero
 8004068:	003f8c06 	br	8003e9c <__alt_data_end+0xfc003e9c>
 800406c:	88a2703a 	and	r17,r17,r2
 8004070:	883f8826 	beq	r17,zero,8003e94 <__alt_data_end+0xfc003e94>
 8004074:	003f8606 	br	8003e90 <__alt_data_end+0xfc003e90>
 8004078:	d8812344 	addi	r2,sp,1165
 800407c:	003f7e06 	br	8003e78 <__alt_data_end+0xfc003e78>
 8004080:	d8c12617 	ldw	r3,1176(sp)
 8004084:	003f4d06 	br	8003dbc <__alt_data_end+0xfc003dbc>

08004088 <__vfprintf_internal>:
 8004088:	2007883a 	mov	r3,r4
 800408c:	010200b4 	movhi	r4,2050
 8004090:	21359f04 	addi	r4,r4,-10628
 8004094:	21000017 	ldw	r4,0(r4)
 8004098:	2805883a 	mov	r2,r5
 800409c:	300f883a 	mov	r7,r6
 80040a0:	180b883a 	mov	r5,r3
 80040a4:	100d883a 	mov	r6,r2
 80040a8:	800208c1 	jmpi	800208c <___vfprintf_internal_r>

080040ac <__swsetup_r>:
 80040ac:	008200b4 	movhi	r2,2050
 80040b0:	defffd04 	addi	sp,sp,-12
 80040b4:	10b59f04 	addi	r2,r2,-10628
 80040b8:	dc400115 	stw	r17,4(sp)
 80040bc:	2023883a 	mov	r17,r4
 80040c0:	11000017 	ldw	r4,0(r2)
 80040c4:	dc000015 	stw	r16,0(sp)
 80040c8:	dfc00215 	stw	ra,8(sp)
 80040cc:	2821883a 	mov	r16,r5
 80040d0:	20000226 	beq	r4,zero,80040dc <__swsetup_r+0x30>
 80040d4:	20c00e17 	ldw	r3,56(r4)
 80040d8:	18002e26 	beq	r3,zero,8004194 <__swsetup_r+0xe8>
 80040dc:	8080030b 	ldhu	r2,12(r16)
 80040e0:	10c0020c 	andi	r3,r2,8
 80040e4:	100d883a 	mov	r6,r2
 80040e8:	18000f26 	beq	r3,zero,8004128 <__swsetup_r+0x7c>
 80040ec:	80c00417 	ldw	r3,16(r16)
 80040f0:	18001526 	beq	r3,zero,8004148 <__swsetup_r+0x9c>
 80040f4:	1100004c 	andi	r4,r2,1
 80040f8:	20001c1e 	bne	r4,zero,800416c <__swsetup_r+0xc0>
 80040fc:	1080008c 	andi	r2,r2,2
 8004100:	1000261e 	bne	r2,zero,800419c <__swsetup_r+0xf0>
 8004104:	80800517 	ldw	r2,20(r16)
 8004108:	80800215 	stw	r2,8(r16)
 800410c:	18001c26 	beq	r3,zero,8004180 <__swsetup_r+0xd4>
 8004110:	0005883a 	mov	r2,zero
 8004114:	dfc00217 	ldw	ra,8(sp)
 8004118:	dc400117 	ldw	r17,4(sp)
 800411c:	dc000017 	ldw	r16,0(sp)
 8004120:	dec00304 	addi	sp,sp,12
 8004124:	f800283a 	ret
 8004128:	3080040c 	andi	r2,r6,16
 800412c:	10001726 	beq	r2,zero,800418c <__swsetup_r+0xe0>
 8004130:	3080010c 	andi	r2,r6,4
 8004134:	10001b1e 	bne	r2,zero,80041a4 <__swsetup_r+0xf8>
 8004138:	80c00417 	ldw	r3,16(r16)
 800413c:	30800214 	ori	r2,r6,8
 8004140:	8080030d 	sth	r2,12(r16)
 8004144:	183feb1e 	bne	r3,zero,80040f4 <__alt_data_end+0xfc0040f4>
 8004148:	1140a00c 	andi	r5,r2,640
 800414c:	01008004 	movi	r4,512
 8004150:	293fe826 	beq	r5,r4,80040f4 <__alt_data_end+0xfc0040f4>
 8004154:	8809883a 	mov	r4,r17
 8004158:	800b883a 	mov	r5,r16
 800415c:	8006c040 	call	8006c04 <__smakebuf_r>
 8004160:	8080030b 	ldhu	r2,12(r16)
 8004164:	80c00417 	ldw	r3,16(r16)
 8004168:	003fe206 	br	80040f4 <__alt_data_end+0xfc0040f4>
 800416c:	80800517 	ldw	r2,20(r16)
 8004170:	80000215 	stw	zero,8(r16)
 8004174:	0085c83a 	sub	r2,zero,r2
 8004178:	80800615 	stw	r2,24(r16)
 800417c:	183fe41e 	bne	r3,zero,8004110 <__alt_data_end+0xfc004110>
 8004180:	8080030b 	ldhu	r2,12(r16)
 8004184:	1080200c 	andi	r2,r2,128
 8004188:	103fe226 	beq	r2,zero,8004114 <__alt_data_end+0xfc004114>
 800418c:	00bfffc4 	movi	r2,-1
 8004190:	003fe006 	br	8004114 <__alt_data_end+0xfc004114>
 8004194:	80060ac0 	call	80060ac <__sinit>
 8004198:	003fd006 	br	80040dc <__alt_data_end+0xfc0040dc>
 800419c:	0005883a 	mov	r2,zero
 80041a0:	003fd906 	br	8004108 <__alt_data_end+0xfc004108>
 80041a4:	81400c17 	ldw	r5,48(r16)
 80041a8:	28000626 	beq	r5,zero,80041c4 <__swsetup_r+0x118>
 80041ac:	80801004 	addi	r2,r16,64
 80041b0:	28800326 	beq	r5,r2,80041c0 <__swsetup_r+0x114>
 80041b4:	8809883a 	mov	r4,r17
 80041b8:	80062200 	call	8006220 <_free_r>
 80041bc:	8180030b 	ldhu	r6,12(r16)
 80041c0:	80000c15 	stw	zero,48(r16)
 80041c4:	80c00417 	ldw	r3,16(r16)
 80041c8:	00bff6c4 	movi	r2,-37
 80041cc:	118c703a 	and	r6,r2,r6
 80041d0:	80000115 	stw	zero,4(r16)
 80041d4:	80c00015 	stw	r3,0(r16)
 80041d8:	003fd806 	br	800413c <__alt_data_end+0xfc00413c>

080041dc <quorem>:
 80041dc:	defff704 	addi	sp,sp,-36
 80041e0:	dc800215 	stw	r18,8(sp)
 80041e4:	20800417 	ldw	r2,16(r4)
 80041e8:	2c800417 	ldw	r18,16(r5)
 80041ec:	dfc00815 	stw	ra,32(sp)
 80041f0:	ddc00715 	stw	r23,28(sp)
 80041f4:	dd800615 	stw	r22,24(sp)
 80041f8:	dd400515 	stw	r21,20(sp)
 80041fc:	dd000415 	stw	r20,16(sp)
 8004200:	dcc00315 	stw	r19,12(sp)
 8004204:	dc400115 	stw	r17,4(sp)
 8004208:	dc000015 	stw	r16,0(sp)
 800420c:	14807116 	blt	r2,r18,80043d4 <quorem+0x1f8>
 8004210:	94bfffc4 	addi	r18,r18,-1
 8004214:	94ad883a 	add	r22,r18,r18
 8004218:	b5ad883a 	add	r22,r22,r22
 800421c:	2c400504 	addi	r17,r5,20
 8004220:	8da9883a 	add	r20,r17,r22
 8004224:	25400504 	addi	r21,r4,20
 8004228:	282f883a 	mov	r23,r5
 800422c:	adad883a 	add	r22,r21,r22
 8004230:	a1400017 	ldw	r5,0(r20)
 8004234:	2021883a 	mov	r16,r4
 8004238:	b1000017 	ldw	r4,0(r22)
 800423c:	29400044 	addi	r5,r5,1
 8004240:	800bc100 	call	800bc10 <__udivsi3>
 8004244:	1027883a 	mov	r19,r2
 8004248:	10002c26 	beq	r2,zero,80042fc <quorem+0x120>
 800424c:	a813883a 	mov	r9,r21
 8004250:	8811883a 	mov	r8,r17
 8004254:	0009883a 	mov	r4,zero
 8004258:	000d883a 	mov	r6,zero
 800425c:	41c00017 	ldw	r7,0(r8)
 8004260:	49400017 	ldw	r5,0(r9)
 8004264:	42000104 	addi	r8,r8,4
 8004268:	38bfffcc 	andi	r2,r7,65535
 800426c:	14c5383a 	mul	r2,r2,r19
 8004270:	380ed43a 	srli	r7,r7,16
 8004274:	28ffffcc 	andi	r3,r5,65535
 8004278:	2085883a 	add	r2,r4,r2
 800427c:	1008d43a 	srli	r4,r2,16
 8004280:	3ccf383a 	mul	r7,r7,r19
 8004284:	198d883a 	add	r6,r3,r6
 8004288:	10ffffcc 	andi	r3,r2,65535
 800428c:	30c7c83a 	sub	r3,r6,r3
 8004290:	280ad43a 	srli	r5,r5,16
 8004294:	21c9883a 	add	r4,r4,r7
 8004298:	180dd43a 	srai	r6,r3,16
 800429c:	20bfffcc 	andi	r2,r4,65535
 80042a0:	288bc83a 	sub	r5,r5,r2
 80042a4:	298b883a 	add	r5,r5,r6
 80042a8:	280e943a 	slli	r7,r5,16
 80042ac:	18ffffcc 	andi	r3,r3,65535
 80042b0:	2008d43a 	srli	r4,r4,16
 80042b4:	38ceb03a 	or	r7,r7,r3
 80042b8:	49c00015 	stw	r7,0(r9)
 80042bc:	280dd43a 	srai	r6,r5,16
 80042c0:	4a400104 	addi	r9,r9,4
 80042c4:	a23fe52e 	bgeu	r20,r8,800425c <__alt_data_end+0xfc00425c>
 80042c8:	b0800017 	ldw	r2,0(r22)
 80042cc:	10000b1e 	bne	r2,zero,80042fc <quorem+0x120>
 80042d0:	b0bfff04 	addi	r2,r22,-4
 80042d4:	a880082e 	bgeu	r21,r2,80042f8 <quorem+0x11c>
 80042d8:	b0ffff17 	ldw	r3,-4(r22)
 80042dc:	18000326 	beq	r3,zero,80042ec <quorem+0x110>
 80042e0:	00000506 	br	80042f8 <quorem+0x11c>
 80042e4:	10c00017 	ldw	r3,0(r2)
 80042e8:	1800031e 	bne	r3,zero,80042f8 <quorem+0x11c>
 80042ec:	10bfff04 	addi	r2,r2,-4
 80042f0:	94bfffc4 	addi	r18,r18,-1
 80042f4:	a8bffb36 	bltu	r21,r2,80042e4 <__alt_data_end+0xfc0042e4>
 80042f8:	84800415 	stw	r18,16(r16)
 80042fc:	8009883a 	mov	r4,r16
 8004300:	b80b883a 	mov	r5,r23
 8004304:	80082c40 	call	80082c4 <__mcmp>
 8004308:	10002616 	blt	r2,zero,80043a4 <quorem+0x1c8>
 800430c:	9cc00044 	addi	r19,r19,1
 8004310:	a80d883a 	mov	r6,r21
 8004314:	000b883a 	mov	r5,zero
 8004318:	31000017 	ldw	r4,0(r6)
 800431c:	88800017 	ldw	r2,0(r17)
 8004320:	31800104 	addi	r6,r6,4
 8004324:	20ffffcc 	andi	r3,r4,65535
 8004328:	194b883a 	add	r5,r3,r5
 800432c:	10ffffcc 	andi	r3,r2,65535
 8004330:	28c7c83a 	sub	r3,r5,r3
 8004334:	1004d43a 	srli	r2,r2,16
 8004338:	2008d43a 	srli	r4,r4,16
 800433c:	180bd43a 	srai	r5,r3,16
 8004340:	18ffffcc 	andi	r3,r3,65535
 8004344:	2089c83a 	sub	r4,r4,r2
 8004348:	2149883a 	add	r4,r4,r5
 800434c:	2004943a 	slli	r2,r4,16
 8004350:	8c400104 	addi	r17,r17,4
 8004354:	200bd43a 	srai	r5,r4,16
 8004358:	10c6b03a 	or	r3,r2,r3
 800435c:	30ffff15 	stw	r3,-4(r6)
 8004360:	a47fed2e 	bgeu	r20,r17,8004318 <__alt_data_end+0xfc004318>
 8004364:	9485883a 	add	r2,r18,r18
 8004368:	1085883a 	add	r2,r2,r2
 800436c:	a887883a 	add	r3,r21,r2
 8004370:	18800017 	ldw	r2,0(r3)
 8004374:	10000b1e 	bne	r2,zero,80043a4 <quorem+0x1c8>
 8004378:	18bfff04 	addi	r2,r3,-4
 800437c:	a880082e 	bgeu	r21,r2,80043a0 <quorem+0x1c4>
 8004380:	18ffff17 	ldw	r3,-4(r3)
 8004384:	18000326 	beq	r3,zero,8004394 <quorem+0x1b8>
 8004388:	00000506 	br	80043a0 <quorem+0x1c4>
 800438c:	10c00017 	ldw	r3,0(r2)
 8004390:	1800031e 	bne	r3,zero,80043a0 <quorem+0x1c4>
 8004394:	10bfff04 	addi	r2,r2,-4
 8004398:	94bfffc4 	addi	r18,r18,-1
 800439c:	a8bffb36 	bltu	r21,r2,800438c <__alt_data_end+0xfc00438c>
 80043a0:	84800415 	stw	r18,16(r16)
 80043a4:	9805883a 	mov	r2,r19
 80043a8:	dfc00817 	ldw	ra,32(sp)
 80043ac:	ddc00717 	ldw	r23,28(sp)
 80043b0:	dd800617 	ldw	r22,24(sp)
 80043b4:	dd400517 	ldw	r21,20(sp)
 80043b8:	dd000417 	ldw	r20,16(sp)
 80043bc:	dcc00317 	ldw	r19,12(sp)
 80043c0:	dc800217 	ldw	r18,8(sp)
 80043c4:	dc400117 	ldw	r17,4(sp)
 80043c8:	dc000017 	ldw	r16,0(sp)
 80043cc:	dec00904 	addi	sp,sp,36
 80043d0:	f800283a 	ret
 80043d4:	0005883a 	mov	r2,zero
 80043d8:	003ff306 	br	80043a8 <__alt_data_end+0xfc0043a8>

080043dc <_dtoa_r>:
 80043dc:	20801017 	ldw	r2,64(r4)
 80043e0:	deffde04 	addi	sp,sp,-136
 80043e4:	dd401d15 	stw	r21,116(sp)
 80043e8:	dcc01b15 	stw	r19,108(sp)
 80043ec:	dc801a15 	stw	r18,104(sp)
 80043f0:	dc401915 	stw	r17,100(sp)
 80043f4:	dc001815 	stw	r16,96(sp)
 80043f8:	dfc02115 	stw	ra,132(sp)
 80043fc:	df002015 	stw	fp,128(sp)
 8004400:	ddc01f15 	stw	r23,124(sp)
 8004404:	dd801e15 	stw	r22,120(sp)
 8004408:	dd001c15 	stw	r20,112(sp)
 800440c:	d9c00315 	stw	r7,12(sp)
 8004410:	2021883a 	mov	r16,r4
 8004414:	302b883a 	mov	r21,r6
 8004418:	2825883a 	mov	r18,r5
 800441c:	dc402417 	ldw	r17,144(sp)
 8004420:	3027883a 	mov	r19,r6
 8004424:	10000826 	beq	r2,zero,8004448 <_dtoa_r+0x6c>
 8004428:	21801117 	ldw	r6,68(r4)
 800442c:	00c00044 	movi	r3,1
 8004430:	100b883a 	mov	r5,r2
 8004434:	1986983a 	sll	r3,r3,r6
 8004438:	11800115 	stw	r6,4(r2)
 800443c:	10c00215 	stw	r3,8(r2)
 8004440:	8007aac0 	call	8007aac <_Bfree>
 8004444:	80001015 	stw	zero,64(r16)
 8004448:	a8002d16 	blt	r21,zero,8004500 <_dtoa_r+0x124>
 800444c:	88000015 	stw	zero,0(r17)
 8004450:	a8dffc2c 	andhi	r3,r21,32752
 8004454:	009ffc34 	movhi	r2,32752
 8004458:	18801b26 	beq	r3,r2,80044c8 <_dtoa_r+0xec>
 800445c:	9009883a 	mov	r4,r18
 8004460:	980b883a 	mov	r5,r19
 8004464:	000d883a 	mov	r6,zero
 8004468:	000f883a 	mov	r7,zero
 800446c:	800cd880 	call	800cd88 <__eqdf2>
 8004470:	10002a1e 	bne	r2,zero,800451c <_dtoa_r+0x140>
 8004474:	d8c02317 	ldw	r3,140(sp)
 8004478:	d9002517 	ldw	r4,148(sp)
 800447c:	00800044 	movi	r2,1
 8004480:	18800015 	stw	r2,0(r3)
 8004484:	2001a226 	beq	r4,zero,8004b10 <_dtoa_r+0x734>
 8004488:	008200b4 	movhi	r2,2050
 800448c:	10ae3244 	addi	r2,r2,-18231
 8004490:	20800015 	stw	r2,0(r4)
 8004494:	10bfffc4 	addi	r2,r2,-1
 8004498:	dfc02117 	ldw	ra,132(sp)
 800449c:	df002017 	ldw	fp,128(sp)
 80044a0:	ddc01f17 	ldw	r23,124(sp)
 80044a4:	dd801e17 	ldw	r22,120(sp)
 80044a8:	dd401d17 	ldw	r21,116(sp)
 80044ac:	dd001c17 	ldw	r20,112(sp)
 80044b0:	dcc01b17 	ldw	r19,108(sp)
 80044b4:	dc801a17 	ldw	r18,104(sp)
 80044b8:	dc401917 	ldw	r17,100(sp)
 80044bc:	dc001817 	ldw	r16,96(sp)
 80044c0:	dec02204 	addi	sp,sp,136
 80044c4:	f800283a 	ret
 80044c8:	d8c02317 	ldw	r3,140(sp)
 80044cc:	0089c3c4 	movi	r2,9999
 80044d0:	18800015 	stw	r2,0(r3)
 80044d4:	90017c26 	beq	r18,zero,8004ac8 <_dtoa_r+0x6ec>
 80044d8:	008200b4 	movhi	r2,2050
 80044dc:	10ae3e04 	addi	r2,r2,-18184
 80044e0:	d9002517 	ldw	r4,148(sp)
 80044e4:	203fec26 	beq	r4,zero,8004498 <__alt_data_end+0xfc004498>
 80044e8:	10c000c7 	ldb	r3,3(r2)
 80044ec:	18017d1e 	bne	r3,zero,8004ae4 <_dtoa_r+0x708>
 80044f0:	10c000c4 	addi	r3,r2,3
 80044f4:	d9802517 	ldw	r6,148(sp)
 80044f8:	30c00015 	stw	r3,0(r6)
 80044fc:	003fe606 	br	8004498 <__alt_data_end+0xfc004498>
 8004500:	04e00034 	movhi	r19,32768
 8004504:	9cffffc4 	addi	r19,r19,-1
 8004508:	00800044 	movi	r2,1
 800450c:	ace6703a 	and	r19,r21,r19
 8004510:	88800015 	stw	r2,0(r17)
 8004514:	982b883a 	mov	r21,r19
 8004518:	003fcd06 	br	8004450 <__alt_data_end+0xfc004450>
 800451c:	d8800204 	addi	r2,sp,8
 8004520:	a822d53a 	srli	r17,r21,20
 8004524:	d8800015 	stw	r2,0(sp)
 8004528:	8009883a 	mov	r4,r16
 800452c:	900b883a 	mov	r5,r18
 8004530:	980d883a 	mov	r6,r19
 8004534:	d9c00104 	addi	r7,sp,4
 8004538:	80086380 	call	8008638 <__d2b>
 800453c:	1039883a 	mov	fp,r2
 8004540:	88016a1e 	bne	r17,zero,8004aec <_dtoa_r+0x710>
 8004544:	dd000217 	ldw	r20,8(sp)
 8004548:	dc400117 	ldw	r17,4(sp)
 800454c:	00befbc4 	movi	r2,-1041
 8004550:	a463883a 	add	r17,r20,r17
 8004554:	8882ea16 	blt	r17,r2,8005100 <_dtoa_r+0xd24>
 8004558:	00bf0384 	movi	r2,-1010
 800455c:	1445c83a 	sub	r2,r2,r17
 8004560:	89010484 	addi	r4,r17,1042
 8004564:	a8aa983a 	sll	r21,r21,r2
 8004568:	9108d83a 	srl	r4,r18,r4
 800456c:	a908b03a 	or	r4,r21,r4
 8004570:	800e1180 	call	800e118 <__floatunsidf>
 8004574:	017f8434 	movhi	r5,65040
 8004578:	01800044 	movi	r6,1
 800457c:	1009883a 	mov	r4,r2
 8004580:	194b883a 	add	r5,r3,r5
 8004584:	8c7fffc4 	addi	r17,r17,-1
 8004588:	d9800f15 	stw	r6,60(sp)
 800458c:	000d883a 	mov	r6,zero
 8004590:	01cffe34 	movhi	r7,16376
 8004594:	800d6f00 	call	800d6f0 <__subdf3>
 8004598:	0198dbf4 	movhi	r6,25455
 800459c:	01cff4f4 	movhi	r7,16339
 80045a0:	1009883a 	mov	r4,r2
 80045a4:	180b883a 	mov	r5,r3
 80045a8:	3190d844 	addi	r6,r6,17249
 80045ac:	39e1e9c4 	addi	r7,r7,-30809
 80045b0:	800cfcc0 	call	800cfcc <__muldf3>
 80045b4:	01a2d874 	movhi	r6,35681
 80045b8:	01cff1f4 	movhi	r7,16327
 80045bc:	180b883a 	mov	r5,r3
 80045c0:	31b22cc4 	addi	r6,r6,-14157
 80045c4:	39e28a04 	addi	r7,r7,-30168
 80045c8:	1009883a 	mov	r4,r2
 80045cc:	800bc200 	call	800bc20 <__adddf3>
 80045d0:	8809883a 	mov	r4,r17
 80045d4:	102d883a 	mov	r22,r2
 80045d8:	182b883a 	mov	r21,r3
 80045dc:	800e0480 	call	800e048 <__floatsidf>
 80045e0:	019427f4 	movhi	r6,20639
 80045e4:	01cff4f4 	movhi	r7,16339
 80045e8:	1009883a 	mov	r4,r2
 80045ec:	180b883a 	mov	r5,r3
 80045f0:	319e7ec4 	addi	r6,r6,31227
 80045f4:	39d104c4 	addi	r7,r7,17427
 80045f8:	800cfcc0 	call	800cfcc <__muldf3>
 80045fc:	b009883a 	mov	r4,r22
 8004600:	a80b883a 	mov	r5,r21
 8004604:	100d883a 	mov	r6,r2
 8004608:	180f883a 	mov	r7,r3
 800460c:	800bc200 	call	800bc20 <__adddf3>
 8004610:	1009883a 	mov	r4,r2
 8004614:	180b883a 	mov	r5,r3
 8004618:	102d883a 	mov	r22,r2
 800461c:	182b883a 	mov	r21,r3
 8004620:	800dfc00 	call	800dfc0 <__fixdfsi>
 8004624:	b009883a 	mov	r4,r22
 8004628:	a80b883a 	mov	r5,r21
 800462c:	000d883a 	mov	r6,zero
 8004630:	000f883a 	mov	r7,zero
 8004634:	d8800515 	stw	r2,20(sp)
 8004638:	800ceec0 	call	800ceec <__ledf2>
 800463c:	10023116 	blt	r2,zero,8004f04 <_dtoa_r+0xb28>
 8004640:	d8c00517 	ldw	r3,20(sp)
 8004644:	00800584 	movi	r2,22
 8004648:	10c21f36 	bltu	r2,r3,8004ec8 <_dtoa_r+0xaec>
 800464c:	180490fa 	slli	r2,r3,3
 8004650:	00c200b4 	movhi	r3,2050
 8004654:	18ee5a04 	addi	r3,r3,-18072
 8004658:	1885883a 	add	r2,r3,r2
 800465c:	11000017 	ldw	r4,0(r2)
 8004660:	11400117 	ldw	r5,4(r2)
 8004664:	900d883a 	mov	r6,r18
 8004668:	980f883a 	mov	r7,r19
 800466c:	800ce0c0 	call	800ce0c <__gedf2>
 8004670:	0082a70e 	bge	zero,r2,8005110 <_dtoa_r+0xd34>
 8004674:	d9000517 	ldw	r4,20(sp)
 8004678:	d8000c15 	stw	zero,48(sp)
 800467c:	213fffc4 	addi	r4,r4,-1
 8004680:	d9000515 	stw	r4,20(sp)
 8004684:	a463c83a 	sub	r17,r20,r17
 8004688:	8dbfffc4 	addi	r22,r17,-1
 800468c:	b0021916 	blt	r22,zero,8004ef4 <_dtoa_r+0xb18>
 8004690:	d8000815 	stw	zero,32(sp)
 8004694:	d8800517 	ldw	r2,20(sp)
 8004698:	10020e16 	blt	r2,zero,8004ed4 <_dtoa_r+0xaf8>
 800469c:	b0ad883a 	add	r22,r22,r2
 80046a0:	d8800a15 	stw	r2,40(sp)
 80046a4:	d8000915 	stw	zero,36(sp)
 80046a8:	d8c00317 	ldw	r3,12(sp)
 80046ac:	00800244 	movi	r2,9
 80046b0:	10c11a36 	bltu	r2,r3,8004b1c <_dtoa_r+0x740>
 80046b4:	00800144 	movi	r2,5
 80046b8:	10c4fc0e 	bge	r2,r3,8005aac <_dtoa_r+0x16d0>
 80046bc:	18ffff04 	addi	r3,r3,-4
 80046c0:	d8c00315 	stw	r3,12(sp)
 80046c4:	0029883a 	mov	r20,zero
 80046c8:	d9800317 	ldw	r6,12(sp)
 80046cc:	008000c4 	movi	r2,3
 80046d0:	3083bd26 	beq	r6,r2,80055c8 <_dtoa_r+0x11ec>
 80046d4:	1183670e 	bge	r2,r6,8005474 <_dtoa_r+0x1098>
 80046d8:	d8c00317 	ldw	r3,12(sp)
 80046dc:	00800104 	movi	r2,4
 80046e0:	1882e726 	beq	r3,r2,8005280 <_dtoa_r+0xea4>
 80046e4:	00800144 	movi	r2,5
 80046e8:	1884f21e 	bne	r3,r2,8005ab4 <_dtoa_r+0x16d8>
 80046ec:	00800044 	movi	r2,1
 80046f0:	d8800b15 	stw	r2,44(sp)
 80046f4:	d8c02217 	ldw	r3,136(sp)
 80046f8:	d9000517 	ldw	r4,20(sp)
 80046fc:	1907883a 	add	r3,r3,r4
 8004700:	19800044 	addi	r6,r3,1
 8004704:	d8c00d15 	stw	r3,52(sp)
 8004708:	d9800615 	stw	r6,24(sp)
 800470c:	0183c30e 	bge	zero,r6,800561c <_dtoa_r+0x1240>
 8004710:	d9800617 	ldw	r6,24(sp)
 8004714:	3023883a 	mov	r17,r6
 8004718:	80001115 	stw	zero,68(r16)
 800471c:	008005c4 	movi	r2,23
 8004720:	1184f62e 	bgeu	r2,r6,8005afc <_dtoa_r+0x1720>
 8004724:	00c00044 	movi	r3,1
 8004728:	00800104 	movi	r2,4
 800472c:	1085883a 	add	r2,r2,r2
 8004730:	11000504 	addi	r4,r2,20
 8004734:	180b883a 	mov	r5,r3
 8004738:	18c00044 	addi	r3,r3,1
 800473c:	313ffb2e 	bgeu	r6,r4,800472c <__alt_data_end+0xfc00472c>
 8004740:	81401115 	stw	r5,68(r16)
 8004744:	8009883a 	mov	r4,r16
 8004748:	8007a040 	call	8007a04 <_Balloc>
 800474c:	d8800715 	stw	r2,28(sp)
 8004750:	80801015 	stw	r2,64(r16)
 8004754:	00800384 	movi	r2,14
 8004758:	1440fd36 	bltu	r2,r17,8004b50 <_dtoa_r+0x774>
 800475c:	a000fc26 	beq	r20,zero,8004b50 <_dtoa_r+0x774>
 8004760:	d8800517 	ldw	r2,20(sp)
 8004764:	0083b90e 	bge	zero,r2,800564c <_dtoa_r+0x1270>
 8004768:	d8c00517 	ldw	r3,20(sp)
 800476c:	108003cc 	andi	r2,r2,15
 8004770:	100490fa 	slli	r2,r2,3
 8004774:	182fd13a 	srai	r23,r3,4
 8004778:	00c200b4 	movhi	r3,2050
 800477c:	18ee5a04 	addi	r3,r3,-18072
 8004780:	1885883a 	add	r2,r3,r2
 8004784:	b8c0040c 	andi	r3,r23,16
 8004788:	12c00017 	ldw	r11,0(r2)
 800478c:	12800117 	ldw	r10,4(r2)
 8004790:	18039726 	beq	r3,zero,80055f0 <_dtoa_r+0x1214>
 8004794:	008200b4 	movhi	r2,2050
 8004798:	10ae5004 	addi	r2,r2,-18112
 800479c:	11800817 	ldw	r6,32(r2)
 80047a0:	11c00917 	ldw	r7,36(r2)
 80047a4:	9009883a 	mov	r4,r18
 80047a8:	980b883a 	mov	r5,r19
 80047ac:	da801615 	stw	r10,88(sp)
 80047b0:	dac01515 	stw	r11,84(sp)
 80047b4:	800c4bc0 	call	800c4bc <__divdf3>
 80047b8:	da801617 	ldw	r10,88(sp)
 80047bc:	dac01517 	ldw	r11,84(sp)
 80047c0:	bdc003cc 	andi	r23,r23,15
 80047c4:	044000c4 	movi	r17,3
 80047c8:	d8800e15 	stw	r2,56(sp)
 80047cc:	182b883a 	mov	r21,r3
 80047d0:	b8001126 	beq	r23,zero,8004818 <_dtoa_r+0x43c>
 80047d4:	050200b4 	movhi	r20,2050
 80047d8:	a52e5004 	addi	r20,r20,-18112
 80047dc:	5805883a 	mov	r2,r11
 80047e0:	5007883a 	mov	r3,r10
 80047e4:	b980004c 	andi	r6,r23,1
 80047e8:	1009883a 	mov	r4,r2
 80047ec:	b82fd07a 	srai	r23,r23,1
 80047f0:	180b883a 	mov	r5,r3
 80047f4:	30000426 	beq	r6,zero,8004808 <_dtoa_r+0x42c>
 80047f8:	a1800017 	ldw	r6,0(r20)
 80047fc:	a1c00117 	ldw	r7,4(r20)
 8004800:	8c400044 	addi	r17,r17,1
 8004804:	800cfcc0 	call	800cfcc <__muldf3>
 8004808:	a5000204 	addi	r20,r20,8
 800480c:	b83ff51e 	bne	r23,zero,80047e4 <__alt_data_end+0xfc0047e4>
 8004810:	1017883a 	mov	r11,r2
 8004814:	1815883a 	mov	r10,r3
 8004818:	d9000e17 	ldw	r4,56(sp)
 800481c:	a80b883a 	mov	r5,r21
 8004820:	580d883a 	mov	r6,r11
 8004824:	500f883a 	mov	r7,r10
 8004828:	800c4bc0 	call	800c4bc <__divdf3>
 800482c:	1029883a 	mov	r20,r2
 8004830:	182b883a 	mov	r21,r3
 8004834:	d9800c17 	ldw	r6,48(sp)
 8004838:	30000626 	beq	r6,zero,8004854 <_dtoa_r+0x478>
 800483c:	a009883a 	mov	r4,r20
 8004840:	a80b883a 	mov	r5,r21
 8004844:	000d883a 	mov	r6,zero
 8004848:	01cffc34 	movhi	r7,16368
 800484c:	800ceec0 	call	800ceec <__ledf2>
 8004850:	10043216 	blt	r2,zero,800591c <_dtoa_r+0x1540>
 8004854:	8809883a 	mov	r4,r17
 8004858:	800e0480 	call	800e048 <__floatsidf>
 800485c:	1009883a 	mov	r4,r2
 8004860:	180b883a 	mov	r5,r3
 8004864:	a00d883a 	mov	r6,r20
 8004868:	a80f883a 	mov	r7,r21
 800486c:	800cfcc0 	call	800cfcc <__muldf3>
 8004870:	000d883a 	mov	r6,zero
 8004874:	1009883a 	mov	r4,r2
 8004878:	180b883a 	mov	r5,r3
 800487c:	01d00734 	movhi	r7,16412
 8004880:	800bc200 	call	800bc20 <__adddf3>
 8004884:	1023883a 	mov	r17,r2
 8004888:	d9800617 	ldw	r6,24(sp)
 800488c:	00bf3034 	movhi	r2,64704
 8004890:	1885883a 	add	r2,r3,r2
 8004894:	d8800e15 	stw	r2,56(sp)
 8004898:	30032e26 	beq	r6,zero,8005554 <_dtoa_r+0x1178>
 800489c:	d8c00517 	ldw	r3,20(sp)
 80048a0:	da800617 	ldw	r10,24(sp)
 80048a4:	d8c01215 	stw	r3,72(sp)
 80048a8:	d9000b17 	ldw	r4,44(sp)
 80048ac:	2003b026 	beq	r4,zero,8005770 <_dtoa_r+0x1394>
 80048b0:	50bfffc4 	addi	r2,r10,-1
 80048b4:	100490fa 	slli	r2,r2,3
 80048b8:	00c200b4 	movhi	r3,2050
 80048bc:	18ee5a04 	addi	r3,r3,-18072
 80048c0:	1885883a 	add	r2,r3,r2
 80048c4:	11800017 	ldw	r6,0(r2)
 80048c8:	11c00117 	ldw	r7,4(r2)
 80048cc:	d8800717 	ldw	r2,28(sp)
 80048d0:	0009883a 	mov	r4,zero
 80048d4:	014ff834 	movhi	r5,16352
 80048d8:	da801615 	stw	r10,88(sp)
 80048dc:	15c00044 	addi	r23,r2,1
 80048e0:	800c4bc0 	call	800c4bc <__divdf3>
 80048e4:	d9c00e17 	ldw	r7,56(sp)
 80048e8:	880d883a 	mov	r6,r17
 80048ec:	1009883a 	mov	r4,r2
 80048f0:	180b883a 	mov	r5,r3
 80048f4:	800d6f00 	call	800d6f0 <__subdf3>
 80048f8:	a80b883a 	mov	r5,r21
 80048fc:	a009883a 	mov	r4,r20
 8004900:	d8c01015 	stw	r3,64(sp)
 8004904:	d8800e15 	stw	r2,56(sp)
 8004908:	800dfc00 	call	800dfc0 <__fixdfsi>
 800490c:	1009883a 	mov	r4,r2
 8004910:	d8801715 	stw	r2,92(sp)
 8004914:	800e0480 	call	800e048 <__floatsidf>
 8004918:	a009883a 	mov	r4,r20
 800491c:	a80b883a 	mov	r5,r21
 8004920:	100d883a 	mov	r6,r2
 8004924:	180f883a 	mov	r7,r3
 8004928:	800d6f00 	call	800d6f0 <__subdf3>
 800492c:	da001717 	ldw	r8,92(sp)
 8004930:	1829883a 	mov	r20,r3
 8004934:	d8c00717 	ldw	r3,28(sp)
 8004938:	d9000e17 	ldw	r4,56(sp)
 800493c:	d9401017 	ldw	r5,64(sp)
 8004940:	42000c04 	addi	r8,r8,48
 8004944:	1023883a 	mov	r17,r2
 8004948:	1a000005 	stb	r8,0(r3)
 800494c:	880d883a 	mov	r6,r17
 8004950:	a00f883a 	mov	r7,r20
 8004954:	402b883a 	mov	r21,r8
 8004958:	800ce0c0 	call	800ce0c <__gedf2>
 800495c:	00844516 	blt	zero,r2,8005a74 <_dtoa_r+0x1698>
 8004960:	0009883a 	mov	r4,zero
 8004964:	014ffc34 	movhi	r5,16368
 8004968:	880d883a 	mov	r6,r17
 800496c:	a00f883a 	mov	r7,r20
 8004970:	800d6f00 	call	800d6f0 <__subdf3>
 8004974:	d9000e17 	ldw	r4,56(sp)
 8004978:	d9401017 	ldw	r5,64(sp)
 800497c:	100d883a 	mov	r6,r2
 8004980:	180f883a 	mov	r7,r3
 8004984:	800ce0c0 	call	800ce0c <__gedf2>
 8004988:	da801617 	ldw	r10,88(sp)
 800498c:	00843616 	blt	zero,r2,8005a68 <_dtoa_r+0x168c>
 8004990:	00800044 	movi	r2,1
 8004994:	12806e0e 	bge	r2,r10,8004b50 <_dtoa_r+0x774>
 8004998:	d9000717 	ldw	r4,28(sp)
 800499c:	dd801315 	stw	r22,76(sp)
 80049a0:	dc001115 	stw	r16,68(sp)
 80049a4:	2295883a 	add	r10,r4,r10
 80049a8:	dcc01415 	stw	r19,80(sp)
 80049ac:	502d883a 	mov	r22,r10
 80049b0:	dcc01017 	ldw	r19,64(sp)
 80049b4:	b821883a 	mov	r16,r23
 80049b8:	dc801015 	stw	r18,64(sp)
 80049bc:	dc800e17 	ldw	r18,56(sp)
 80049c0:	00000906 	br	80049e8 <_dtoa_r+0x60c>
 80049c4:	800d6f00 	call	800d6f0 <__subdf3>
 80049c8:	1009883a 	mov	r4,r2
 80049cc:	180b883a 	mov	r5,r3
 80049d0:	900d883a 	mov	r6,r18
 80049d4:	980f883a 	mov	r7,r19
 80049d8:	800ceec0 	call	800ceec <__ledf2>
 80049dc:	10040e16 	blt	r2,zero,8005a18 <_dtoa_r+0x163c>
 80049e0:	b821883a 	mov	r16,r23
 80049e4:	bd841026 	beq	r23,r22,8005a28 <_dtoa_r+0x164c>
 80049e8:	9009883a 	mov	r4,r18
 80049ec:	980b883a 	mov	r5,r19
 80049f0:	000d883a 	mov	r6,zero
 80049f4:	01d00934 	movhi	r7,16420
 80049f8:	800cfcc0 	call	800cfcc <__muldf3>
 80049fc:	000d883a 	mov	r6,zero
 8004a00:	01d00934 	movhi	r7,16420
 8004a04:	8809883a 	mov	r4,r17
 8004a08:	a00b883a 	mov	r5,r20
 8004a0c:	1025883a 	mov	r18,r2
 8004a10:	1827883a 	mov	r19,r3
 8004a14:	800cfcc0 	call	800cfcc <__muldf3>
 8004a18:	180b883a 	mov	r5,r3
 8004a1c:	1009883a 	mov	r4,r2
 8004a20:	1823883a 	mov	r17,r3
 8004a24:	1029883a 	mov	r20,r2
 8004a28:	800dfc00 	call	800dfc0 <__fixdfsi>
 8004a2c:	1009883a 	mov	r4,r2
 8004a30:	102b883a 	mov	r21,r2
 8004a34:	800e0480 	call	800e048 <__floatsidf>
 8004a38:	a009883a 	mov	r4,r20
 8004a3c:	880b883a 	mov	r5,r17
 8004a40:	100d883a 	mov	r6,r2
 8004a44:	180f883a 	mov	r7,r3
 8004a48:	800d6f00 	call	800d6f0 <__subdf3>
 8004a4c:	ad400c04 	addi	r21,r21,48
 8004a50:	1009883a 	mov	r4,r2
 8004a54:	180b883a 	mov	r5,r3
 8004a58:	900d883a 	mov	r6,r18
 8004a5c:	980f883a 	mov	r7,r19
 8004a60:	85400005 	stb	r21,0(r16)
 8004a64:	1023883a 	mov	r17,r2
 8004a68:	1829883a 	mov	r20,r3
 8004a6c:	800ceec0 	call	800ceec <__ledf2>
 8004a70:	bdc00044 	addi	r23,r23,1
 8004a74:	0009883a 	mov	r4,zero
 8004a78:	014ffc34 	movhi	r5,16368
 8004a7c:	880d883a 	mov	r6,r17
 8004a80:	a00f883a 	mov	r7,r20
 8004a84:	103fcf0e 	bge	r2,zero,80049c4 <__alt_data_end+0xfc0049c4>
 8004a88:	d9801217 	ldw	r6,72(sp)
 8004a8c:	dc001117 	ldw	r16,68(sp)
 8004a90:	d9800515 	stw	r6,20(sp)
 8004a94:	8009883a 	mov	r4,r16
 8004a98:	e00b883a 	mov	r5,fp
 8004a9c:	8007aac0 	call	8007aac <_Bfree>
 8004aa0:	d8c00517 	ldw	r3,20(sp)
 8004aa4:	d9002317 	ldw	r4,140(sp)
 8004aa8:	d9802517 	ldw	r6,148(sp)
 8004aac:	b8000005 	stb	zero,0(r23)
 8004ab0:	18800044 	addi	r2,r3,1
 8004ab4:	20800015 	stw	r2,0(r4)
 8004ab8:	30027226 	beq	r6,zero,8005484 <_dtoa_r+0x10a8>
 8004abc:	35c00015 	stw	r23,0(r6)
 8004ac0:	d8800717 	ldw	r2,28(sp)
 8004ac4:	003e7406 	br	8004498 <__alt_data_end+0xfc004498>
 8004ac8:	00800434 	movhi	r2,16
 8004acc:	10bfffc4 	addi	r2,r2,-1
 8004ad0:	a8aa703a 	and	r21,r21,r2
 8004ad4:	a83e801e 	bne	r21,zero,80044d8 <__alt_data_end+0xfc0044d8>
 8004ad8:	008200b4 	movhi	r2,2050
 8004adc:	10ae3b04 	addi	r2,r2,-18196
 8004ae0:	003e7f06 	br	80044e0 <__alt_data_end+0xfc0044e0>
 8004ae4:	10c00204 	addi	r3,r2,8
 8004ae8:	003e8206 	br	80044f4 <__alt_data_end+0xfc0044f4>
 8004aec:	01400434 	movhi	r5,16
 8004af0:	297fffc4 	addi	r5,r5,-1
 8004af4:	994a703a 	and	r5,r19,r5
 8004af8:	9009883a 	mov	r4,r18
 8004afc:	8c7f0044 	addi	r17,r17,-1023
 8004b00:	294ffc34 	orhi	r5,r5,16368
 8004b04:	dd000217 	ldw	r20,8(sp)
 8004b08:	d8000f15 	stw	zero,60(sp)
 8004b0c:	003e9f06 	br	800458c <__alt_data_end+0xfc00458c>
 8004b10:	008200b4 	movhi	r2,2050
 8004b14:	10ae3204 	addi	r2,r2,-18232
 8004b18:	003e5f06 	br	8004498 <__alt_data_end+0xfc004498>
 8004b1c:	80001115 	stw	zero,68(r16)
 8004b20:	8009883a 	mov	r4,r16
 8004b24:	000b883a 	mov	r5,zero
 8004b28:	8007a040 	call	8007a04 <_Balloc>
 8004b2c:	01bfffc4 	movi	r6,-1
 8004b30:	d8800715 	stw	r2,28(sp)
 8004b34:	80801015 	stw	r2,64(r16)
 8004b38:	00800044 	movi	r2,1
 8004b3c:	d9800615 	stw	r6,24(sp)
 8004b40:	d8800b15 	stw	r2,44(sp)
 8004b44:	d8002215 	stw	zero,136(sp)
 8004b48:	d9800d15 	stw	r6,52(sp)
 8004b4c:	d8000315 	stw	zero,12(sp)
 8004b50:	d8800117 	ldw	r2,4(sp)
 8004b54:	10008e16 	blt	r2,zero,8004d90 <_dtoa_r+0x9b4>
 8004b58:	d9000517 	ldw	r4,20(sp)
 8004b5c:	00c00384 	movi	r3,14
 8004b60:	19008b16 	blt	r3,r4,8004d90 <_dtoa_r+0x9b4>
 8004b64:	200490fa 	slli	r2,r4,3
 8004b68:	00c200b4 	movhi	r3,2050
 8004b6c:	d9802217 	ldw	r6,136(sp)
 8004b70:	18ee5a04 	addi	r3,r3,-18072
 8004b74:	1885883a 	add	r2,r3,r2
 8004b78:	14400017 	ldw	r17,0(r2)
 8004b7c:	15000117 	ldw	r20,4(r2)
 8004b80:	3001c716 	blt	r6,zero,80052a0 <_dtoa_r+0xec4>
 8004b84:	880d883a 	mov	r6,r17
 8004b88:	a00f883a 	mov	r7,r20
 8004b8c:	9009883a 	mov	r4,r18
 8004b90:	980b883a 	mov	r5,r19
 8004b94:	800c4bc0 	call	800c4bc <__divdf3>
 8004b98:	180b883a 	mov	r5,r3
 8004b9c:	1009883a 	mov	r4,r2
 8004ba0:	800dfc00 	call	800dfc0 <__fixdfsi>
 8004ba4:	1009883a 	mov	r4,r2
 8004ba8:	102d883a 	mov	r22,r2
 8004bac:	800e0480 	call	800e048 <__floatsidf>
 8004bb0:	1009883a 	mov	r4,r2
 8004bb4:	180b883a 	mov	r5,r3
 8004bb8:	880d883a 	mov	r6,r17
 8004bbc:	a00f883a 	mov	r7,r20
 8004bc0:	800cfcc0 	call	800cfcc <__muldf3>
 8004bc4:	9009883a 	mov	r4,r18
 8004bc8:	980b883a 	mov	r5,r19
 8004bcc:	100d883a 	mov	r6,r2
 8004bd0:	180f883a 	mov	r7,r3
 8004bd4:	800d6f00 	call	800d6f0 <__subdf3>
 8004bd8:	d9000717 	ldw	r4,28(sp)
 8004bdc:	d9800617 	ldw	r6,24(sp)
 8004be0:	180b883a 	mov	r5,r3
 8004be4:	b0c00c04 	addi	r3,r22,48
 8004be8:	20c00005 	stb	r3,0(r4)
 8004bec:	25c00044 	addi	r23,r4,1
 8004bf0:	01000044 	movi	r4,1
 8004bf4:	1011883a 	mov	r8,r2
 8004bf8:	2807883a 	mov	r3,r5
 8004bfc:	31003d26 	beq	r6,r4,8004cf4 <_dtoa_r+0x918>
 8004c00:	000d883a 	mov	r6,zero
 8004c04:	01d00934 	movhi	r7,16420
 8004c08:	1009883a 	mov	r4,r2
 8004c0c:	800cfcc0 	call	800cfcc <__muldf3>
 8004c10:	1009883a 	mov	r4,r2
 8004c14:	180b883a 	mov	r5,r3
 8004c18:	000d883a 	mov	r6,zero
 8004c1c:	000f883a 	mov	r7,zero
 8004c20:	1027883a 	mov	r19,r2
 8004c24:	182b883a 	mov	r21,r3
 8004c28:	800cd880 	call	800cd88 <__eqdf2>
 8004c2c:	103f9926 	beq	r2,zero,8004a94 <__alt_data_end+0xfc004a94>
 8004c30:	d8c00617 	ldw	r3,24(sp)
 8004c34:	d9000717 	ldw	r4,28(sp)
 8004c38:	b825883a 	mov	r18,r23
 8004c3c:	18bfffc4 	addi	r2,r3,-1
 8004c40:	20ad883a 	add	r22,r4,r2
 8004c44:	dc000315 	stw	r16,12(sp)
 8004c48:	00000a06 	br	8004c74 <_dtoa_r+0x898>
 8004c4c:	800cfcc0 	call	800cfcc <__muldf3>
 8004c50:	1009883a 	mov	r4,r2
 8004c54:	180b883a 	mov	r5,r3
 8004c58:	000d883a 	mov	r6,zero
 8004c5c:	000f883a 	mov	r7,zero
 8004c60:	1027883a 	mov	r19,r2
 8004c64:	182b883a 	mov	r21,r3
 8004c68:	b825883a 	mov	r18,r23
 8004c6c:	800cd880 	call	800cd88 <__eqdf2>
 8004c70:	10022626 	beq	r2,zero,800550c <_dtoa_r+0x1130>
 8004c74:	880d883a 	mov	r6,r17
 8004c78:	a00f883a 	mov	r7,r20
 8004c7c:	9809883a 	mov	r4,r19
 8004c80:	a80b883a 	mov	r5,r21
 8004c84:	800c4bc0 	call	800c4bc <__divdf3>
 8004c88:	180b883a 	mov	r5,r3
 8004c8c:	1009883a 	mov	r4,r2
 8004c90:	800dfc00 	call	800dfc0 <__fixdfsi>
 8004c94:	1009883a 	mov	r4,r2
 8004c98:	1021883a 	mov	r16,r2
 8004c9c:	800e0480 	call	800e048 <__floatsidf>
 8004ca0:	1009883a 	mov	r4,r2
 8004ca4:	180b883a 	mov	r5,r3
 8004ca8:	880d883a 	mov	r6,r17
 8004cac:	a00f883a 	mov	r7,r20
 8004cb0:	800cfcc0 	call	800cfcc <__muldf3>
 8004cb4:	9809883a 	mov	r4,r19
 8004cb8:	a80b883a 	mov	r5,r21
 8004cbc:	100d883a 	mov	r6,r2
 8004cc0:	180f883a 	mov	r7,r3
 8004cc4:	800d6f00 	call	800d6f0 <__subdf3>
 8004cc8:	82000c04 	addi	r8,r16,48
 8004ccc:	92000005 	stb	r8,0(r18)
 8004cd0:	1009883a 	mov	r4,r2
 8004cd4:	180b883a 	mov	r5,r3
 8004cd8:	000d883a 	mov	r6,zero
 8004cdc:	01d00934 	movhi	r7,16420
 8004ce0:	1011883a 	mov	r8,r2
 8004ce4:	bdc00044 	addi	r23,r23,1
 8004ce8:	95bfd81e 	bne	r18,r22,8004c4c <__alt_data_end+0xfc004c4c>
 8004cec:	802d883a 	mov	r22,r16
 8004cf0:	dc000317 	ldw	r16,12(sp)
 8004cf4:	4009883a 	mov	r4,r8
 8004cf8:	180b883a 	mov	r5,r3
 8004cfc:	400d883a 	mov	r6,r8
 8004d00:	180f883a 	mov	r7,r3
 8004d04:	800bc200 	call	800bc20 <__adddf3>
 8004d08:	8809883a 	mov	r4,r17
 8004d0c:	a00b883a 	mov	r5,r20
 8004d10:	100d883a 	mov	r6,r2
 8004d14:	180f883a 	mov	r7,r3
 8004d18:	1027883a 	mov	r19,r2
 8004d1c:	1825883a 	mov	r18,r3
 8004d20:	800ceec0 	call	800ceec <__ledf2>
 8004d24:	10000816 	blt	r2,zero,8004d48 <_dtoa_r+0x96c>
 8004d28:	8809883a 	mov	r4,r17
 8004d2c:	a00b883a 	mov	r5,r20
 8004d30:	980d883a 	mov	r6,r19
 8004d34:	900f883a 	mov	r7,r18
 8004d38:	800cd880 	call	800cd88 <__eqdf2>
 8004d3c:	103f551e 	bne	r2,zero,8004a94 <__alt_data_end+0xfc004a94>
 8004d40:	b580004c 	andi	r22,r22,1
 8004d44:	b03f5326 	beq	r22,zero,8004a94 <__alt_data_end+0xfc004a94>
 8004d48:	bd7fffc3 	ldbu	r21,-1(r23)
 8004d4c:	b8bfffc4 	addi	r2,r23,-1
 8004d50:	1007883a 	mov	r3,r2
 8004d54:	01400e44 	movi	r5,57
 8004d58:	d9800717 	ldw	r6,28(sp)
 8004d5c:	00000506 	br	8004d74 <_dtoa_r+0x998>
 8004d60:	18ffffc4 	addi	r3,r3,-1
 8004d64:	30825e26 	beq	r6,r2,80056e0 <_dtoa_r+0x1304>
 8004d68:	1d400003 	ldbu	r21,0(r3)
 8004d6c:	102f883a 	mov	r23,r2
 8004d70:	10bfffc4 	addi	r2,r2,-1
 8004d74:	a9003fcc 	andi	r4,r21,255
 8004d78:	2100201c 	xori	r4,r4,128
 8004d7c:	213fe004 	addi	r4,r4,-128
 8004d80:	217ff726 	beq	r4,r5,8004d60 <__alt_data_end+0xfc004d60>
 8004d84:	aa000044 	addi	r8,r21,1
 8004d88:	12000005 	stb	r8,0(r2)
 8004d8c:	003f4106 	br	8004a94 <__alt_data_end+0xfc004a94>
 8004d90:	d8c00b17 	ldw	r3,44(sp)
 8004d94:	18006726 	beq	r3,zero,8004f34 <_dtoa_r+0xb58>
 8004d98:	d9000317 	ldw	r4,12(sp)
 8004d9c:	00c00044 	movi	r3,1
 8004da0:	19016a0e 	bge	r3,r4,800534c <_dtoa_r+0xf70>
 8004da4:	d8800617 	ldw	r2,24(sp)
 8004da8:	d8c00917 	ldw	r3,36(sp)
 8004dac:	157fffc4 	addi	r21,r2,-1
 8004db0:	1d420716 	blt	r3,r21,80055d0 <_dtoa_r+0x11f4>
 8004db4:	1d6bc83a 	sub	r21,r3,r21
 8004db8:	d8800617 	ldw	r2,24(sp)
 8004dbc:	1002c716 	blt	r2,zero,80058dc <_dtoa_r+0x1500>
 8004dc0:	dd000817 	ldw	r20,32(sp)
 8004dc4:	d8800617 	ldw	r2,24(sp)
 8004dc8:	d9800817 	ldw	r6,32(sp)
 8004dcc:	8009883a 	mov	r4,r16
 8004dd0:	01400044 	movi	r5,1
 8004dd4:	308d883a 	add	r6,r6,r2
 8004dd8:	d9800815 	stw	r6,32(sp)
 8004ddc:	b0ad883a 	add	r22,r22,r2
 8004de0:	8007e040 	call	8007e04 <__i2b>
 8004de4:	1023883a 	mov	r17,r2
 8004de8:	a0000826 	beq	r20,zero,8004e0c <_dtoa_r+0xa30>
 8004dec:	0580070e 	bge	zero,r22,8004e0c <_dtoa_r+0xa30>
 8004df0:	b005883a 	mov	r2,r22
 8004df4:	a5812016 	blt	r20,r22,8005278 <_dtoa_r+0xe9c>
 8004df8:	d8c00817 	ldw	r3,32(sp)
 8004dfc:	a0a9c83a 	sub	r20,r20,r2
 8004e00:	b0adc83a 	sub	r22,r22,r2
 8004e04:	1887c83a 	sub	r3,r3,r2
 8004e08:	d8c00815 	stw	r3,32(sp)
 8004e0c:	d9000917 	ldw	r4,36(sp)
 8004e10:	0100140e 	bge	zero,r4,8004e64 <_dtoa_r+0xa88>
 8004e14:	d9800b17 	ldw	r6,44(sp)
 8004e18:	3001e526 	beq	r6,zero,80055b0 <_dtoa_r+0x11d4>
 8004e1c:	05400e0e 	bge	zero,r21,8004e58 <_dtoa_r+0xa7c>
 8004e20:	880b883a 	mov	r5,r17
 8004e24:	8009883a 	mov	r4,r16
 8004e28:	a80d883a 	mov	r6,r21
 8004e2c:	800803c0 	call	800803c <__pow5mult>
 8004e30:	e00d883a 	mov	r6,fp
 8004e34:	8009883a 	mov	r4,r16
 8004e38:	100b883a 	mov	r5,r2
 8004e3c:	1023883a 	mov	r17,r2
 8004e40:	8007e400 	call	8007e40 <__multiply>
 8004e44:	102f883a 	mov	r23,r2
 8004e48:	e00b883a 	mov	r5,fp
 8004e4c:	8009883a 	mov	r4,r16
 8004e50:	8007aac0 	call	8007aac <_Bfree>
 8004e54:	b839883a 	mov	fp,r23
 8004e58:	d8800917 	ldw	r2,36(sp)
 8004e5c:	154dc83a 	sub	r6,r2,r21
 8004e60:	3001281e 	bne	r6,zero,8005304 <_dtoa_r+0xf28>
 8004e64:	05c00044 	movi	r23,1
 8004e68:	8009883a 	mov	r4,r16
 8004e6c:	b80b883a 	mov	r5,r23
 8004e70:	8007e040 	call	8007e04 <__i2b>
 8004e74:	d8c00a17 	ldw	r3,40(sp)
 8004e78:	102b883a 	mov	r21,r2
 8004e7c:	00c0310e 	bge	zero,r3,8004f44 <_dtoa_r+0xb68>
 8004e80:	8009883a 	mov	r4,r16
 8004e84:	100b883a 	mov	r5,r2
 8004e88:	180d883a 	mov	r6,r3
 8004e8c:	800803c0 	call	800803c <__pow5mult>
 8004e90:	d9000317 	ldw	r4,12(sp)
 8004e94:	102b883a 	mov	r21,r2
 8004e98:	b9011f0e 	bge	r23,r4,8005318 <_dtoa_r+0xf3c>
 8004e9c:	0027883a 	mov	r19,zero
 8004ea0:	a8800417 	ldw	r2,16(r21)
 8004ea4:	10800104 	addi	r2,r2,4
 8004ea8:	1085883a 	add	r2,r2,r2
 8004eac:	1085883a 	add	r2,r2,r2
 8004eb0:	a885883a 	add	r2,r21,r2
 8004eb4:	11000017 	ldw	r4,0(r2)
 8004eb8:	8007cec0 	call	8007cec <__hi0bits>
 8004ebc:	00c00804 	movi	r3,32
 8004ec0:	1885c83a 	sub	r2,r3,r2
 8004ec4:	00002506 	br	8004f5c <_dtoa_r+0xb80>
 8004ec8:	01800044 	movi	r6,1
 8004ecc:	d9800c15 	stw	r6,48(sp)
 8004ed0:	003dec06 	br	8004684 <__alt_data_end+0xfc004684>
 8004ed4:	d8c00817 	ldw	r3,32(sp)
 8004ed8:	d9000517 	ldw	r4,20(sp)
 8004edc:	d8000a15 	stw	zero,40(sp)
 8004ee0:	1907c83a 	sub	r3,r3,r4
 8004ee4:	010dc83a 	sub	r6,zero,r4
 8004ee8:	d8c00815 	stw	r3,32(sp)
 8004eec:	d9800915 	stw	r6,36(sp)
 8004ef0:	003ded06 	br	80046a8 <__alt_data_end+0xfc0046a8>
 8004ef4:	05adc83a 	sub	r22,zero,r22
 8004ef8:	dd800815 	stw	r22,32(sp)
 8004efc:	002d883a 	mov	r22,zero
 8004f00:	003de406 	br	8004694 <__alt_data_end+0xfc004694>
 8004f04:	d9000517 	ldw	r4,20(sp)
 8004f08:	800e0480 	call	800e048 <__floatsidf>
 8004f0c:	1009883a 	mov	r4,r2
 8004f10:	180b883a 	mov	r5,r3
 8004f14:	b00d883a 	mov	r6,r22
 8004f18:	a80f883a 	mov	r7,r21
 8004f1c:	800cd880 	call	800cd88 <__eqdf2>
 8004f20:	103dc726 	beq	r2,zero,8004640 <__alt_data_end+0xfc004640>
 8004f24:	d8800517 	ldw	r2,20(sp)
 8004f28:	10bfffc4 	addi	r2,r2,-1
 8004f2c:	d8800515 	stw	r2,20(sp)
 8004f30:	003dc306 	br	8004640 <__alt_data_end+0xfc004640>
 8004f34:	dd400917 	ldw	r21,36(sp)
 8004f38:	dd000817 	ldw	r20,32(sp)
 8004f3c:	0023883a 	mov	r17,zero
 8004f40:	003fa906 	br	8004de8 <__alt_data_end+0xfc004de8>
 8004f44:	d9800317 	ldw	r6,12(sp)
 8004f48:	b981670e 	bge	r23,r6,80054e8 <_dtoa_r+0x110c>
 8004f4c:	0027883a 	mov	r19,zero
 8004f50:	d8c00a17 	ldw	r3,40(sp)
 8004f54:	183fd21e 	bne	r3,zero,8004ea0 <__alt_data_end+0xfc004ea0>
 8004f58:	00800044 	movi	r2,1
 8004f5c:	1585883a 	add	r2,r2,r22
 8004f60:	108007cc 	andi	r2,r2,31
 8004f64:	10005f26 	beq	r2,zero,80050e4 <_dtoa_r+0xd08>
 8004f68:	00c00804 	movi	r3,32
 8004f6c:	1887c83a 	sub	r3,r3,r2
 8004f70:	01000104 	movi	r4,4
 8004f74:	20c2dd0e 	bge	r4,r3,8005aec <_dtoa_r+0x1710>
 8004f78:	d9000817 	ldw	r4,32(sp)
 8004f7c:	00c00704 	movi	r3,28
 8004f80:	1885c83a 	sub	r2,r3,r2
 8004f84:	2089883a 	add	r4,r4,r2
 8004f88:	d9000815 	stw	r4,32(sp)
 8004f8c:	a0a9883a 	add	r20,r20,r2
 8004f90:	b0ad883a 	add	r22,r22,r2
 8004f94:	d8800817 	ldw	r2,32(sp)
 8004f98:	0080050e 	bge	zero,r2,8004fb0 <_dtoa_r+0xbd4>
 8004f9c:	e00b883a 	mov	r5,fp
 8004fa0:	8009883a 	mov	r4,r16
 8004fa4:	100d883a 	mov	r6,r2
 8004fa8:	800817c0 	call	800817c <__lshift>
 8004fac:	1039883a 	mov	fp,r2
 8004fb0:	0580050e 	bge	zero,r22,8004fc8 <_dtoa_r+0xbec>
 8004fb4:	a80b883a 	mov	r5,r21
 8004fb8:	8009883a 	mov	r4,r16
 8004fbc:	b00d883a 	mov	r6,r22
 8004fc0:	800817c0 	call	800817c <__lshift>
 8004fc4:	102b883a 	mov	r21,r2
 8004fc8:	d8c00c17 	ldw	r3,48(sp)
 8004fcc:	1801161e 	bne	r3,zero,8005428 <_dtoa_r+0x104c>
 8004fd0:	d8c00617 	ldw	r3,24(sp)
 8004fd4:	00c12d0e 	bge	zero,r3,800548c <_dtoa_r+0x10b0>
 8004fd8:	d8c00b17 	ldw	r3,44(sp)
 8004fdc:	1800571e 	bne	r3,zero,800513c <_dtoa_r+0xd60>
 8004fe0:	dc800717 	ldw	r18,28(sp)
 8004fe4:	dcc00617 	ldw	r19,24(sp)
 8004fe8:	9029883a 	mov	r20,r18
 8004fec:	00000206 	br	8004ff8 <_dtoa_r+0xc1c>
 8004ff0:	8007ad40 	call	8007ad4 <__multadd>
 8004ff4:	1039883a 	mov	fp,r2
 8004ff8:	e009883a 	mov	r4,fp
 8004ffc:	a80b883a 	mov	r5,r21
 8005000:	80041dc0 	call	80041dc <quorem>
 8005004:	10800c04 	addi	r2,r2,48
 8005008:	90800005 	stb	r2,0(r18)
 800500c:	94800044 	addi	r18,r18,1
 8005010:	9507c83a 	sub	r3,r18,r20
 8005014:	8009883a 	mov	r4,r16
 8005018:	e00b883a 	mov	r5,fp
 800501c:	01800284 	movi	r6,10
 8005020:	000f883a 	mov	r7,zero
 8005024:	1cfff216 	blt	r3,r19,8004ff0 <__alt_data_end+0xfc004ff0>
 8005028:	1011883a 	mov	r8,r2
 800502c:	d8800617 	ldw	r2,24(sp)
 8005030:	00822e0e 	bge	zero,r2,80058ec <_dtoa_r+0x1510>
 8005034:	d9000717 	ldw	r4,28(sp)
 8005038:	0025883a 	mov	r18,zero
 800503c:	20af883a 	add	r23,r4,r2
 8005040:	e00b883a 	mov	r5,fp
 8005044:	01800044 	movi	r6,1
 8005048:	8009883a 	mov	r4,r16
 800504c:	da001715 	stw	r8,92(sp)
 8005050:	800817c0 	call	800817c <__lshift>
 8005054:	1009883a 	mov	r4,r2
 8005058:	a80b883a 	mov	r5,r21
 800505c:	1039883a 	mov	fp,r2
 8005060:	80082c40 	call	80082c4 <__mcmp>
 8005064:	da001717 	ldw	r8,92(sp)
 8005068:	00816e0e 	bge	zero,r2,8005624 <_dtoa_r+0x1248>
 800506c:	b93fffc3 	ldbu	r4,-1(r23)
 8005070:	b8bfffc4 	addi	r2,r23,-1
 8005074:	1007883a 	mov	r3,r2
 8005078:	01800e44 	movi	r6,57
 800507c:	d9c00717 	ldw	r7,28(sp)
 8005080:	00000506 	br	8005098 <_dtoa_r+0xcbc>
 8005084:	18ffffc4 	addi	r3,r3,-1
 8005088:	38811926 	beq	r7,r2,80054f0 <_dtoa_r+0x1114>
 800508c:	19000003 	ldbu	r4,0(r3)
 8005090:	102f883a 	mov	r23,r2
 8005094:	10bfffc4 	addi	r2,r2,-1
 8005098:	21403fcc 	andi	r5,r4,255
 800509c:	2940201c 	xori	r5,r5,128
 80050a0:	297fe004 	addi	r5,r5,-128
 80050a4:	29bff726 	beq	r5,r6,8005084 <__alt_data_end+0xfc005084>
 80050a8:	21000044 	addi	r4,r4,1
 80050ac:	11000005 	stb	r4,0(r2)
 80050b0:	8009883a 	mov	r4,r16
 80050b4:	a80b883a 	mov	r5,r21
 80050b8:	8007aac0 	call	8007aac <_Bfree>
 80050bc:	883e7526 	beq	r17,zero,8004a94 <__alt_data_end+0xfc004a94>
 80050c0:	90000426 	beq	r18,zero,80050d4 <_dtoa_r+0xcf8>
 80050c4:	94400326 	beq	r18,r17,80050d4 <_dtoa_r+0xcf8>
 80050c8:	8009883a 	mov	r4,r16
 80050cc:	900b883a 	mov	r5,r18
 80050d0:	8007aac0 	call	8007aac <_Bfree>
 80050d4:	8009883a 	mov	r4,r16
 80050d8:	880b883a 	mov	r5,r17
 80050dc:	8007aac0 	call	8007aac <_Bfree>
 80050e0:	003e6c06 	br	8004a94 <__alt_data_end+0xfc004a94>
 80050e4:	00800704 	movi	r2,28
 80050e8:	d9800817 	ldw	r6,32(sp)
 80050ec:	a0a9883a 	add	r20,r20,r2
 80050f0:	b0ad883a 	add	r22,r22,r2
 80050f4:	308d883a 	add	r6,r6,r2
 80050f8:	d9800815 	stw	r6,32(sp)
 80050fc:	003fa506 	br	8004f94 <__alt_data_end+0xfc004f94>
 8005100:	013efb84 	movi	r4,-1042
 8005104:	246bc83a 	sub	r21,r4,r17
 8005108:	9548983a 	sll	r4,r18,r21
 800510c:	003d1806 	br	8004570 <__alt_data_end+0xfc004570>
 8005110:	d8000c15 	stw	zero,48(sp)
 8005114:	003d5b06 	br	8004684 <__alt_data_end+0xfc004684>
 8005118:	880b883a 	mov	r5,r17
 800511c:	8009883a 	mov	r4,r16
 8005120:	01800284 	movi	r6,10
 8005124:	000f883a 	mov	r7,zero
 8005128:	8007ad40 	call	8007ad4 <__multadd>
 800512c:	1023883a 	mov	r17,r2
 8005130:	d8800d17 	ldw	r2,52(sp)
 8005134:	0082550e 	bge	zero,r2,8005a8c <_dtoa_r+0x16b0>
 8005138:	d8800615 	stw	r2,24(sp)
 800513c:	0500050e 	bge	zero,r20,8005154 <_dtoa_r+0xd78>
 8005140:	880b883a 	mov	r5,r17
 8005144:	8009883a 	mov	r4,r16
 8005148:	a00d883a 	mov	r6,r20
 800514c:	800817c0 	call	800817c <__lshift>
 8005150:	1023883a 	mov	r17,r2
 8005154:	98016a1e 	bne	r19,zero,8005700 <_dtoa_r+0x1324>
 8005158:	8829883a 	mov	r20,r17
 800515c:	d9000617 	ldw	r4,24(sp)
 8005160:	dcc00717 	ldw	r19,28(sp)
 8005164:	9480004c 	andi	r18,r18,1
 8005168:	20bfffc4 	addi	r2,r4,-1
 800516c:	9885883a 	add	r2,r19,r2
 8005170:	d8800415 	stw	r2,16(sp)
 8005174:	dc800615 	stw	r18,24(sp)
 8005178:	e009883a 	mov	r4,fp
 800517c:	a80b883a 	mov	r5,r21
 8005180:	80041dc0 	call	80041dc <quorem>
 8005184:	e009883a 	mov	r4,fp
 8005188:	880b883a 	mov	r5,r17
 800518c:	102f883a 	mov	r23,r2
 8005190:	80082c40 	call	80082c4 <__mcmp>
 8005194:	8009883a 	mov	r4,r16
 8005198:	a80b883a 	mov	r5,r21
 800519c:	a00d883a 	mov	r6,r20
 80051a0:	102d883a 	mov	r22,r2
 80051a4:	80083240 	call	8008324 <__mdiff>
 80051a8:	1007883a 	mov	r3,r2
 80051ac:	10800317 	ldw	r2,12(r2)
 80051b0:	bc800c04 	addi	r18,r23,48
 80051b4:	1000971e 	bne	r2,zero,8005414 <_dtoa_r+0x1038>
 80051b8:	180b883a 	mov	r5,r3
 80051bc:	e009883a 	mov	r4,fp
 80051c0:	d8c01515 	stw	r3,84(sp)
 80051c4:	80082c40 	call	80082c4 <__mcmp>
 80051c8:	d8c01517 	ldw	r3,84(sp)
 80051cc:	8009883a 	mov	r4,r16
 80051d0:	d8801515 	stw	r2,84(sp)
 80051d4:	180b883a 	mov	r5,r3
 80051d8:	8007aac0 	call	8007aac <_Bfree>
 80051dc:	d8801517 	ldw	r2,84(sp)
 80051e0:	1000041e 	bne	r2,zero,80051f4 <_dtoa_r+0xe18>
 80051e4:	d9800317 	ldw	r6,12(sp)
 80051e8:	3000021e 	bne	r6,zero,80051f4 <_dtoa_r+0xe18>
 80051ec:	d8c00617 	ldw	r3,24(sp)
 80051f0:	18007626 	beq	r3,zero,80053cc <_dtoa_r+0xff0>
 80051f4:	b0005b16 	blt	r22,zero,8005364 <_dtoa_r+0xf88>
 80051f8:	b000041e 	bne	r22,zero,800520c <_dtoa_r+0xe30>
 80051fc:	d9000317 	ldw	r4,12(sp)
 8005200:	2000021e 	bne	r4,zero,800520c <_dtoa_r+0xe30>
 8005204:	d8c00617 	ldw	r3,24(sp)
 8005208:	18005626 	beq	r3,zero,8005364 <_dtoa_r+0xf88>
 800520c:	00814d16 	blt	zero,r2,8005744 <_dtoa_r+0x1368>
 8005210:	d8c00417 	ldw	r3,16(sp)
 8005214:	9d800044 	addi	r22,r19,1
 8005218:	9c800005 	stb	r18,0(r19)
 800521c:	b02f883a 	mov	r23,r22
 8005220:	98c14c26 	beq	r19,r3,8005754 <_dtoa_r+0x1378>
 8005224:	e00b883a 	mov	r5,fp
 8005228:	8009883a 	mov	r4,r16
 800522c:	01800284 	movi	r6,10
 8005230:	000f883a 	mov	r7,zero
 8005234:	8007ad40 	call	8007ad4 <__multadd>
 8005238:	1039883a 	mov	fp,r2
 800523c:	8d006d26 	beq	r17,r20,80053f4 <_dtoa_r+0x1018>
 8005240:	880b883a 	mov	r5,r17
 8005244:	01800284 	movi	r6,10
 8005248:	000f883a 	mov	r7,zero
 800524c:	8009883a 	mov	r4,r16
 8005250:	8007ad40 	call	8007ad4 <__multadd>
 8005254:	a00b883a 	mov	r5,r20
 8005258:	8009883a 	mov	r4,r16
 800525c:	01800284 	movi	r6,10
 8005260:	000f883a 	mov	r7,zero
 8005264:	1023883a 	mov	r17,r2
 8005268:	8007ad40 	call	8007ad4 <__multadd>
 800526c:	1029883a 	mov	r20,r2
 8005270:	b027883a 	mov	r19,r22
 8005274:	003fc006 	br	8005178 <__alt_data_end+0xfc005178>
 8005278:	a005883a 	mov	r2,r20
 800527c:	003ede06 	br	8004df8 <__alt_data_end+0xfc004df8>
 8005280:	01000044 	movi	r4,1
 8005284:	d9000b15 	stw	r4,44(sp)
 8005288:	d9802217 	ldw	r6,136(sp)
 800528c:	0180dc0e 	bge	zero,r6,8005600 <_dtoa_r+0x1224>
 8005290:	3023883a 	mov	r17,r6
 8005294:	d9800d15 	stw	r6,52(sp)
 8005298:	d9800615 	stw	r6,24(sp)
 800529c:	003d1e06 	br	8004718 <__alt_data_end+0xfc004718>
 80052a0:	d8800617 	ldw	r2,24(sp)
 80052a4:	00be3716 	blt	zero,r2,8004b84 <__alt_data_end+0xfc004b84>
 80052a8:	1000be1e 	bne	r2,zero,80055a4 <_dtoa_r+0x11c8>
 80052ac:	8809883a 	mov	r4,r17
 80052b0:	a00b883a 	mov	r5,r20
 80052b4:	000d883a 	mov	r6,zero
 80052b8:	01d00534 	movhi	r7,16404
 80052bc:	800cfcc0 	call	800cfcc <__muldf3>
 80052c0:	1009883a 	mov	r4,r2
 80052c4:	180b883a 	mov	r5,r3
 80052c8:	900d883a 	mov	r6,r18
 80052cc:	980f883a 	mov	r7,r19
 80052d0:	800ce0c0 	call	800ce0c <__gedf2>
 80052d4:	002b883a 	mov	r21,zero
 80052d8:	0023883a 	mov	r17,zero
 80052dc:	10007a16 	blt	r2,zero,80054c8 <_dtoa_r+0x10ec>
 80052e0:	d9002217 	ldw	r4,136(sp)
 80052e4:	ddc00717 	ldw	r23,28(sp)
 80052e8:	0108303a 	nor	r4,zero,r4
 80052ec:	d9000515 	stw	r4,20(sp)
 80052f0:	8009883a 	mov	r4,r16
 80052f4:	a80b883a 	mov	r5,r21
 80052f8:	8007aac0 	call	8007aac <_Bfree>
 80052fc:	883f751e 	bne	r17,zero,80050d4 <__alt_data_end+0xfc0050d4>
 8005300:	003de406 	br	8004a94 <__alt_data_end+0xfc004a94>
 8005304:	e00b883a 	mov	r5,fp
 8005308:	8009883a 	mov	r4,r16
 800530c:	800803c0 	call	800803c <__pow5mult>
 8005310:	1039883a 	mov	fp,r2
 8005314:	003ed306 	br	8004e64 <__alt_data_end+0xfc004e64>
 8005318:	903ee01e 	bne	r18,zero,8004e9c <__alt_data_end+0xfc004e9c>
 800531c:	00800434 	movhi	r2,16
 8005320:	10bfffc4 	addi	r2,r2,-1
 8005324:	9884703a 	and	r2,r19,r2
 8005328:	103f081e 	bne	r2,zero,8004f4c <__alt_data_end+0xfc004f4c>
 800532c:	9cdffc2c 	andhi	r19,r19,32752
 8005330:	983f0626 	beq	r19,zero,8004f4c <__alt_data_end+0xfc004f4c>
 8005334:	d8800817 	ldw	r2,32(sp)
 8005338:	b5800044 	addi	r22,r22,1
 800533c:	04c00044 	movi	r19,1
 8005340:	10800044 	addi	r2,r2,1
 8005344:	d8800815 	stw	r2,32(sp)
 8005348:	003f0106 	br	8004f50 <__alt_data_end+0xfc004f50>
 800534c:	d9800f17 	ldw	r6,60(sp)
 8005350:	30016826 	beq	r6,zero,80058f4 <_dtoa_r+0x1518>
 8005354:	10810cc4 	addi	r2,r2,1075
 8005358:	dd400917 	ldw	r21,36(sp)
 800535c:	dd000817 	ldw	r20,32(sp)
 8005360:	003e9906 	br	8004dc8 <__alt_data_end+0xfc004dc8>
 8005364:	9011883a 	mov	r8,r18
 8005368:	4007883a 	mov	r3,r8
 800536c:	e02d883a 	mov	r22,fp
 8005370:	0080100e 	bge	zero,r2,80053b4 <_dtoa_r+0xfd8>
 8005374:	01800044 	movi	r6,1
 8005378:	8009883a 	mov	r4,r16
 800537c:	e00b883a 	mov	r5,fp
 8005380:	da001515 	stw	r8,84(sp)
 8005384:	da001715 	stw	r8,92(sp)
 8005388:	800817c0 	call	800817c <__lshift>
 800538c:	1009883a 	mov	r4,r2
 8005390:	a80b883a 	mov	r5,r21
 8005394:	102d883a 	mov	r22,r2
 8005398:	80082c40 	call	80082c4 <__mcmp>
 800539c:	d8c01517 	ldw	r3,84(sp)
 80053a0:	da001717 	ldw	r8,92(sp)
 80053a4:	0081a50e 	bge	zero,r2,8005a3c <_dtoa_r+0x1660>
 80053a8:	00800e44 	movi	r2,57
 80053ac:	40817b26 	beq	r8,r2,800599c <_dtoa_r+0x15c0>
 80053b0:	40c00044 	addi	r3,r8,1
 80053b4:	8825883a 	mov	r18,r17
 80053b8:	9dc00044 	addi	r23,r19,1
 80053bc:	98c00005 	stb	r3,0(r19)
 80053c0:	a023883a 	mov	r17,r20
 80053c4:	b039883a 	mov	fp,r22
 80053c8:	003f3906 	br	80050b0 <__alt_data_end+0xfc0050b0>
 80053cc:	00800e44 	movi	r2,57
 80053d0:	9011883a 	mov	r8,r18
 80053d4:	90817226 	beq	r18,r2,80059a0 <_dtoa_r+0x15c4>
 80053d8:	0580010e 	bge	zero,r22,80053e0 <_dtoa_r+0x1004>
 80053dc:	ba000c44 	addi	r8,r23,49
 80053e0:	8825883a 	mov	r18,r17
 80053e4:	9dc00044 	addi	r23,r19,1
 80053e8:	9a000005 	stb	r8,0(r19)
 80053ec:	a023883a 	mov	r17,r20
 80053f0:	003f2f06 	br	80050b0 <__alt_data_end+0xfc0050b0>
 80053f4:	880b883a 	mov	r5,r17
 80053f8:	8009883a 	mov	r4,r16
 80053fc:	01800284 	movi	r6,10
 8005400:	000f883a 	mov	r7,zero
 8005404:	8007ad40 	call	8007ad4 <__multadd>
 8005408:	1023883a 	mov	r17,r2
 800540c:	1029883a 	mov	r20,r2
 8005410:	003f9706 	br	8005270 <__alt_data_end+0xfc005270>
 8005414:	8009883a 	mov	r4,r16
 8005418:	180b883a 	mov	r5,r3
 800541c:	8007aac0 	call	8007aac <_Bfree>
 8005420:	00800044 	movi	r2,1
 8005424:	003f7306 	br	80051f4 <__alt_data_end+0xfc0051f4>
 8005428:	e009883a 	mov	r4,fp
 800542c:	a80b883a 	mov	r5,r21
 8005430:	80082c40 	call	80082c4 <__mcmp>
 8005434:	103ee60e 	bge	r2,zero,8004fd0 <__alt_data_end+0xfc004fd0>
 8005438:	8009883a 	mov	r4,r16
 800543c:	e00b883a 	mov	r5,fp
 8005440:	01800284 	movi	r6,10
 8005444:	000f883a 	mov	r7,zero
 8005448:	8007ad40 	call	8007ad4 <__multadd>
 800544c:	d9000517 	ldw	r4,20(sp)
 8005450:	d9800b17 	ldw	r6,44(sp)
 8005454:	1039883a 	mov	fp,r2
 8005458:	213fffc4 	addi	r4,r4,-1
 800545c:	d9000515 	stw	r4,20(sp)
 8005460:	303f2d1e 	bne	r6,zero,8005118 <__alt_data_end+0xfc005118>
 8005464:	d9000d17 	ldw	r4,52(sp)
 8005468:	0101780e 	bge	zero,r4,8005a4c <_dtoa_r+0x1670>
 800546c:	d9000615 	stw	r4,24(sp)
 8005470:	003edb06 	br	8004fe0 <__alt_data_end+0xfc004fe0>
 8005474:	00800084 	movi	r2,2
 8005478:	30818e1e 	bne	r6,r2,8005ab4 <_dtoa_r+0x16d8>
 800547c:	d8000b15 	stw	zero,44(sp)
 8005480:	003f8106 	br	8005288 <__alt_data_end+0xfc005288>
 8005484:	d8800717 	ldw	r2,28(sp)
 8005488:	003c0306 	br	8004498 <__alt_data_end+0xfc004498>
 800548c:	d9000317 	ldw	r4,12(sp)
 8005490:	00800084 	movi	r2,2
 8005494:	113ed00e 	bge	r2,r4,8004fd8 <__alt_data_end+0xfc004fd8>
 8005498:	d8c00617 	ldw	r3,24(sp)
 800549c:	183f901e 	bne	r3,zero,80052e0 <__alt_data_end+0xfc0052e0>
 80054a0:	a80b883a 	mov	r5,r21
 80054a4:	8009883a 	mov	r4,r16
 80054a8:	01800144 	movi	r6,5
 80054ac:	000f883a 	mov	r7,zero
 80054b0:	8007ad40 	call	8007ad4 <__multadd>
 80054b4:	e009883a 	mov	r4,fp
 80054b8:	100b883a 	mov	r5,r2
 80054bc:	102b883a 	mov	r21,r2
 80054c0:	80082c40 	call	80082c4 <__mcmp>
 80054c4:	00bf860e 	bge	zero,r2,80052e0 <__alt_data_end+0xfc0052e0>
 80054c8:	d9800717 	ldw	r6,28(sp)
 80054cc:	00800c44 	movi	r2,49
 80054d0:	30800005 	stb	r2,0(r6)
 80054d4:	d8800517 	ldw	r2,20(sp)
 80054d8:	35c00044 	addi	r23,r6,1
 80054dc:	10800044 	addi	r2,r2,1
 80054e0:	d8800515 	stw	r2,20(sp)
 80054e4:	003f8206 	br	80052f0 <__alt_data_end+0xfc0052f0>
 80054e8:	903e981e 	bne	r18,zero,8004f4c <__alt_data_end+0xfc004f4c>
 80054ec:	003f8b06 	br	800531c <__alt_data_end+0xfc00531c>
 80054f0:	d9800517 	ldw	r6,20(sp)
 80054f4:	d8c00717 	ldw	r3,28(sp)
 80054f8:	00800c44 	movi	r2,49
 80054fc:	31800044 	addi	r6,r6,1
 8005500:	d9800515 	stw	r6,20(sp)
 8005504:	18800005 	stb	r2,0(r3)
 8005508:	003ee906 	br	80050b0 <__alt_data_end+0xfc0050b0>
 800550c:	dc000317 	ldw	r16,12(sp)
 8005510:	003d6006 	br	8004a94 <__alt_data_end+0xfc004a94>
 8005514:	8809883a 	mov	r4,r17
 8005518:	800e0480 	call	800e048 <__floatsidf>
 800551c:	a009883a 	mov	r4,r20
 8005520:	a80b883a 	mov	r5,r21
 8005524:	100d883a 	mov	r6,r2
 8005528:	180f883a 	mov	r7,r3
 800552c:	800cfcc0 	call	800cfcc <__muldf3>
 8005530:	1009883a 	mov	r4,r2
 8005534:	180b883a 	mov	r5,r3
 8005538:	000d883a 	mov	r6,zero
 800553c:	01d00734 	movhi	r7,16412
 8005540:	800bc200 	call	800bc20 <__adddf3>
 8005544:	1023883a 	mov	r17,r2
 8005548:	00bf3034 	movhi	r2,64704
 800554c:	1885883a 	add	r2,r3,r2
 8005550:	d8800e15 	stw	r2,56(sp)
 8005554:	a009883a 	mov	r4,r20
 8005558:	a80b883a 	mov	r5,r21
 800555c:	000d883a 	mov	r6,zero
 8005560:	01d00534 	movhi	r7,16404
 8005564:	800d6f00 	call	800d6f0 <__subdf3>
 8005568:	d9c00e17 	ldw	r7,56(sp)
 800556c:	1009883a 	mov	r4,r2
 8005570:	180b883a 	mov	r5,r3
 8005574:	880d883a 	mov	r6,r17
 8005578:	102b883a 	mov	r21,r2
 800557c:	1829883a 	mov	r20,r3
 8005580:	800ce0c0 	call	800ce0c <__gedf2>
 8005584:	00807716 	blt	zero,r2,8005764 <_dtoa_r+0x1388>
 8005588:	d8800e17 	ldw	r2,56(sp)
 800558c:	a809883a 	mov	r4,r21
 8005590:	a00b883a 	mov	r5,r20
 8005594:	11e0003c 	xorhi	r7,r2,32768
 8005598:	880d883a 	mov	r6,r17
 800559c:	800ceec0 	call	800ceec <__ledf2>
 80055a0:	103d6b0e 	bge	r2,zero,8004b50 <__alt_data_end+0xfc004b50>
 80055a4:	002b883a 	mov	r21,zero
 80055a8:	0023883a 	mov	r17,zero
 80055ac:	003f4c06 	br	80052e0 <__alt_data_end+0xfc0052e0>
 80055b0:	d9800917 	ldw	r6,36(sp)
 80055b4:	e00b883a 	mov	r5,fp
 80055b8:	8009883a 	mov	r4,r16
 80055bc:	800803c0 	call	800803c <__pow5mult>
 80055c0:	1039883a 	mov	fp,r2
 80055c4:	003e2706 	br	8004e64 <__alt_data_end+0xfc004e64>
 80055c8:	d8000b15 	stw	zero,44(sp)
 80055cc:	003c4906 	br	80046f4 <__alt_data_end+0xfc0046f4>
 80055d0:	d9000917 	ldw	r4,36(sp)
 80055d4:	d9800a17 	ldw	r6,40(sp)
 80055d8:	dd400915 	stw	r21,36(sp)
 80055dc:	a905c83a 	sub	r2,r21,r4
 80055e0:	308d883a 	add	r6,r6,r2
 80055e4:	d9800a15 	stw	r6,40(sp)
 80055e8:	002b883a 	mov	r21,zero
 80055ec:	003df206 	br	8004db8 <__alt_data_end+0xfc004db8>
 80055f0:	dc800e15 	stw	r18,56(sp)
 80055f4:	982b883a 	mov	r21,r19
 80055f8:	04400084 	movi	r17,2
 80055fc:	003c7406 	br	80047d0 <__alt_data_end+0xfc0047d0>
 8005600:	04400044 	movi	r17,1
 8005604:	dc400d15 	stw	r17,52(sp)
 8005608:	dc400615 	stw	r17,24(sp)
 800560c:	dc402215 	stw	r17,136(sp)
 8005610:	80001115 	stw	zero,68(r16)
 8005614:	000b883a 	mov	r5,zero
 8005618:	003c4a06 	br	8004744 <__alt_data_end+0xfc004744>
 800561c:	3023883a 	mov	r17,r6
 8005620:	003ffb06 	br	8005610 <__alt_data_end+0xfc005610>
 8005624:	1000021e 	bne	r2,zero,8005630 <_dtoa_r+0x1254>
 8005628:	4200004c 	andi	r8,r8,1
 800562c:	403e8f1e 	bne	r8,zero,800506c <__alt_data_end+0xfc00506c>
 8005630:	01000c04 	movi	r4,48
 8005634:	00000106 	br	800563c <_dtoa_r+0x1260>
 8005638:	102f883a 	mov	r23,r2
 800563c:	b8bfffc4 	addi	r2,r23,-1
 8005640:	10c00007 	ldb	r3,0(r2)
 8005644:	193ffc26 	beq	r3,r4,8005638 <__alt_data_end+0xfc005638>
 8005648:	003e9906 	br	80050b0 <__alt_data_end+0xfc0050b0>
 800564c:	d9000517 	ldw	r4,20(sp)
 8005650:	012fc83a 	sub	r23,zero,r4
 8005654:	b800ad26 	beq	r23,zero,800590c <_dtoa_r+0x1530>
 8005658:	b88003cc 	andi	r2,r23,15
 800565c:	100490fa 	slli	r2,r2,3
 8005660:	00c200b4 	movhi	r3,2050
 8005664:	18ee5a04 	addi	r3,r3,-18072
 8005668:	1885883a 	add	r2,r3,r2
 800566c:	11800017 	ldw	r6,0(r2)
 8005670:	11c00117 	ldw	r7,4(r2)
 8005674:	b82fd13a 	srai	r23,r23,4
 8005678:	9009883a 	mov	r4,r18
 800567c:	980b883a 	mov	r5,r19
 8005680:	800cfcc0 	call	800cfcc <__muldf3>
 8005684:	1029883a 	mov	r20,r2
 8005688:	182b883a 	mov	r21,r3
 800568c:	b800f426 	beq	r23,zero,8005a60 <_dtoa_r+0x1684>
 8005690:	020200b4 	movhi	r8,2050
 8005694:	422e5004 	addi	r8,r8,-18112
 8005698:	8029883a 	mov	r20,r16
 800569c:	04400084 	movi	r17,2
 80056a0:	4021883a 	mov	r16,r8
 80056a4:	b980004c 	andi	r6,r23,1
 80056a8:	1009883a 	mov	r4,r2
 80056ac:	b82fd07a 	srai	r23,r23,1
 80056b0:	180b883a 	mov	r5,r3
 80056b4:	30000426 	beq	r6,zero,80056c8 <_dtoa_r+0x12ec>
 80056b8:	81800017 	ldw	r6,0(r16)
 80056bc:	81c00117 	ldw	r7,4(r16)
 80056c0:	8c400044 	addi	r17,r17,1
 80056c4:	800cfcc0 	call	800cfcc <__muldf3>
 80056c8:	84000204 	addi	r16,r16,8
 80056cc:	b83ff51e 	bne	r23,zero,80056a4 <__alt_data_end+0xfc0056a4>
 80056d0:	a021883a 	mov	r16,r20
 80056d4:	182b883a 	mov	r21,r3
 80056d8:	1029883a 	mov	r20,r2
 80056dc:	003c5506 	br	8004834 <__alt_data_end+0xfc004834>
 80056e0:	d9800517 	ldw	r6,20(sp)
 80056e4:	d9000717 	ldw	r4,28(sp)
 80056e8:	00c00c04 	movi	r3,48
 80056ec:	31800044 	addi	r6,r6,1
 80056f0:	d9800515 	stw	r6,20(sp)
 80056f4:	20c00005 	stb	r3,0(r4)
 80056f8:	02000c44 	movi	r8,49
 80056fc:	003da206 	br	8004d88 <__alt_data_end+0xfc004d88>
 8005700:	89400117 	ldw	r5,4(r17)
 8005704:	8009883a 	mov	r4,r16
 8005708:	8007a040 	call	8007a04 <_Balloc>
 800570c:	89800417 	ldw	r6,16(r17)
 8005710:	11000304 	addi	r4,r2,12
 8005714:	89400304 	addi	r5,r17,12
 8005718:	31800084 	addi	r6,r6,2
 800571c:	318d883a 	add	r6,r6,r6
 8005720:	318d883a 	add	r6,r6,r6
 8005724:	1027883a 	mov	r19,r2
 8005728:	800764c0 	call	800764c <memcpy>
 800572c:	8009883a 	mov	r4,r16
 8005730:	980b883a 	mov	r5,r19
 8005734:	01800044 	movi	r6,1
 8005738:	800817c0 	call	800817c <__lshift>
 800573c:	1029883a 	mov	r20,r2
 8005740:	003e8606 	br	800515c <__alt_data_end+0xfc00515c>
 8005744:	00800e44 	movi	r2,57
 8005748:	90809526 	beq	r18,r2,80059a0 <_dtoa_r+0x15c4>
 800574c:	92000044 	addi	r8,r18,1
 8005750:	003f2306 	br	80053e0 <__alt_data_end+0xfc0053e0>
 8005754:	9011883a 	mov	r8,r18
 8005758:	8825883a 	mov	r18,r17
 800575c:	a023883a 	mov	r17,r20
 8005760:	003e3706 	br	8005040 <__alt_data_end+0xfc005040>
 8005764:	002b883a 	mov	r21,zero
 8005768:	0023883a 	mov	r17,zero
 800576c:	003f5606 	br	80054c8 <__alt_data_end+0xfc0054c8>
 8005770:	51bfffc4 	addi	r6,r10,-1
 8005774:	300490fa 	slli	r2,r6,3
 8005778:	00c200b4 	movhi	r3,2050
 800577c:	18ee5a04 	addi	r3,r3,-18072
 8005780:	1885883a 	add	r2,r3,r2
 8005784:	d9c00e17 	ldw	r7,56(sp)
 8005788:	11000017 	ldw	r4,0(r2)
 800578c:	11400117 	ldw	r5,4(r2)
 8005790:	d8800717 	ldw	r2,28(sp)
 8005794:	d9801015 	stw	r6,64(sp)
 8005798:	880d883a 	mov	r6,r17
 800579c:	da801615 	stw	r10,88(sp)
 80057a0:	15c00044 	addi	r23,r2,1
 80057a4:	800cfcc0 	call	800cfcc <__muldf3>
 80057a8:	a80b883a 	mov	r5,r21
 80057ac:	a009883a 	mov	r4,r20
 80057b0:	d8c01115 	stw	r3,68(sp)
 80057b4:	d8800e15 	stw	r2,56(sp)
 80057b8:	800dfc00 	call	800dfc0 <__fixdfsi>
 80057bc:	1009883a 	mov	r4,r2
 80057c0:	1023883a 	mov	r17,r2
 80057c4:	800e0480 	call	800e048 <__floatsidf>
 80057c8:	a009883a 	mov	r4,r20
 80057cc:	a80b883a 	mov	r5,r21
 80057d0:	100d883a 	mov	r6,r2
 80057d4:	180f883a 	mov	r7,r3
 80057d8:	800d6f00 	call	800d6f0 <__subdf3>
 80057dc:	1813883a 	mov	r9,r3
 80057e0:	d8c00717 	ldw	r3,28(sp)
 80057e4:	8c400c04 	addi	r17,r17,48
 80057e8:	1011883a 	mov	r8,r2
 80057ec:	1c400005 	stb	r17,0(r3)
 80057f0:	da801617 	ldw	r10,88(sp)
 80057f4:	00800044 	movi	r2,1
 80057f8:	50802326 	beq	r10,r2,8005888 <_dtoa_r+0x14ac>
 80057fc:	d8800717 	ldw	r2,28(sp)
 8005800:	b82b883a 	mov	r21,r23
 8005804:	dc001315 	stw	r16,76(sp)
 8005808:	12a9883a 	add	r20,r2,r10
 800580c:	4807883a 	mov	r3,r9
 8005810:	4005883a 	mov	r2,r8
 8005814:	dc801415 	stw	r18,80(sp)
 8005818:	000d883a 	mov	r6,zero
 800581c:	01d00934 	movhi	r7,16420
 8005820:	1009883a 	mov	r4,r2
 8005824:	180b883a 	mov	r5,r3
 8005828:	800cfcc0 	call	800cfcc <__muldf3>
 800582c:	180b883a 	mov	r5,r3
 8005830:	1009883a 	mov	r4,r2
 8005834:	1821883a 	mov	r16,r3
 8005838:	1025883a 	mov	r18,r2
 800583c:	800dfc00 	call	800dfc0 <__fixdfsi>
 8005840:	1009883a 	mov	r4,r2
 8005844:	1023883a 	mov	r17,r2
 8005848:	800e0480 	call	800e048 <__floatsidf>
 800584c:	9009883a 	mov	r4,r18
 8005850:	800b883a 	mov	r5,r16
 8005854:	100d883a 	mov	r6,r2
 8005858:	180f883a 	mov	r7,r3
 800585c:	8c400c04 	addi	r17,r17,48
 8005860:	800d6f00 	call	800d6f0 <__subdf3>
 8005864:	ad400044 	addi	r21,r21,1
 8005868:	ac7fffc5 	stb	r17,-1(r21)
 800586c:	ad3fea1e 	bne	r21,r20,8005818 <__alt_data_end+0xfc005818>
 8005870:	1813883a 	mov	r9,r3
 8005874:	d8c01017 	ldw	r3,64(sp)
 8005878:	dc001317 	ldw	r16,76(sp)
 800587c:	dc801417 	ldw	r18,80(sp)
 8005880:	1011883a 	mov	r8,r2
 8005884:	b8ef883a 	add	r23,r23,r3
 8005888:	d9000e17 	ldw	r4,56(sp)
 800588c:	d9401117 	ldw	r5,68(sp)
 8005890:	000d883a 	mov	r6,zero
 8005894:	01cff834 	movhi	r7,16352
 8005898:	da001715 	stw	r8,92(sp)
 800589c:	da401515 	stw	r9,84(sp)
 80058a0:	800bc200 	call	800bc20 <__adddf3>
 80058a4:	da001717 	ldw	r8,92(sp)
 80058a8:	da401517 	ldw	r9,84(sp)
 80058ac:	1009883a 	mov	r4,r2
 80058b0:	400d883a 	mov	r6,r8
 80058b4:	480f883a 	mov	r7,r9
 80058b8:	180b883a 	mov	r5,r3
 80058bc:	800ceec0 	call	800ceec <__ledf2>
 80058c0:	da001717 	ldw	r8,92(sp)
 80058c4:	da401517 	ldw	r9,84(sp)
 80058c8:	10003b0e 	bge	r2,zero,80059b8 <_dtoa_r+0x15dc>
 80058cc:	d9001217 	ldw	r4,72(sp)
 80058d0:	bd7fffc3 	ldbu	r21,-1(r23)
 80058d4:	d9000515 	stw	r4,20(sp)
 80058d8:	003d1c06 	br	8004d4c <__alt_data_end+0xfc004d4c>
 80058dc:	d8c00817 	ldw	r3,32(sp)
 80058e0:	18a9c83a 	sub	r20,r3,r2
 80058e4:	0005883a 	mov	r2,zero
 80058e8:	003d3706 	br	8004dc8 <__alt_data_end+0xfc004dc8>
 80058ec:	00800044 	movi	r2,1
 80058f0:	003dd006 	br	8005034 <__alt_data_end+0xfc005034>
 80058f4:	d8c00217 	ldw	r3,8(sp)
 80058f8:	00800d84 	movi	r2,54
 80058fc:	dd400917 	ldw	r21,36(sp)
 8005900:	10c5c83a 	sub	r2,r2,r3
 8005904:	dd000817 	ldw	r20,32(sp)
 8005908:	003d2f06 	br	8004dc8 <__alt_data_end+0xfc004dc8>
 800590c:	9029883a 	mov	r20,r18
 8005910:	982b883a 	mov	r21,r19
 8005914:	04400084 	movi	r17,2
 8005918:	003bc606 	br	8004834 <__alt_data_end+0xfc004834>
 800591c:	d8800617 	ldw	r2,24(sp)
 8005920:	103efc26 	beq	r2,zero,8005514 <__alt_data_end+0xfc005514>
 8005924:	d8c00d17 	ldw	r3,52(sp)
 8005928:	00fc890e 	bge	zero,r3,8004b50 <__alt_data_end+0xfc004b50>
 800592c:	a80b883a 	mov	r5,r21
 8005930:	a009883a 	mov	r4,r20
 8005934:	000d883a 	mov	r6,zero
 8005938:	01d00934 	movhi	r7,16420
 800593c:	800cfcc0 	call	800cfcc <__muldf3>
 8005940:	89000044 	addi	r4,r17,1
 8005944:	1029883a 	mov	r20,r2
 8005948:	182b883a 	mov	r21,r3
 800594c:	800e0480 	call	800e048 <__floatsidf>
 8005950:	a009883a 	mov	r4,r20
 8005954:	a80b883a 	mov	r5,r21
 8005958:	100d883a 	mov	r6,r2
 800595c:	180f883a 	mov	r7,r3
 8005960:	800cfcc0 	call	800cfcc <__muldf3>
 8005964:	1009883a 	mov	r4,r2
 8005968:	180b883a 	mov	r5,r3
 800596c:	000d883a 	mov	r6,zero
 8005970:	01d00734 	movhi	r7,16412
 8005974:	800bc200 	call	800bc20 <__adddf3>
 8005978:	d9000517 	ldw	r4,20(sp)
 800597c:	1023883a 	mov	r17,r2
 8005980:	00bf3034 	movhi	r2,64704
 8005984:	213fffc4 	addi	r4,r4,-1
 8005988:	1885883a 	add	r2,r3,r2
 800598c:	d9001215 	stw	r4,72(sp)
 8005990:	d8800e15 	stw	r2,56(sp)
 8005994:	da800d17 	ldw	r10,52(sp)
 8005998:	003bc306 	br	80048a8 <__alt_data_end+0xfc0048a8>
 800599c:	b039883a 	mov	fp,r22
 80059a0:	01000e44 	movi	r4,57
 80059a4:	8825883a 	mov	r18,r17
 80059a8:	9dc00044 	addi	r23,r19,1
 80059ac:	99000005 	stb	r4,0(r19)
 80059b0:	a023883a 	mov	r17,r20
 80059b4:	003dae06 	br	8005070 <__alt_data_end+0xfc005070>
 80059b8:	d9800e17 	ldw	r6,56(sp)
 80059bc:	d9c01117 	ldw	r7,68(sp)
 80059c0:	0009883a 	mov	r4,zero
 80059c4:	014ff834 	movhi	r5,16352
 80059c8:	da001715 	stw	r8,92(sp)
 80059cc:	da401515 	stw	r9,84(sp)
 80059d0:	800d6f00 	call	800d6f0 <__subdf3>
 80059d4:	da001717 	ldw	r8,92(sp)
 80059d8:	da401517 	ldw	r9,84(sp)
 80059dc:	1009883a 	mov	r4,r2
 80059e0:	180b883a 	mov	r5,r3
 80059e4:	400d883a 	mov	r6,r8
 80059e8:	480f883a 	mov	r7,r9
 80059ec:	800ce0c0 	call	800ce0c <__gedf2>
 80059f0:	00bc570e 	bge	zero,r2,8004b50 <__alt_data_end+0xfc004b50>
 80059f4:	01000c04 	movi	r4,48
 80059f8:	00000106 	br	8005a00 <_dtoa_r+0x1624>
 80059fc:	102f883a 	mov	r23,r2
 8005a00:	b8bfffc4 	addi	r2,r23,-1
 8005a04:	10c00007 	ldb	r3,0(r2)
 8005a08:	193ffc26 	beq	r3,r4,80059fc <__alt_data_end+0xfc0059fc>
 8005a0c:	d9801217 	ldw	r6,72(sp)
 8005a10:	d9800515 	stw	r6,20(sp)
 8005a14:	003c1f06 	br	8004a94 <__alt_data_end+0xfc004a94>
 8005a18:	d8801217 	ldw	r2,72(sp)
 8005a1c:	dc001117 	ldw	r16,68(sp)
 8005a20:	d8800515 	stw	r2,20(sp)
 8005a24:	003cc906 	br	8004d4c <__alt_data_end+0xfc004d4c>
 8005a28:	dd801317 	ldw	r22,76(sp)
 8005a2c:	dc001117 	ldw	r16,68(sp)
 8005a30:	dcc01417 	ldw	r19,80(sp)
 8005a34:	dc801017 	ldw	r18,64(sp)
 8005a38:	003c4506 	br	8004b50 <__alt_data_end+0xfc004b50>
 8005a3c:	103e5d1e 	bne	r2,zero,80053b4 <__alt_data_end+0xfc0053b4>
 8005a40:	4080004c 	andi	r2,r8,1
 8005a44:	103e5b26 	beq	r2,zero,80053b4 <__alt_data_end+0xfc0053b4>
 8005a48:	003e5706 	br	80053a8 <__alt_data_end+0xfc0053a8>
 8005a4c:	d8c00317 	ldw	r3,12(sp)
 8005a50:	00800084 	movi	r2,2
 8005a54:	10c00a16 	blt	r2,r3,8005a80 <_dtoa_r+0x16a4>
 8005a58:	d9000d17 	ldw	r4,52(sp)
 8005a5c:	003e8306 	br	800546c <__alt_data_end+0xfc00546c>
 8005a60:	04400084 	movi	r17,2
 8005a64:	003b7306 	br	8004834 <__alt_data_end+0xfc004834>
 8005a68:	d9801217 	ldw	r6,72(sp)
 8005a6c:	d9800515 	stw	r6,20(sp)
 8005a70:	003cb606 	br	8004d4c <__alt_data_end+0xfc004d4c>
 8005a74:	d9001217 	ldw	r4,72(sp)
 8005a78:	d9000515 	stw	r4,20(sp)
 8005a7c:	003c0506 	br	8004a94 <__alt_data_end+0xfc004a94>
 8005a80:	d9800d17 	ldw	r6,52(sp)
 8005a84:	d9800615 	stw	r6,24(sp)
 8005a88:	003e8306 	br	8005498 <__alt_data_end+0xfc005498>
 8005a8c:	d9800317 	ldw	r6,12(sp)
 8005a90:	00800084 	movi	r2,2
 8005a94:	11800216 	blt	r2,r6,8005aa0 <_dtoa_r+0x16c4>
 8005a98:	d8800d17 	ldw	r2,52(sp)
 8005a9c:	003da606 	br	8005138 <__alt_data_end+0xfc005138>
 8005aa0:	d8800d17 	ldw	r2,52(sp)
 8005aa4:	d8800615 	stw	r2,24(sp)
 8005aa8:	003e7b06 	br	8005498 <__alt_data_end+0xfc005498>
 8005aac:	05000044 	movi	r20,1
 8005ab0:	003b0506 	br	80046c8 <__alt_data_end+0xfc0046c8>
 8005ab4:	8009883a 	mov	r4,r16
 8005ab8:	80001115 	stw	zero,68(r16)
 8005abc:	000b883a 	mov	r5,zero
 8005ac0:	8007a040 	call	8007a04 <_Balloc>
 8005ac4:	d8800715 	stw	r2,28(sp)
 8005ac8:	d8c00717 	ldw	r3,28(sp)
 8005acc:	00bfffc4 	movi	r2,-1
 8005ad0:	01000044 	movi	r4,1
 8005ad4:	d8800615 	stw	r2,24(sp)
 8005ad8:	80c01015 	stw	r3,64(r16)
 8005adc:	d9000b15 	stw	r4,44(sp)
 8005ae0:	d8002215 	stw	zero,136(sp)
 8005ae4:	d8800d15 	stw	r2,52(sp)
 8005ae8:	003c1906 	br	8004b50 <__alt_data_end+0xfc004b50>
 8005aec:	193d2926 	beq	r3,r4,8004f94 <__alt_data_end+0xfc004f94>
 8005af0:	00c00f04 	movi	r3,60
 8005af4:	1885c83a 	sub	r2,r3,r2
 8005af8:	003d7b06 	br	80050e8 <__alt_data_end+0xfc0050e8>
 8005afc:	000b883a 	mov	r5,zero
 8005b00:	003b1006 	br	8004744 <__alt_data_end+0xfc004744>

08005b04 <_fflush_r>:
 8005b04:	defffb04 	addi	sp,sp,-20
 8005b08:	dcc00315 	stw	r19,12(sp)
 8005b0c:	dc000015 	stw	r16,0(sp)
 8005b10:	dfc00415 	stw	ra,16(sp)
 8005b14:	dc800215 	stw	r18,8(sp)
 8005b18:	dc400115 	stw	r17,4(sp)
 8005b1c:	2027883a 	mov	r19,r4
 8005b20:	2821883a 	mov	r16,r5
 8005b24:	20000226 	beq	r4,zero,8005b30 <_fflush_r+0x2c>
 8005b28:	20800e17 	ldw	r2,56(r4)
 8005b2c:	10005326 	beq	r2,zero,8005c7c <_fflush_r+0x178>
 8005b30:	8080030b 	ldhu	r2,12(r16)
 8005b34:	10ffffcc 	andi	r3,r2,65535
 8005b38:	18e0001c 	xori	r3,r3,32768
 8005b3c:	18e00004 	addi	r3,r3,-32768
 8005b40:	18002c26 	beq	r3,zero,8005bf4 <_fflush_r+0xf0>
 8005b44:	10c0020c 	andi	r3,r2,8
 8005b48:	1800321e 	bne	r3,zero,8005c14 <_fflush_r+0x110>
 8005b4c:	80c00117 	ldw	r3,4(r16)
 8005b50:	10820014 	ori	r2,r2,2048
 8005b54:	8080030d 	sth	r2,12(r16)
 8005b58:	00c0570e 	bge	zero,r3,8005cb8 <_fflush_r+0x1b4>
 8005b5c:	82000a17 	ldw	r8,40(r16)
 8005b60:	40002426 	beq	r8,zero,8005bf4 <_fflush_r+0xf0>
 8005b64:	9c400017 	ldw	r17,0(r19)
 8005b68:	10c4000c 	andi	r3,r2,4096
 8005b6c:	98000015 	stw	zero,0(r19)
 8005b70:	18004626 	beq	r3,zero,8005c8c <_fflush_r+0x188>
 8005b74:	81801417 	ldw	r6,80(r16)
 8005b78:	10c0010c 	andi	r3,r2,4
 8005b7c:	18000626 	beq	r3,zero,8005b98 <_fflush_r+0x94>
 8005b80:	80c00117 	ldw	r3,4(r16)
 8005b84:	80800c17 	ldw	r2,48(r16)
 8005b88:	30cdc83a 	sub	r6,r6,r3
 8005b8c:	10000226 	beq	r2,zero,8005b98 <_fflush_r+0x94>
 8005b90:	80800f17 	ldw	r2,60(r16)
 8005b94:	308dc83a 	sub	r6,r6,r2
 8005b98:	81400717 	ldw	r5,28(r16)
 8005b9c:	9809883a 	mov	r4,r19
 8005ba0:	000f883a 	mov	r7,zero
 8005ba4:	403ee83a 	callr	r8
 8005ba8:	00ffffc4 	movi	r3,-1
 8005bac:	10c04526 	beq	r2,r3,8005cc4 <_fflush_r+0x1c0>
 8005bb0:	80c0030b 	ldhu	r3,12(r16)
 8005bb4:	81000417 	ldw	r4,16(r16)
 8005bb8:	80000115 	stw	zero,4(r16)
 8005bbc:	197dffcc 	andi	r5,r3,63487
 8005bc0:	8140030d 	sth	r5,12(r16)
 8005bc4:	81000015 	stw	r4,0(r16)
 8005bc8:	18c4000c 	andi	r3,r3,4096
 8005bcc:	18000126 	beq	r3,zero,8005bd4 <_fflush_r+0xd0>
 8005bd0:	80801415 	stw	r2,80(r16)
 8005bd4:	81400c17 	ldw	r5,48(r16)
 8005bd8:	9c400015 	stw	r17,0(r19)
 8005bdc:	28000526 	beq	r5,zero,8005bf4 <_fflush_r+0xf0>
 8005be0:	80801004 	addi	r2,r16,64
 8005be4:	28800226 	beq	r5,r2,8005bf0 <_fflush_r+0xec>
 8005be8:	9809883a 	mov	r4,r19
 8005bec:	80062200 	call	8006220 <_free_r>
 8005bf0:	80000c15 	stw	zero,48(r16)
 8005bf4:	0005883a 	mov	r2,zero
 8005bf8:	dfc00417 	ldw	ra,16(sp)
 8005bfc:	dcc00317 	ldw	r19,12(sp)
 8005c00:	dc800217 	ldw	r18,8(sp)
 8005c04:	dc400117 	ldw	r17,4(sp)
 8005c08:	dc000017 	ldw	r16,0(sp)
 8005c0c:	dec00504 	addi	sp,sp,20
 8005c10:	f800283a 	ret
 8005c14:	84800417 	ldw	r18,16(r16)
 8005c18:	903ff626 	beq	r18,zero,8005bf4 <__alt_data_end+0xfc005bf4>
 8005c1c:	84400017 	ldw	r17,0(r16)
 8005c20:	108000cc 	andi	r2,r2,3
 8005c24:	84800015 	stw	r18,0(r16)
 8005c28:	8ca3c83a 	sub	r17,r17,r18
 8005c2c:	10001526 	beq	r2,zero,8005c84 <_fflush_r+0x180>
 8005c30:	0005883a 	mov	r2,zero
 8005c34:	80800215 	stw	r2,8(r16)
 8005c38:	04400316 	blt	zero,r17,8005c48 <_fflush_r+0x144>
 8005c3c:	003fed06 	br	8005bf4 <__alt_data_end+0xfc005bf4>
 8005c40:	90a5883a 	add	r18,r18,r2
 8005c44:	047feb0e 	bge	zero,r17,8005bf4 <__alt_data_end+0xfc005bf4>
 8005c48:	80800917 	ldw	r2,36(r16)
 8005c4c:	81400717 	ldw	r5,28(r16)
 8005c50:	880f883a 	mov	r7,r17
 8005c54:	900d883a 	mov	r6,r18
 8005c58:	9809883a 	mov	r4,r19
 8005c5c:	103ee83a 	callr	r2
 8005c60:	88a3c83a 	sub	r17,r17,r2
 8005c64:	00bff616 	blt	zero,r2,8005c40 <__alt_data_end+0xfc005c40>
 8005c68:	80c0030b 	ldhu	r3,12(r16)
 8005c6c:	00bfffc4 	movi	r2,-1
 8005c70:	18c01014 	ori	r3,r3,64
 8005c74:	80c0030d 	sth	r3,12(r16)
 8005c78:	003fdf06 	br	8005bf8 <__alt_data_end+0xfc005bf8>
 8005c7c:	80060ac0 	call	80060ac <__sinit>
 8005c80:	003fab06 	br	8005b30 <__alt_data_end+0xfc005b30>
 8005c84:	80800517 	ldw	r2,20(r16)
 8005c88:	003fea06 	br	8005c34 <__alt_data_end+0xfc005c34>
 8005c8c:	81400717 	ldw	r5,28(r16)
 8005c90:	000d883a 	mov	r6,zero
 8005c94:	9809883a 	mov	r4,r19
 8005c98:	01c00044 	movi	r7,1
 8005c9c:	403ee83a 	callr	r8
 8005ca0:	100d883a 	mov	r6,r2
 8005ca4:	00bfffc4 	movi	r2,-1
 8005ca8:	30801326 	beq	r6,r2,8005cf8 <_fflush_r+0x1f4>
 8005cac:	8080030b 	ldhu	r2,12(r16)
 8005cb0:	82000a17 	ldw	r8,40(r16)
 8005cb4:	003fb006 	br	8005b78 <__alt_data_end+0xfc005b78>
 8005cb8:	80c00f17 	ldw	r3,60(r16)
 8005cbc:	00ffa716 	blt	zero,r3,8005b5c <__alt_data_end+0xfc005b5c>
 8005cc0:	003fcc06 	br	8005bf4 <__alt_data_end+0xfc005bf4>
 8005cc4:	98c00017 	ldw	r3,0(r19)
 8005cc8:	183fb926 	beq	r3,zero,8005bb0 <__alt_data_end+0xfc005bb0>
 8005ccc:	01000744 	movi	r4,29
 8005cd0:	19000226 	beq	r3,r4,8005cdc <_fflush_r+0x1d8>
 8005cd4:	01000584 	movi	r4,22
 8005cd8:	1900101e 	bne	r3,r4,8005d1c <_fflush_r+0x218>
 8005cdc:	8080030b 	ldhu	r2,12(r16)
 8005ce0:	80c00417 	ldw	r3,16(r16)
 8005ce4:	80000115 	stw	zero,4(r16)
 8005ce8:	10bdffcc 	andi	r2,r2,63487
 8005cec:	8080030d 	sth	r2,12(r16)
 8005cf0:	80c00015 	stw	r3,0(r16)
 8005cf4:	003fb706 	br	8005bd4 <__alt_data_end+0xfc005bd4>
 8005cf8:	98800017 	ldw	r2,0(r19)
 8005cfc:	103feb26 	beq	r2,zero,8005cac <__alt_data_end+0xfc005cac>
 8005d00:	00c00744 	movi	r3,29
 8005d04:	10c00226 	beq	r2,r3,8005d10 <_fflush_r+0x20c>
 8005d08:	00c00584 	movi	r3,22
 8005d0c:	10ffd61e 	bne	r2,r3,8005c68 <__alt_data_end+0xfc005c68>
 8005d10:	9c400015 	stw	r17,0(r19)
 8005d14:	0005883a 	mov	r2,zero
 8005d18:	003fb706 	br	8005bf8 <__alt_data_end+0xfc005bf8>
 8005d1c:	80c0030b 	ldhu	r3,12(r16)
 8005d20:	18c01014 	ori	r3,r3,64
 8005d24:	80c0030d 	sth	r3,12(r16)
 8005d28:	003fb306 	br	8005bf8 <__alt_data_end+0xfc005bf8>

08005d2c <fflush>:
 8005d2c:	20000526 	beq	r4,zero,8005d44 <fflush+0x18>
 8005d30:	008200b4 	movhi	r2,2050
 8005d34:	10b59f04 	addi	r2,r2,-10628
 8005d38:	200b883a 	mov	r5,r4
 8005d3c:	11000017 	ldw	r4,0(r2)
 8005d40:	8005b041 	jmpi	8005b04 <_fflush_r>
 8005d44:	008200b4 	movhi	r2,2050
 8005d48:	10b59e04 	addi	r2,r2,-10632
 8005d4c:	11000017 	ldw	r4,0(r2)
 8005d50:	01420034 	movhi	r5,2048
 8005d54:	2956c104 	addi	r5,r5,23300
 8005d58:	8006a6c1 	jmpi	8006a6c <_fwalk_reent>

08005d5c <__fp_lock>:
 8005d5c:	0005883a 	mov	r2,zero
 8005d60:	f800283a 	ret

08005d64 <__fp_unlock>:
 8005d64:	0005883a 	mov	r2,zero
 8005d68:	f800283a 	ret

08005d6c <_cleanup_r>:
 8005d6c:	01420074 	movhi	r5,2049
 8005d70:	296a3804 	addi	r5,r5,-22304
 8005d74:	80069b41 	jmpi	80069b4 <_fwalk>

08005d78 <__sinit.part.1>:
 8005d78:	defff604 	addi	sp,sp,-40
 8005d7c:	00c20034 	movhi	r3,2048
 8005d80:	dfc00915 	stw	ra,36(sp)
 8005d84:	df000815 	stw	fp,32(sp)
 8005d88:	ddc00715 	stw	r23,28(sp)
 8005d8c:	dd800615 	stw	r22,24(sp)
 8005d90:	dd400515 	stw	r21,20(sp)
 8005d94:	dd000415 	stw	r20,16(sp)
 8005d98:	dcc00315 	stw	r19,12(sp)
 8005d9c:	dc800215 	stw	r18,8(sp)
 8005da0:	dc400115 	stw	r17,4(sp)
 8005da4:	dc000015 	stw	r16,0(sp)
 8005da8:	18d75b04 	addi	r3,r3,23916
 8005dac:	24000117 	ldw	r16,4(r4)
 8005db0:	20c00f15 	stw	r3,60(r4)
 8005db4:	07000044 	movi	fp,1
 8005db8:	00c000c4 	movi	r3,3
 8005dbc:	2080bb04 	addi	r2,r4,748
 8005dc0:	20c0b915 	stw	r3,740(r4)
 8005dc4:	27000e15 	stw	fp,56(r4)
 8005dc8:	2080ba15 	stw	r2,744(r4)
 8005dcc:	2000b815 	stw	zero,736(r4)
 8005dd0:	05c00204 	movi	r23,8
 8005dd4:	00800104 	movi	r2,4
 8005dd8:	2025883a 	mov	r18,r4
 8005ddc:	b80d883a 	mov	r6,r23
 8005de0:	81001704 	addi	r4,r16,92
 8005de4:	000b883a 	mov	r5,zero
 8005de8:	80000015 	stw	zero,0(r16)
 8005dec:	80000115 	stw	zero,4(r16)
 8005df0:	80000215 	stw	zero,8(r16)
 8005df4:	8080030d 	sth	r2,12(r16)
 8005df8:	80001915 	stw	zero,100(r16)
 8005dfc:	8000038d 	sth	zero,14(r16)
 8005e00:	80000415 	stw	zero,16(r16)
 8005e04:	80000515 	stw	zero,20(r16)
 8005e08:	80000615 	stw	zero,24(r16)
 8005e0c:	80078e00 	call	80078e0 <memset>
 8005e10:	05820074 	movhi	r22,2049
 8005e14:	94400217 	ldw	r17,8(r18)
 8005e18:	05420074 	movhi	r21,2049
 8005e1c:	05020074 	movhi	r20,2049
 8005e20:	04c20074 	movhi	r19,2049
 8005e24:	b5a3fe04 	addi	r22,r22,-28680
 8005e28:	ad641504 	addi	r21,r21,-28588
 8005e2c:	a5243404 	addi	r20,r20,-28464
 8005e30:	9ce44b04 	addi	r19,r19,-28372
 8005e34:	85800815 	stw	r22,32(r16)
 8005e38:	85400915 	stw	r21,36(r16)
 8005e3c:	85000a15 	stw	r20,40(r16)
 8005e40:	84c00b15 	stw	r19,44(r16)
 8005e44:	84000715 	stw	r16,28(r16)
 8005e48:	00800284 	movi	r2,10
 8005e4c:	89001704 	addi	r4,r17,92
 8005e50:	b80d883a 	mov	r6,r23
 8005e54:	000b883a 	mov	r5,zero
 8005e58:	88000015 	stw	zero,0(r17)
 8005e5c:	88000115 	stw	zero,4(r17)
 8005e60:	88000215 	stw	zero,8(r17)
 8005e64:	8880030d 	sth	r2,12(r17)
 8005e68:	88001915 	stw	zero,100(r17)
 8005e6c:	8f00038d 	sth	fp,14(r17)
 8005e70:	88000415 	stw	zero,16(r17)
 8005e74:	88000515 	stw	zero,20(r17)
 8005e78:	88000615 	stw	zero,24(r17)
 8005e7c:	80078e00 	call	80078e0 <memset>
 8005e80:	94000317 	ldw	r16,12(r18)
 8005e84:	00800484 	movi	r2,18
 8005e88:	8c400715 	stw	r17,28(r17)
 8005e8c:	8d800815 	stw	r22,32(r17)
 8005e90:	8d400915 	stw	r21,36(r17)
 8005e94:	8d000a15 	stw	r20,40(r17)
 8005e98:	8cc00b15 	stw	r19,44(r17)
 8005e9c:	8080030d 	sth	r2,12(r16)
 8005ea0:	00800084 	movi	r2,2
 8005ea4:	80000015 	stw	zero,0(r16)
 8005ea8:	80000115 	stw	zero,4(r16)
 8005eac:	80000215 	stw	zero,8(r16)
 8005eb0:	80001915 	stw	zero,100(r16)
 8005eb4:	8080038d 	sth	r2,14(r16)
 8005eb8:	80000415 	stw	zero,16(r16)
 8005ebc:	80000515 	stw	zero,20(r16)
 8005ec0:	80000615 	stw	zero,24(r16)
 8005ec4:	81001704 	addi	r4,r16,92
 8005ec8:	000b883a 	mov	r5,zero
 8005ecc:	b80d883a 	mov	r6,r23
 8005ed0:	80078e00 	call	80078e0 <memset>
 8005ed4:	84000715 	stw	r16,28(r16)
 8005ed8:	85800815 	stw	r22,32(r16)
 8005edc:	85400915 	stw	r21,36(r16)
 8005ee0:	85000a15 	stw	r20,40(r16)
 8005ee4:	84c00b15 	stw	r19,44(r16)
 8005ee8:	dfc00917 	ldw	ra,36(sp)
 8005eec:	df000817 	ldw	fp,32(sp)
 8005ef0:	ddc00717 	ldw	r23,28(sp)
 8005ef4:	dd800617 	ldw	r22,24(sp)
 8005ef8:	dd400517 	ldw	r21,20(sp)
 8005efc:	dd000417 	ldw	r20,16(sp)
 8005f00:	dcc00317 	ldw	r19,12(sp)
 8005f04:	dc800217 	ldw	r18,8(sp)
 8005f08:	dc400117 	ldw	r17,4(sp)
 8005f0c:	dc000017 	ldw	r16,0(sp)
 8005f10:	dec00a04 	addi	sp,sp,40
 8005f14:	f800283a 	ret

08005f18 <__sfmoreglue>:
 8005f18:	defffc04 	addi	sp,sp,-16
 8005f1c:	dc400115 	stw	r17,4(sp)
 8005f20:	2c401a24 	muli	r17,r5,104
 8005f24:	dc800215 	stw	r18,8(sp)
 8005f28:	2825883a 	mov	r18,r5
 8005f2c:	89400304 	addi	r5,r17,12
 8005f30:	dc000015 	stw	r16,0(sp)
 8005f34:	dfc00315 	stw	ra,12(sp)
 8005f38:	8006dbc0 	call	8006dbc <_malloc_r>
 8005f3c:	1021883a 	mov	r16,r2
 8005f40:	10000726 	beq	r2,zero,8005f60 <__sfmoreglue+0x48>
 8005f44:	11000304 	addi	r4,r2,12
 8005f48:	10000015 	stw	zero,0(r2)
 8005f4c:	14800115 	stw	r18,4(r2)
 8005f50:	11000215 	stw	r4,8(r2)
 8005f54:	000b883a 	mov	r5,zero
 8005f58:	880d883a 	mov	r6,r17
 8005f5c:	80078e00 	call	80078e0 <memset>
 8005f60:	8005883a 	mov	r2,r16
 8005f64:	dfc00317 	ldw	ra,12(sp)
 8005f68:	dc800217 	ldw	r18,8(sp)
 8005f6c:	dc400117 	ldw	r17,4(sp)
 8005f70:	dc000017 	ldw	r16,0(sp)
 8005f74:	dec00404 	addi	sp,sp,16
 8005f78:	f800283a 	ret

08005f7c <__sfp>:
 8005f7c:	008200b4 	movhi	r2,2050
 8005f80:	defffb04 	addi	sp,sp,-20
 8005f84:	10b59e04 	addi	r2,r2,-10632
 8005f88:	dc800215 	stw	r18,8(sp)
 8005f8c:	14800017 	ldw	r18,0(r2)
 8005f90:	dcc00315 	stw	r19,12(sp)
 8005f94:	dfc00415 	stw	ra,16(sp)
 8005f98:	90800e17 	ldw	r2,56(r18)
 8005f9c:	dc400115 	stw	r17,4(sp)
 8005fa0:	dc000015 	stw	r16,0(sp)
 8005fa4:	2027883a 	mov	r19,r4
 8005fa8:	1000021e 	bne	r2,zero,8005fb4 <__sfp+0x38>
 8005fac:	9009883a 	mov	r4,r18
 8005fb0:	8005d780 	call	8005d78 <__sinit.part.1>
 8005fb4:	9480b804 	addi	r18,r18,736
 8005fb8:	047fffc4 	movi	r17,-1
 8005fbc:	91400117 	ldw	r5,4(r18)
 8005fc0:	94000217 	ldw	r16,8(r18)
 8005fc4:	297fffc4 	addi	r5,r5,-1
 8005fc8:	28000a16 	blt	r5,zero,8005ff4 <__sfp+0x78>
 8005fcc:	8080030f 	ldh	r2,12(r16)
 8005fd0:	10000c26 	beq	r2,zero,8006004 <__sfp+0x88>
 8005fd4:	80c01d04 	addi	r3,r16,116
 8005fd8:	00000206 	br	8005fe4 <__sfp+0x68>
 8005fdc:	18bfe60f 	ldh	r2,-104(r3)
 8005fe0:	10000826 	beq	r2,zero,8006004 <__sfp+0x88>
 8005fe4:	297fffc4 	addi	r5,r5,-1
 8005fe8:	1c3ffd04 	addi	r16,r3,-12
 8005fec:	18c01a04 	addi	r3,r3,104
 8005ff0:	2c7ffa1e 	bne	r5,r17,8005fdc <__alt_data_end+0xfc005fdc>
 8005ff4:	90800017 	ldw	r2,0(r18)
 8005ff8:	10001d26 	beq	r2,zero,8006070 <__sfp+0xf4>
 8005ffc:	1025883a 	mov	r18,r2
 8006000:	003fee06 	br	8005fbc <__alt_data_end+0xfc005fbc>
 8006004:	00bfffc4 	movi	r2,-1
 8006008:	8080038d 	sth	r2,14(r16)
 800600c:	00800044 	movi	r2,1
 8006010:	8080030d 	sth	r2,12(r16)
 8006014:	80001915 	stw	zero,100(r16)
 8006018:	80000015 	stw	zero,0(r16)
 800601c:	80000215 	stw	zero,8(r16)
 8006020:	80000115 	stw	zero,4(r16)
 8006024:	80000415 	stw	zero,16(r16)
 8006028:	80000515 	stw	zero,20(r16)
 800602c:	80000615 	stw	zero,24(r16)
 8006030:	81001704 	addi	r4,r16,92
 8006034:	000b883a 	mov	r5,zero
 8006038:	01800204 	movi	r6,8
 800603c:	80078e00 	call	80078e0 <memset>
 8006040:	8005883a 	mov	r2,r16
 8006044:	80000c15 	stw	zero,48(r16)
 8006048:	80000d15 	stw	zero,52(r16)
 800604c:	80001115 	stw	zero,68(r16)
 8006050:	80001215 	stw	zero,72(r16)
 8006054:	dfc00417 	ldw	ra,16(sp)
 8006058:	dcc00317 	ldw	r19,12(sp)
 800605c:	dc800217 	ldw	r18,8(sp)
 8006060:	dc400117 	ldw	r17,4(sp)
 8006064:	dc000017 	ldw	r16,0(sp)
 8006068:	dec00504 	addi	sp,sp,20
 800606c:	f800283a 	ret
 8006070:	9809883a 	mov	r4,r19
 8006074:	01400104 	movi	r5,4
 8006078:	8005f180 	call	8005f18 <__sfmoreglue>
 800607c:	90800015 	stw	r2,0(r18)
 8006080:	103fde1e 	bne	r2,zero,8005ffc <__alt_data_end+0xfc005ffc>
 8006084:	00800304 	movi	r2,12
 8006088:	98800015 	stw	r2,0(r19)
 800608c:	0005883a 	mov	r2,zero
 8006090:	003ff006 	br	8006054 <__alt_data_end+0xfc006054>

08006094 <_cleanup>:
 8006094:	008200b4 	movhi	r2,2050
 8006098:	10b59e04 	addi	r2,r2,-10632
 800609c:	11000017 	ldw	r4,0(r2)
 80060a0:	01420074 	movhi	r5,2049
 80060a4:	296a3804 	addi	r5,r5,-22304
 80060a8:	80069b41 	jmpi	80069b4 <_fwalk>

080060ac <__sinit>:
 80060ac:	20800e17 	ldw	r2,56(r4)
 80060b0:	10000126 	beq	r2,zero,80060b8 <__sinit+0xc>
 80060b4:	f800283a 	ret
 80060b8:	8005d781 	jmpi	8005d78 <__sinit.part.1>

080060bc <__sfp_lock_acquire>:
 80060bc:	f800283a 	ret

080060c0 <__sfp_lock_release>:
 80060c0:	f800283a 	ret

080060c4 <__sinit_lock_acquire>:
 80060c4:	f800283a 	ret

080060c8 <__sinit_lock_release>:
 80060c8:	f800283a 	ret

080060cc <__fp_lock_all>:
 80060cc:	008200b4 	movhi	r2,2050
 80060d0:	10b59f04 	addi	r2,r2,-10628
 80060d4:	11000017 	ldw	r4,0(r2)
 80060d8:	01420034 	movhi	r5,2048
 80060dc:	29575704 	addi	r5,r5,23900
 80060e0:	80069b41 	jmpi	80069b4 <_fwalk>

080060e4 <__fp_unlock_all>:
 80060e4:	008200b4 	movhi	r2,2050
 80060e8:	10b59f04 	addi	r2,r2,-10628
 80060ec:	11000017 	ldw	r4,0(r2)
 80060f0:	01420034 	movhi	r5,2048
 80060f4:	29575904 	addi	r5,r5,23908
 80060f8:	80069b41 	jmpi	80069b4 <_fwalk>

080060fc <_malloc_trim_r>:
 80060fc:	defffb04 	addi	sp,sp,-20
 8006100:	dcc00315 	stw	r19,12(sp)
 8006104:	04c200b4 	movhi	r19,2050
 8006108:	dc800215 	stw	r18,8(sp)
 800610c:	dc400115 	stw	r17,4(sp)
 8006110:	dc000015 	stw	r16,0(sp)
 8006114:	dfc00415 	stw	ra,16(sp)
 8006118:	2821883a 	mov	r16,r5
 800611c:	9cf00e04 	addi	r19,r19,-16328
 8006120:	2025883a 	mov	r18,r4
 8006124:	800e7e00 	call	800e7e0 <__malloc_lock>
 8006128:	98800217 	ldw	r2,8(r19)
 800612c:	14400117 	ldw	r17,4(r2)
 8006130:	00bfff04 	movi	r2,-4
 8006134:	88a2703a 	and	r17,r17,r2
 8006138:	8c21c83a 	sub	r16,r17,r16
 800613c:	8403fbc4 	addi	r16,r16,4079
 8006140:	8020d33a 	srli	r16,r16,12
 8006144:	0083ffc4 	movi	r2,4095
 8006148:	843fffc4 	addi	r16,r16,-1
 800614c:	8020933a 	slli	r16,r16,12
 8006150:	1400060e 	bge	r2,r16,800616c <_malloc_trim_r+0x70>
 8006154:	9009883a 	mov	r4,r18
 8006158:	000b883a 	mov	r5,zero
 800615c:	8008fa40 	call	8008fa4 <_sbrk_r>
 8006160:	98c00217 	ldw	r3,8(r19)
 8006164:	1c47883a 	add	r3,r3,r17
 8006168:	10c00a26 	beq	r2,r3,8006194 <_malloc_trim_r+0x98>
 800616c:	9009883a 	mov	r4,r18
 8006170:	800e8000 	call	800e800 <__malloc_unlock>
 8006174:	0005883a 	mov	r2,zero
 8006178:	dfc00417 	ldw	ra,16(sp)
 800617c:	dcc00317 	ldw	r19,12(sp)
 8006180:	dc800217 	ldw	r18,8(sp)
 8006184:	dc400117 	ldw	r17,4(sp)
 8006188:	dc000017 	ldw	r16,0(sp)
 800618c:	dec00504 	addi	sp,sp,20
 8006190:	f800283a 	ret
 8006194:	9009883a 	mov	r4,r18
 8006198:	040bc83a 	sub	r5,zero,r16
 800619c:	8008fa40 	call	8008fa4 <_sbrk_r>
 80061a0:	00ffffc4 	movi	r3,-1
 80061a4:	10c00d26 	beq	r2,r3,80061dc <_malloc_trim_r+0xe0>
 80061a8:	00c200b4 	movhi	r3,2050
 80061ac:	18fc8604 	addi	r3,r3,-3560
 80061b0:	18800017 	ldw	r2,0(r3)
 80061b4:	99000217 	ldw	r4,8(r19)
 80061b8:	8c23c83a 	sub	r17,r17,r16
 80061bc:	8c400054 	ori	r17,r17,1
 80061c0:	1421c83a 	sub	r16,r2,r16
 80061c4:	24400115 	stw	r17,4(r4)
 80061c8:	9009883a 	mov	r4,r18
 80061cc:	1c000015 	stw	r16,0(r3)
 80061d0:	800e8000 	call	800e800 <__malloc_unlock>
 80061d4:	00800044 	movi	r2,1
 80061d8:	003fe706 	br	8006178 <__alt_data_end+0xfc006178>
 80061dc:	9009883a 	mov	r4,r18
 80061e0:	000b883a 	mov	r5,zero
 80061e4:	8008fa40 	call	8008fa4 <_sbrk_r>
 80061e8:	99000217 	ldw	r4,8(r19)
 80061ec:	014003c4 	movi	r5,15
 80061f0:	1107c83a 	sub	r3,r2,r4
 80061f4:	28ffdd0e 	bge	r5,r3,800616c <__alt_data_end+0xfc00616c>
 80061f8:	014200b4 	movhi	r5,2050
 80061fc:	2975a104 	addi	r5,r5,-10620
 8006200:	29400017 	ldw	r5,0(r5)
 8006204:	18c00054 	ori	r3,r3,1
 8006208:	20c00115 	stw	r3,4(r4)
 800620c:	00c200b4 	movhi	r3,2050
 8006210:	1145c83a 	sub	r2,r2,r5
 8006214:	18fc8604 	addi	r3,r3,-3560
 8006218:	18800015 	stw	r2,0(r3)
 800621c:	003fd306 	br	800616c <__alt_data_end+0xfc00616c>

08006220 <_free_r>:
 8006220:	28004c26 	beq	r5,zero,8006354 <_free_r+0x134>
 8006224:	defffd04 	addi	sp,sp,-12
 8006228:	dc400115 	stw	r17,4(sp)
 800622c:	dc000015 	stw	r16,0(sp)
 8006230:	2023883a 	mov	r17,r4
 8006234:	2821883a 	mov	r16,r5
 8006238:	dfc00215 	stw	ra,8(sp)
 800623c:	800e7e00 	call	800e7e0 <__malloc_lock>
 8006240:	813fff17 	ldw	r4,-4(r16)
 8006244:	00bfff84 	movi	r2,-2
 8006248:	024200b4 	movhi	r9,2050
 800624c:	81bffe04 	addi	r6,r16,-8
 8006250:	2084703a 	and	r2,r4,r2
 8006254:	4a700e04 	addi	r9,r9,-16328
 8006258:	308b883a 	add	r5,r6,r2
 800625c:	2a000117 	ldw	r8,4(r5)
 8006260:	49c00217 	ldw	r7,8(r9)
 8006264:	00ffff04 	movi	r3,-4
 8006268:	40c6703a 	and	r3,r8,r3
 800626c:	39405326 	beq	r7,r5,80063bc <_free_r+0x19c>
 8006270:	28c00115 	stw	r3,4(r5)
 8006274:	2100004c 	andi	r4,r4,1
 8006278:	2000091e 	bne	r4,zero,80062a0 <_free_r+0x80>
 800627c:	81fffe17 	ldw	r7,-8(r16)
 8006280:	4a000204 	addi	r8,r9,8
 8006284:	31cdc83a 	sub	r6,r6,r7
 8006288:	31000217 	ldw	r4,8(r6)
 800628c:	11c5883a 	add	r2,r2,r7
 8006290:	22006126 	beq	r4,r8,8006418 <_free_r+0x1f8>
 8006294:	31c00317 	ldw	r7,12(r6)
 8006298:	21c00315 	stw	r7,12(r4)
 800629c:	39000215 	stw	r4,8(r7)
 80062a0:	28c9883a 	add	r4,r5,r3
 80062a4:	21c00117 	ldw	r7,4(r4)
 80062a8:	39c0004c 	andi	r7,r7,1
 80062ac:	38000d1e 	bne	r7,zero,80062e4 <_free_r+0xc4>
 80062b0:	29000217 	ldw	r4,8(r5)
 80062b4:	10c5883a 	add	r2,r2,r3
 80062b8:	00c200b4 	movhi	r3,2050
 80062bc:	18f01004 	addi	r3,r3,-16320
 80062c0:	20c07526 	beq	r4,r3,8006498 <_free_r+0x278>
 80062c4:	29c00317 	ldw	r7,12(r5)
 80062c8:	11400054 	ori	r5,r2,1
 80062cc:	3087883a 	add	r3,r6,r2
 80062d0:	21c00315 	stw	r7,12(r4)
 80062d4:	39000215 	stw	r4,8(r7)
 80062d8:	31400115 	stw	r5,4(r6)
 80062dc:	18800015 	stw	r2,0(r3)
 80062e0:	00000406 	br	80062f4 <_free_r+0xd4>
 80062e4:	10c00054 	ori	r3,r2,1
 80062e8:	30c00115 	stw	r3,4(r6)
 80062ec:	3087883a 	add	r3,r6,r2
 80062f0:	18800015 	stw	r2,0(r3)
 80062f4:	00c07fc4 	movi	r3,511
 80062f8:	18801736 	bltu	r3,r2,8006358 <_free_r+0x138>
 80062fc:	1004d0fa 	srli	r2,r2,3
 8006300:	01400044 	movi	r5,1
 8006304:	49000117 	ldw	r4,4(r9)
 8006308:	1087883a 	add	r3,r2,r2
 800630c:	18c7883a 	add	r3,r3,r3
 8006310:	1005d0ba 	srai	r2,r2,2
 8006314:	18c7883a 	add	r3,r3,r3
 8006318:	1a47883a 	add	r3,r3,r9
 800631c:	19c00217 	ldw	r7,8(r3)
 8006320:	2884983a 	sll	r2,r5,r2
 8006324:	30c00315 	stw	r3,12(r6)
 8006328:	31c00215 	stw	r7,8(r6)
 800632c:	1104b03a 	or	r2,r2,r4
 8006330:	19800215 	stw	r6,8(r3)
 8006334:	48800115 	stw	r2,4(r9)
 8006338:	39800315 	stw	r6,12(r7)
 800633c:	8809883a 	mov	r4,r17
 8006340:	dfc00217 	ldw	ra,8(sp)
 8006344:	dc400117 	ldw	r17,4(sp)
 8006348:	dc000017 	ldw	r16,0(sp)
 800634c:	dec00304 	addi	sp,sp,12
 8006350:	800e8001 	jmpi	800e800 <__malloc_unlock>
 8006354:	f800283a 	ret
 8006358:	1006d27a 	srli	r3,r2,9
 800635c:	01000104 	movi	r4,4
 8006360:	20c04036 	bltu	r4,r3,8006464 <_free_r+0x244>
 8006364:	1006d1ba 	srli	r3,r2,6
 8006368:	19400e04 	addi	r5,r3,56
 800636c:	2947883a 	add	r3,r5,r5
 8006370:	18c7883a 	add	r3,r3,r3
 8006374:	18c7883a 	add	r3,r3,r3
 8006378:	1a49883a 	add	r4,r3,r9
 800637c:	20c00217 	ldw	r3,8(r4)
 8006380:	01c200b4 	movhi	r7,2050
 8006384:	39f00e04 	addi	r7,r7,-16328
 8006388:	19003b26 	beq	r3,r4,8006478 <_free_r+0x258>
 800638c:	01ffff04 	movi	r7,-4
 8006390:	19400117 	ldw	r5,4(r3)
 8006394:	29ca703a 	and	r5,r5,r7
 8006398:	1140022e 	bgeu	r2,r5,80063a4 <_free_r+0x184>
 800639c:	18c00217 	ldw	r3,8(r3)
 80063a0:	20fffb1e 	bne	r4,r3,8006390 <__alt_data_end+0xfc006390>
 80063a4:	18800317 	ldw	r2,12(r3)
 80063a8:	30800315 	stw	r2,12(r6)
 80063ac:	30c00215 	stw	r3,8(r6)
 80063b0:	11800215 	stw	r6,8(r2)
 80063b4:	19800315 	stw	r6,12(r3)
 80063b8:	003fe006 	br	800633c <__alt_data_end+0xfc00633c>
 80063bc:	2100004c 	andi	r4,r4,1
 80063c0:	1885883a 	add	r2,r3,r2
 80063c4:	2000071e 	bne	r4,zero,80063e4 <_free_r+0x1c4>
 80063c8:	817ffe17 	ldw	r5,-8(r16)
 80063cc:	314dc83a 	sub	r6,r6,r5
 80063d0:	30c00317 	ldw	r3,12(r6)
 80063d4:	31000217 	ldw	r4,8(r6)
 80063d8:	1145883a 	add	r2,r2,r5
 80063dc:	20c00315 	stw	r3,12(r4)
 80063e0:	19000215 	stw	r4,8(r3)
 80063e4:	10c00054 	ori	r3,r2,1
 80063e8:	30c00115 	stw	r3,4(r6)
 80063ec:	00c200b4 	movhi	r3,2050
 80063f0:	18f5a204 	addi	r3,r3,-10616
 80063f4:	18c00017 	ldw	r3,0(r3)
 80063f8:	49800215 	stw	r6,8(r9)
 80063fc:	10ffcf36 	bltu	r2,r3,800633c <__alt_data_end+0xfc00633c>
 8006400:	008200b4 	movhi	r2,2050
 8006404:	10bc7e04 	addi	r2,r2,-3592
 8006408:	11400017 	ldw	r5,0(r2)
 800640c:	8809883a 	mov	r4,r17
 8006410:	80060fc0 	call	80060fc <_malloc_trim_r>
 8006414:	003fc906 	br	800633c <__alt_data_end+0xfc00633c>
 8006418:	28c9883a 	add	r4,r5,r3
 800641c:	21000117 	ldw	r4,4(r4)
 8006420:	2100004c 	andi	r4,r4,1
 8006424:	20000a1e 	bne	r4,zero,8006450 <_free_r+0x230>
 8006428:	29000317 	ldw	r4,12(r5)
 800642c:	29400217 	ldw	r5,8(r5)
 8006430:	10c5883a 	add	r2,r2,r3
 8006434:	10c00054 	ori	r3,r2,1
 8006438:	29000315 	stw	r4,12(r5)
 800643c:	21400215 	stw	r5,8(r4)
 8006440:	30c00115 	stw	r3,4(r6)
 8006444:	308d883a 	add	r6,r6,r2
 8006448:	30800015 	stw	r2,0(r6)
 800644c:	003fbb06 	br	800633c <__alt_data_end+0xfc00633c>
 8006450:	10c00054 	ori	r3,r2,1
 8006454:	30c00115 	stw	r3,4(r6)
 8006458:	308d883a 	add	r6,r6,r2
 800645c:	30800015 	stw	r2,0(r6)
 8006460:	003fb606 	br	800633c <__alt_data_end+0xfc00633c>
 8006464:	01000504 	movi	r4,20
 8006468:	20c01436 	bltu	r4,r3,80064bc <_free_r+0x29c>
 800646c:	194016c4 	addi	r5,r3,91
 8006470:	2947883a 	add	r3,r5,r5
 8006474:	003fbe06 	br	8006370 <__alt_data_end+0xfc006370>
 8006478:	280bd0ba 	srai	r5,r5,2
 800647c:	00800044 	movi	r2,1
 8006480:	39000117 	ldw	r4,4(r7)
 8006484:	114a983a 	sll	r5,r2,r5
 8006488:	1805883a 	mov	r2,r3
 800648c:	2908b03a 	or	r4,r5,r4
 8006490:	39000115 	stw	r4,4(r7)
 8006494:	003fc406 	br	80063a8 <__alt_data_end+0xfc0063a8>
 8006498:	49800515 	stw	r6,20(r9)
 800649c:	49800415 	stw	r6,16(r9)
 80064a0:	10c00054 	ori	r3,r2,1
 80064a4:	31000315 	stw	r4,12(r6)
 80064a8:	31000215 	stw	r4,8(r6)
 80064ac:	30c00115 	stw	r3,4(r6)
 80064b0:	308d883a 	add	r6,r6,r2
 80064b4:	30800015 	stw	r2,0(r6)
 80064b8:	003fa006 	br	800633c <__alt_data_end+0xfc00633c>
 80064bc:	01001504 	movi	r4,84
 80064c0:	20c00436 	bltu	r4,r3,80064d4 <_free_r+0x2b4>
 80064c4:	1006d33a 	srli	r3,r2,12
 80064c8:	19401b84 	addi	r5,r3,110
 80064cc:	2947883a 	add	r3,r5,r5
 80064d0:	003fa706 	br	8006370 <__alt_data_end+0xfc006370>
 80064d4:	01005504 	movi	r4,340
 80064d8:	20c00436 	bltu	r4,r3,80064ec <_free_r+0x2cc>
 80064dc:	1006d3fa 	srli	r3,r2,15
 80064e0:	19401dc4 	addi	r5,r3,119
 80064e4:	2947883a 	add	r3,r5,r5
 80064e8:	003fa106 	br	8006370 <__alt_data_end+0xfc006370>
 80064ec:	01015504 	movi	r4,1364
 80064f0:	20c00436 	bltu	r4,r3,8006504 <_free_r+0x2e4>
 80064f4:	1006d4ba 	srli	r3,r2,18
 80064f8:	19401f04 	addi	r5,r3,124
 80064fc:	2947883a 	add	r3,r5,r5
 8006500:	003f9b06 	br	8006370 <__alt_data_end+0xfc006370>
 8006504:	00c03f04 	movi	r3,252
 8006508:	01401f84 	movi	r5,126
 800650c:	003f9806 	br	8006370 <__alt_data_end+0xfc006370>

08006510 <__sfvwrite_r>:
 8006510:	30800217 	ldw	r2,8(r6)
 8006514:	10004526 	beq	r2,zero,800662c <__sfvwrite_r+0x11c>
 8006518:	28c0030b 	ldhu	r3,12(r5)
 800651c:	defff404 	addi	sp,sp,-48
 8006520:	dd400715 	stw	r21,28(sp)
 8006524:	dcc00515 	stw	r19,20(sp)
 8006528:	dc000215 	stw	r16,8(sp)
 800652c:	dfc00b15 	stw	ra,44(sp)
 8006530:	df000a15 	stw	fp,40(sp)
 8006534:	ddc00915 	stw	r23,36(sp)
 8006538:	dd800815 	stw	r22,32(sp)
 800653c:	dd000615 	stw	r20,24(sp)
 8006540:	dc800415 	stw	r18,16(sp)
 8006544:	dc400315 	stw	r17,12(sp)
 8006548:	1880020c 	andi	r2,r3,8
 800654c:	2821883a 	mov	r16,r5
 8006550:	202b883a 	mov	r21,r4
 8006554:	3027883a 	mov	r19,r6
 8006558:	10002526 	beq	r2,zero,80065f0 <__sfvwrite_r+0xe0>
 800655c:	28800417 	ldw	r2,16(r5)
 8006560:	10002326 	beq	r2,zero,80065f0 <__sfvwrite_r+0xe0>
 8006564:	1880008c 	andi	r2,r3,2
 8006568:	9c400017 	ldw	r17,0(r19)
 800656c:	10003126 	beq	r2,zero,8006634 <__sfvwrite_r+0x124>
 8006570:	0029883a 	mov	r20,zero
 8006574:	0025883a 	mov	r18,zero
 8006578:	05810004 	movi	r22,1024
 800657c:	a00d883a 	mov	r6,r20
 8006580:	a809883a 	mov	r4,r21
 8006584:	90002526 	beq	r18,zero,800661c <__sfvwrite_r+0x10c>
 8006588:	900f883a 	mov	r7,r18
 800658c:	81400717 	ldw	r5,28(r16)
 8006590:	b480012e 	bgeu	r22,r18,8006598 <__sfvwrite_r+0x88>
 8006594:	01c10004 	movi	r7,1024
 8006598:	80800917 	ldw	r2,36(r16)
 800659c:	103ee83a 	callr	r2
 80065a0:	0080510e 	bge	zero,r2,80066e8 <__sfvwrite_r+0x1d8>
 80065a4:	98c00217 	ldw	r3,8(r19)
 80065a8:	a0a9883a 	add	r20,r20,r2
 80065ac:	90a5c83a 	sub	r18,r18,r2
 80065b0:	1885c83a 	sub	r2,r3,r2
 80065b4:	98800215 	stw	r2,8(r19)
 80065b8:	103ff01e 	bne	r2,zero,800657c <__alt_data_end+0xfc00657c>
 80065bc:	0005883a 	mov	r2,zero
 80065c0:	dfc00b17 	ldw	ra,44(sp)
 80065c4:	df000a17 	ldw	fp,40(sp)
 80065c8:	ddc00917 	ldw	r23,36(sp)
 80065cc:	dd800817 	ldw	r22,32(sp)
 80065d0:	dd400717 	ldw	r21,28(sp)
 80065d4:	dd000617 	ldw	r20,24(sp)
 80065d8:	dcc00517 	ldw	r19,20(sp)
 80065dc:	dc800417 	ldw	r18,16(sp)
 80065e0:	dc400317 	ldw	r17,12(sp)
 80065e4:	dc000217 	ldw	r16,8(sp)
 80065e8:	dec00c04 	addi	sp,sp,48
 80065ec:	f800283a 	ret
 80065f0:	a809883a 	mov	r4,r21
 80065f4:	800b883a 	mov	r5,r16
 80065f8:	80040ac0 	call	80040ac <__swsetup_r>
 80065fc:	80c0030b 	ldhu	r3,12(r16)
 8006600:	103fd826 	beq	r2,zero,8006564 <__alt_data_end+0xfc006564>
 8006604:	18c01014 	ori	r3,r3,64
 8006608:	80c0030d 	sth	r3,12(r16)
 800660c:	00c00244 	movi	r3,9
 8006610:	00bfffc4 	movi	r2,-1
 8006614:	a8c00015 	stw	r3,0(r21)
 8006618:	003fe906 	br	80065c0 <__alt_data_end+0xfc0065c0>
 800661c:	8d000017 	ldw	r20,0(r17)
 8006620:	8c800117 	ldw	r18,4(r17)
 8006624:	8c400204 	addi	r17,r17,8
 8006628:	003fd406 	br	800657c <__alt_data_end+0xfc00657c>
 800662c:	0005883a 	mov	r2,zero
 8006630:	f800283a 	ret
 8006634:	1880004c 	andi	r2,r3,1
 8006638:	1000301e 	bne	r2,zero,80066fc <__sfvwrite_r+0x1ec>
 800663c:	002f883a 	mov	r23,zero
 8006640:	0025883a 	mov	r18,zero
 8006644:	90001c26 	beq	r18,zero,80066b8 <__sfvwrite_r+0x1a8>
 8006648:	1880800c 	andi	r2,r3,512
 800664c:	85000217 	ldw	r20,8(r16)
 8006650:	10006c26 	beq	r2,zero,8006804 <__sfvwrite_r+0x2f4>
 8006654:	a02d883a 	mov	r22,r20
 8006658:	95008536 	bltu	r18,r20,8006870 <__sfvwrite_r+0x360>
 800665c:	1881200c 	andi	r2,r3,1152
 8006660:	10009d1e 	bne	r2,zero,80068d8 <__sfvwrite_r+0x3c8>
 8006664:	81000017 	ldw	r4,0(r16)
 8006668:	a039883a 	mov	fp,r20
 800666c:	9029883a 	mov	r20,r18
 8006670:	b80b883a 	mov	r5,r23
 8006674:	b00d883a 	mov	r6,r22
 8006678:	80077840 	call	8007784 <memmove>
 800667c:	80c00217 	ldw	r3,8(r16)
 8006680:	81000017 	ldw	r4,0(r16)
 8006684:	9005883a 	mov	r2,r18
 8006688:	1f39c83a 	sub	fp,r3,fp
 800668c:	258f883a 	add	r7,r4,r22
 8006690:	87000215 	stw	fp,8(r16)
 8006694:	81c00015 	stw	r7,0(r16)
 8006698:	98c00217 	ldw	r3,8(r19)
 800669c:	b8af883a 	add	r23,r23,r2
 80066a0:	90a5c83a 	sub	r18,r18,r2
 80066a4:	1d05c83a 	sub	r2,r3,r20
 80066a8:	98800215 	stw	r2,8(r19)
 80066ac:	103fc326 	beq	r2,zero,80065bc <__alt_data_end+0xfc0065bc>
 80066b0:	80c0030b 	ldhu	r3,12(r16)
 80066b4:	903fe41e 	bne	r18,zero,8006648 <__alt_data_end+0xfc006648>
 80066b8:	8dc00017 	ldw	r23,0(r17)
 80066bc:	8c800117 	ldw	r18,4(r17)
 80066c0:	8c400204 	addi	r17,r17,8
 80066c4:	003fdf06 	br	8006644 <__alt_data_end+0xfc006644>
 80066c8:	80089900 	call	8008990 <_realloc_r>
 80066cc:	102d883a 	mov	r22,r2
 80066d0:	1000a01e 	bne	r2,zero,8006954 <__sfvwrite_r+0x444>
 80066d4:	81400417 	ldw	r5,16(r16)
 80066d8:	a809883a 	mov	r4,r21
 80066dc:	80062200 	call	8006220 <_free_r>
 80066e0:	00800304 	movi	r2,12
 80066e4:	a8800015 	stw	r2,0(r21)
 80066e8:	80c0030b 	ldhu	r3,12(r16)
 80066ec:	00bfffc4 	movi	r2,-1
 80066f0:	18c01014 	ori	r3,r3,64
 80066f4:	80c0030d 	sth	r3,12(r16)
 80066f8:	003fb106 	br	80065c0 <__alt_data_end+0xfc0065c0>
 80066fc:	0029883a 	mov	r20,zero
 8006700:	0011883a 	mov	r8,zero
 8006704:	0039883a 	mov	fp,zero
 8006708:	0025883a 	mov	r18,zero
 800670c:	90001f26 	beq	r18,zero,800678c <__sfvwrite_r+0x27c>
 8006710:	40006826 	beq	r8,zero,80068b4 <__sfvwrite_r+0x3a4>
 8006714:	a02f883a 	mov	r23,r20
 8006718:	9500012e 	bgeu	r18,r20,8006720 <__sfvwrite_r+0x210>
 800671c:	902f883a 	mov	r23,r18
 8006720:	81000017 	ldw	r4,0(r16)
 8006724:	80800417 	ldw	r2,16(r16)
 8006728:	b82d883a 	mov	r22,r23
 800672c:	81800217 	ldw	r6,8(r16)
 8006730:	81c00517 	ldw	r7,20(r16)
 8006734:	1100022e 	bgeu	r2,r4,8006740 <__sfvwrite_r+0x230>
 8006738:	31c7883a 	add	r3,r6,r7
 800673c:	1dc01816 	blt	r3,r23,80067a0 <__sfvwrite_r+0x290>
 8006740:	b9c03f16 	blt	r23,r7,8006840 <__sfvwrite_r+0x330>
 8006744:	80800917 	ldw	r2,36(r16)
 8006748:	81400717 	ldw	r5,28(r16)
 800674c:	a809883a 	mov	r4,r21
 8006750:	da000115 	stw	r8,4(sp)
 8006754:	e00d883a 	mov	r6,fp
 8006758:	103ee83a 	callr	r2
 800675c:	102d883a 	mov	r22,r2
 8006760:	da000117 	ldw	r8,4(sp)
 8006764:	00bfe00e 	bge	zero,r2,80066e8 <__alt_data_end+0xfc0066e8>
 8006768:	a5a9c83a 	sub	r20,r20,r22
 800676c:	a0001f26 	beq	r20,zero,80067ec <__sfvwrite_r+0x2dc>
 8006770:	98800217 	ldw	r2,8(r19)
 8006774:	e5b9883a 	add	fp,fp,r22
 8006778:	95a5c83a 	sub	r18,r18,r22
 800677c:	15adc83a 	sub	r22,r2,r22
 8006780:	9d800215 	stw	r22,8(r19)
 8006784:	b03f8d26 	beq	r22,zero,80065bc <__alt_data_end+0xfc0065bc>
 8006788:	903fe11e 	bne	r18,zero,8006710 <__alt_data_end+0xfc006710>
 800678c:	8f000017 	ldw	fp,0(r17)
 8006790:	8c800117 	ldw	r18,4(r17)
 8006794:	0011883a 	mov	r8,zero
 8006798:	8c400204 	addi	r17,r17,8
 800679c:	003fdb06 	br	800670c <__alt_data_end+0xfc00670c>
 80067a0:	180d883a 	mov	r6,r3
 80067a4:	e00b883a 	mov	r5,fp
 80067a8:	da000115 	stw	r8,4(sp)
 80067ac:	d8c00015 	stw	r3,0(sp)
 80067b0:	80077840 	call	8007784 <memmove>
 80067b4:	d8c00017 	ldw	r3,0(sp)
 80067b8:	80800017 	ldw	r2,0(r16)
 80067bc:	a809883a 	mov	r4,r21
 80067c0:	800b883a 	mov	r5,r16
 80067c4:	10c5883a 	add	r2,r2,r3
 80067c8:	80800015 	stw	r2,0(r16)
 80067cc:	d8c00015 	stw	r3,0(sp)
 80067d0:	8005b040 	call	8005b04 <_fflush_r>
 80067d4:	d8c00017 	ldw	r3,0(sp)
 80067d8:	da000117 	ldw	r8,4(sp)
 80067dc:	103fc21e 	bne	r2,zero,80066e8 <__alt_data_end+0xfc0066e8>
 80067e0:	182d883a 	mov	r22,r3
 80067e4:	a5a9c83a 	sub	r20,r20,r22
 80067e8:	a03fe11e 	bne	r20,zero,8006770 <__alt_data_end+0xfc006770>
 80067ec:	a809883a 	mov	r4,r21
 80067f0:	800b883a 	mov	r5,r16
 80067f4:	8005b040 	call	8005b04 <_fflush_r>
 80067f8:	103fbb1e 	bne	r2,zero,80066e8 <__alt_data_end+0xfc0066e8>
 80067fc:	0011883a 	mov	r8,zero
 8006800:	003fdb06 	br	8006770 <__alt_data_end+0xfc006770>
 8006804:	81000017 	ldw	r4,0(r16)
 8006808:	80800417 	ldw	r2,16(r16)
 800680c:	1100012e 	bgeu	r2,r4,8006814 <__sfvwrite_r+0x304>
 8006810:	a4805a36 	bltu	r20,r18,800697c <__sfvwrite_r+0x46c>
 8006814:	81c00517 	ldw	r7,20(r16)
 8006818:	91c01a36 	bltu	r18,r7,8006884 <__sfvwrite_r+0x374>
 800681c:	80800917 	ldw	r2,36(r16)
 8006820:	81400717 	ldw	r5,28(r16)
 8006824:	a809883a 	mov	r4,r21
 8006828:	b80d883a 	mov	r6,r23
 800682c:	103ee83a 	callr	r2
 8006830:	1029883a 	mov	r20,r2
 8006834:	00bfac0e 	bge	zero,r2,80066e8 <__alt_data_end+0xfc0066e8>
 8006838:	a005883a 	mov	r2,r20
 800683c:	003f9606 	br	8006698 <__alt_data_end+0xfc006698>
 8006840:	b80d883a 	mov	r6,r23
 8006844:	e00b883a 	mov	r5,fp
 8006848:	da000115 	stw	r8,4(sp)
 800684c:	80077840 	call	8007784 <memmove>
 8006850:	80800217 	ldw	r2,8(r16)
 8006854:	80c00017 	ldw	r3,0(r16)
 8006858:	da000117 	ldw	r8,4(sp)
 800685c:	15c5c83a 	sub	r2,r2,r23
 8006860:	1def883a 	add	r23,r3,r23
 8006864:	80800215 	stw	r2,8(r16)
 8006868:	85c00015 	stw	r23,0(r16)
 800686c:	003fbe06 	br	8006768 <__alt_data_end+0xfc006768>
 8006870:	81000017 	ldw	r4,0(r16)
 8006874:	9039883a 	mov	fp,r18
 8006878:	9029883a 	mov	r20,r18
 800687c:	902d883a 	mov	r22,r18
 8006880:	003f7b06 	br	8006670 <__alt_data_end+0xfc006670>
 8006884:	b80b883a 	mov	r5,r23
 8006888:	900d883a 	mov	r6,r18
 800688c:	80077840 	call	8007784 <memmove>
 8006890:	80c00217 	ldw	r3,8(r16)
 8006894:	80800017 	ldw	r2,0(r16)
 8006898:	9029883a 	mov	r20,r18
 800689c:	1c87c83a 	sub	r3,r3,r18
 80068a0:	1485883a 	add	r2,r2,r18
 80068a4:	80800015 	stw	r2,0(r16)
 80068a8:	80c00215 	stw	r3,8(r16)
 80068ac:	9005883a 	mov	r2,r18
 80068b0:	003f7906 	br	8006698 <__alt_data_end+0xfc006698>
 80068b4:	e009883a 	mov	r4,fp
 80068b8:	01400284 	movi	r5,10
 80068bc:	900d883a 	mov	r6,r18
 80068c0:	80075640 	call	8007564 <memchr>
 80068c4:	10003826 	beq	r2,zero,80069a8 <__sfvwrite_r+0x498>
 80068c8:	10800044 	addi	r2,r2,1
 80068cc:	1729c83a 	sub	r20,r2,fp
 80068d0:	02000044 	movi	r8,1
 80068d4:	003f8f06 	br	8006714 <__alt_data_end+0xfc006714>
 80068d8:	80800517 	ldw	r2,20(r16)
 80068dc:	81400417 	ldw	r5,16(r16)
 80068e0:	87000017 	ldw	fp,0(r16)
 80068e4:	10a9883a 	add	r20,r2,r2
 80068e8:	a085883a 	add	r2,r20,r2
 80068ec:	1028d7fa 	srli	r20,r2,31
 80068f0:	e179c83a 	sub	fp,fp,r5
 80068f4:	e1000044 	addi	r4,fp,1
 80068f8:	a085883a 	add	r2,r20,r2
 80068fc:	1029d07a 	srai	r20,r2,1
 8006900:	2485883a 	add	r2,r4,r18
 8006904:	a00d883a 	mov	r6,r20
 8006908:	a080022e 	bgeu	r20,r2,8006914 <__sfvwrite_r+0x404>
 800690c:	1029883a 	mov	r20,r2
 8006910:	100d883a 	mov	r6,r2
 8006914:	18c1000c 	andi	r3,r3,1024
 8006918:	a809883a 	mov	r4,r21
 800691c:	183f6a26 	beq	r3,zero,80066c8 <__alt_data_end+0xfc0066c8>
 8006920:	300b883a 	mov	r5,r6
 8006924:	8006dbc0 	call	8006dbc <_malloc_r>
 8006928:	102d883a 	mov	r22,r2
 800692c:	103f6c26 	beq	r2,zero,80066e0 <__alt_data_end+0xfc0066e0>
 8006930:	81400417 	ldw	r5,16(r16)
 8006934:	1009883a 	mov	r4,r2
 8006938:	e00d883a 	mov	r6,fp
 800693c:	800764c0 	call	800764c <memcpy>
 8006940:	8080030b 	ldhu	r2,12(r16)
 8006944:	00fedfc4 	movi	r3,-1153
 8006948:	10c4703a 	and	r2,r2,r3
 800694c:	10802014 	ori	r2,r2,128
 8006950:	8080030d 	sth	r2,12(r16)
 8006954:	b709883a 	add	r4,r22,fp
 8006958:	a707c83a 	sub	r3,r20,fp
 800695c:	85800415 	stw	r22,16(r16)
 8006960:	85000515 	stw	r20,20(r16)
 8006964:	81000015 	stw	r4,0(r16)
 8006968:	9039883a 	mov	fp,r18
 800696c:	80c00215 	stw	r3,8(r16)
 8006970:	9029883a 	mov	r20,r18
 8006974:	902d883a 	mov	r22,r18
 8006978:	003f3d06 	br	8006670 <__alt_data_end+0xfc006670>
 800697c:	b80b883a 	mov	r5,r23
 8006980:	a00d883a 	mov	r6,r20
 8006984:	80077840 	call	8007784 <memmove>
 8006988:	80800017 	ldw	r2,0(r16)
 800698c:	a809883a 	mov	r4,r21
 8006990:	800b883a 	mov	r5,r16
 8006994:	1505883a 	add	r2,r2,r20
 8006998:	80800015 	stw	r2,0(r16)
 800699c:	8005b040 	call	8005b04 <_fflush_r>
 80069a0:	103fa526 	beq	r2,zero,8006838 <__alt_data_end+0xfc006838>
 80069a4:	003f5006 	br	80066e8 <__alt_data_end+0xfc0066e8>
 80069a8:	95000044 	addi	r20,r18,1
 80069ac:	02000044 	movi	r8,1
 80069b0:	003f5806 	br	8006714 <__alt_data_end+0xfc006714>

080069b4 <_fwalk>:
 80069b4:	defff804 	addi	sp,sp,-32
 80069b8:	dd400515 	stw	r21,20(sp)
 80069bc:	2540b804 	addi	r21,r4,736
 80069c0:	dd800615 	stw	r22,24(sp)
 80069c4:	dd000415 	stw	r20,16(sp)
 80069c8:	dfc00715 	stw	ra,28(sp)
 80069cc:	dcc00315 	stw	r19,12(sp)
 80069d0:	dc800215 	stw	r18,8(sp)
 80069d4:	dc400115 	stw	r17,4(sp)
 80069d8:	dc000015 	stw	r16,0(sp)
 80069dc:	2829883a 	mov	r20,r5
 80069e0:	002d883a 	mov	r22,zero
 80069e4:	80060bc0 	call	80060bc <__sfp_lock_acquire>
 80069e8:	a8001426 	beq	r21,zero,8006a3c <_fwalk+0x88>
 80069ec:	04ffffc4 	movi	r19,-1
 80069f0:	ac400117 	ldw	r17,4(r21)
 80069f4:	ac800217 	ldw	r18,8(r21)
 80069f8:	8c7fffc4 	addi	r17,r17,-1
 80069fc:	88000d16 	blt	r17,zero,8006a34 <_fwalk+0x80>
 8006a00:	94000304 	addi	r16,r18,12
 8006a04:	94800384 	addi	r18,r18,14
 8006a08:	80c0000f 	ldh	r3,0(r16)
 8006a0c:	8c7fffc4 	addi	r17,r17,-1
 8006a10:	813ffd04 	addi	r4,r16,-12
 8006a14:	18000426 	beq	r3,zero,8006a28 <_fwalk+0x74>
 8006a18:	90c0000f 	ldh	r3,0(r18)
 8006a1c:	1cc00226 	beq	r3,r19,8006a28 <_fwalk+0x74>
 8006a20:	a03ee83a 	callr	r20
 8006a24:	b0acb03a 	or	r22,r22,r2
 8006a28:	84001a04 	addi	r16,r16,104
 8006a2c:	94801a04 	addi	r18,r18,104
 8006a30:	8cfff51e 	bne	r17,r19,8006a08 <__alt_data_end+0xfc006a08>
 8006a34:	ad400017 	ldw	r21,0(r21)
 8006a38:	a83fed1e 	bne	r21,zero,80069f0 <__alt_data_end+0xfc0069f0>
 8006a3c:	80060c00 	call	80060c0 <__sfp_lock_release>
 8006a40:	b005883a 	mov	r2,r22
 8006a44:	dfc00717 	ldw	ra,28(sp)
 8006a48:	dd800617 	ldw	r22,24(sp)
 8006a4c:	dd400517 	ldw	r21,20(sp)
 8006a50:	dd000417 	ldw	r20,16(sp)
 8006a54:	dcc00317 	ldw	r19,12(sp)
 8006a58:	dc800217 	ldw	r18,8(sp)
 8006a5c:	dc400117 	ldw	r17,4(sp)
 8006a60:	dc000017 	ldw	r16,0(sp)
 8006a64:	dec00804 	addi	sp,sp,32
 8006a68:	f800283a 	ret

08006a6c <_fwalk_reent>:
 8006a6c:	defff804 	addi	sp,sp,-32
 8006a70:	dd400515 	stw	r21,20(sp)
 8006a74:	2540b804 	addi	r21,r4,736
 8006a78:	dd800615 	stw	r22,24(sp)
 8006a7c:	dd000415 	stw	r20,16(sp)
 8006a80:	dcc00315 	stw	r19,12(sp)
 8006a84:	dfc00715 	stw	ra,28(sp)
 8006a88:	dc800215 	stw	r18,8(sp)
 8006a8c:	dc400115 	stw	r17,4(sp)
 8006a90:	dc000015 	stw	r16,0(sp)
 8006a94:	2027883a 	mov	r19,r4
 8006a98:	2829883a 	mov	r20,r5
 8006a9c:	002d883a 	mov	r22,zero
 8006aa0:	80060bc0 	call	80060bc <__sfp_lock_acquire>
 8006aa4:	a8001326 	beq	r21,zero,8006af4 <_fwalk_reent+0x88>
 8006aa8:	04bfffc4 	movi	r18,-1
 8006aac:	ac400117 	ldw	r17,4(r21)
 8006ab0:	ac000217 	ldw	r16,8(r21)
 8006ab4:	8c7fffc4 	addi	r17,r17,-1
 8006ab8:	88000c16 	blt	r17,zero,8006aec <_fwalk_reent+0x80>
 8006abc:	84000304 	addi	r16,r16,12
 8006ac0:	80c0000f 	ldh	r3,0(r16)
 8006ac4:	8c7fffc4 	addi	r17,r17,-1
 8006ac8:	817ffd04 	addi	r5,r16,-12
 8006acc:	18000526 	beq	r3,zero,8006ae4 <_fwalk_reent+0x78>
 8006ad0:	80c0008f 	ldh	r3,2(r16)
 8006ad4:	9809883a 	mov	r4,r19
 8006ad8:	1c800226 	beq	r3,r18,8006ae4 <_fwalk_reent+0x78>
 8006adc:	a03ee83a 	callr	r20
 8006ae0:	b0acb03a 	or	r22,r22,r2
 8006ae4:	84001a04 	addi	r16,r16,104
 8006ae8:	8cbff51e 	bne	r17,r18,8006ac0 <__alt_data_end+0xfc006ac0>
 8006aec:	ad400017 	ldw	r21,0(r21)
 8006af0:	a83fee1e 	bne	r21,zero,8006aac <__alt_data_end+0xfc006aac>
 8006af4:	80060c00 	call	80060c0 <__sfp_lock_release>
 8006af8:	b005883a 	mov	r2,r22
 8006afc:	dfc00717 	ldw	ra,28(sp)
 8006b00:	dd800617 	ldw	r22,24(sp)
 8006b04:	dd400517 	ldw	r21,20(sp)
 8006b08:	dd000417 	ldw	r20,16(sp)
 8006b0c:	dcc00317 	ldw	r19,12(sp)
 8006b10:	dc800217 	ldw	r18,8(sp)
 8006b14:	dc400117 	ldw	r17,4(sp)
 8006b18:	dc000017 	ldw	r16,0(sp)
 8006b1c:	dec00804 	addi	sp,sp,32
 8006b20:	f800283a 	ret

08006b24 <_setlocale_r>:
 8006b24:	30001b26 	beq	r6,zero,8006b94 <_setlocale_r+0x70>
 8006b28:	014200b4 	movhi	r5,2050
 8006b2c:	defffe04 	addi	sp,sp,-8
 8006b30:	296e4004 	addi	r5,r5,-18176
 8006b34:	3009883a 	mov	r4,r6
 8006b38:	dc000015 	stw	r16,0(sp)
 8006b3c:	dfc00115 	stw	ra,4(sp)
 8006b40:	3021883a 	mov	r16,r6
 8006b44:	80091340 	call	8009134 <strcmp>
 8006b48:	1000061e 	bne	r2,zero,8006b64 <_setlocale_r+0x40>
 8006b4c:	008200b4 	movhi	r2,2050
 8006b50:	10ae3f04 	addi	r2,r2,-18180
 8006b54:	dfc00117 	ldw	ra,4(sp)
 8006b58:	dc000017 	ldw	r16,0(sp)
 8006b5c:	dec00204 	addi	sp,sp,8
 8006b60:	f800283a 	ret
 8006b64:	014200b4 	movhi	r5,2050
 8006b68:	296e3f04 	addi	r5,r5,-18180
 8006b6c:	8009883a 	mov	r4,r16
 8006b70:	80091340 	call	8009134 <strcmp>
 8006b74:	103ff526 	beq	r2,zero,8006b4c <__alt_data_end+0xfc006b4c>
 8006b78:	014200b4 	movhi	r5,2050
 8006b7c:	296e2a04 	addi	r5,r5,-18264
 8006b80:	8009883a 	mov	r4,r16
 8006b84:	80091340 	call	8009134 <strcmp>
 8006b88:	103ff026 	beq	r2,zero,8006b4c <__alt_data_end+0xfc006b4c>
 8006b8c:	0005883a 	mov	r2,zero
 8006b90:	003ff006 	br	8006b54 <__alt_data_end+0xfc006b54>
 8006b94:	008200b4 	movhi	r2,2050
 8006b98:	10ae3f04 	addi	r2,r2,-18180
 8006b9c:	f800283a 	ret

08006ba0 <__locale_charset>:
 8006ba0:	008200b4 	movhi	r2,2050
 8006ba4:	10aff804 	addi	r2,r2,-16416
 8006ba8:	f800283a 	ret

08006bac <__locale_mb_cur_max>:
 8006bac:	008200b4 	movhi	r2,2050
 8006bb0:	10b5a004 	addi	r2,r2,-10624
 8006bb4:	10800017 	ldw	r2,0(r2)
 8006bb8:	f800283a 	ret

08006bbc <__locale_msgcharset>:
 8006bbc:	008200b4 	movhi	r2,2050
 8006bc0:	10aff004 	addi	r2,r2,-16448
 8006bc4:	f800283a 	ret

08006bc8 <__locale_cjk_lang>:
 8006bc8:	0005883a 	mov	r2,zero
 8006bcc:	f800283a 	ret

08006bd0 <_localeconv_r>:
 8006bd0:	008200b4 	movhi	r2,2050
 8006bd4:	10b00004 	addi	r2,r2,-16384
 8006bd8:	f800283a 	ret

08006bdc <setlocale>:
 8006bdc:	00c200b4 	movhi	r3,2050
 8006be0:	18f59f04 	addi	r3,r3,-10628
 8006be4:	2005883a 	mov	r2,r4
 8006be8:	19000017 	ldw	r4,0(r3)
 8006bec:	280d883a 	mov	r6,r5
 8006bf0:	100b883a 	mov	r5,r2
 8006bf4:	8006b241 	jmpi	8006b24 <_setlocale_r>

08006bf8 <localeconv>:
 8006bf8:	008200b4 	movhi	r2,2050
 8006bfc:	10b00004 	addi	r2,r2,-16384
 8006c00:	f800283a 	ret

08006c04 <__smakebuf_r>:
 8006c04:	2880030b 	ldhu	r2,12(r5)
 8006c08:	10c0008c 	andi	r3,r2,2
 8006c0c:	1800401e 	bne	r3,zero,8006d10 <__smakebuf_r+0x10c>
 8006c10:	deffec04 	addi	sp,sp,-80
 8006c14:	dc000f15 	stw	r16,60(sp)
 8006c18:	2821883a 	mov	r16,r5
 8006c1c:	2940038f 	ldh	r5,14(r5)
 8006c20:	dc401015 	stw	r17,64(sp)
 8006c24:	dfc01315 	stw	ra,76(sp)
 8006c28:	dcc01215 	stw	r19,72(sp)
 8006c2c:	dc801115 	stw	r18,68(sp)
 8006c30:	2023883a 	mov	r17,r4
 8006c34:	28001b16 	blt	r5,zero,8006ca4 <__smakebuf_r+0xa0>
 8006c38:	d80d883a 	mov	r6,sp
 8006c3c:	800aad00 	call	800aad0 <_fstat_r>
 8006c40:	10001716 	blt	r2,zero,8006ca0 <__smakebuf_r+0x9c>
 8006c44:	d8800117 	ldw	r2,4(sp)
 8006c48:	00e00014 	movui	r3,32768
 8006c4c:	10bc000c 	andi	r2,r2,61440
 8006c50:	10c03726 	beq	r2,r3,8006d30 <__smakebuf_r+0x12c>
 8006c54:	80c0030b 	ldhu	r3,12(r16)
 8006c58:	18c20014 	ori	r3,r3,2048
 8006c5c:	80c0030d 	sth	r3,12(r16)
 8006c60:	00c80004 	movi	r3,8192
 8006c64:	10c03c1e 	bne	r2,r3,8006d58 <__smakebuf_r+0x154>
 8006c68:	8140038f 	ldh	r5,14(r16)
 8006c6c:	8809883a 	mov	r4,r17
 8006c70:	800ab280 	call	800ab28 <_isatty_r>
 8006c74:	10004e26 	beq	r2,zero,8006db0 <__smakebuf_r+0x1ac>
 8006c78:	8080030b 	ldhu	r2,12(r16)
 8006c7c:	04c00044 	movi	r19,1
 8006c80:	80c010c4 	addi	r3,r16,67
 8006c84:	14c4b03a 	or	r2,r2,r19
 8006c88:	8080030d 	sth	r2,12(r16)
 8006c8c:	80c00015 	stw	r3,0(r16)
 8006c90:	80c00415 	stw	r3,16(r16)
 8006c94:	84c00515 	stw	r19,20(r16)
 8006c98:	04810004 	movi	r18,1024
 8006c9c:	00000706 	br	8006cbc <__smakebuf_r+0xb8>
 8006ca0:	8080030b 	ldhu	r2,12(r16)
 8006ca4:	10c0200c 	andi	r3,r2,128
 8006ca8:	18001f1e 	bne	r3,zero,8006d28 <__smakebuf_r+0x124>
 8006cac:	04810004 	movi	r18,1024
 8006cb0:	10820014 	ori	r2,r2,2048
 8006cb4:	8080030d 	sth	r2,12(r16)
 8006cb8:	0027883a 	mov	r19,zero
 8006cbc:	8809883a 	mov	r4,r17
 8006cc0:	900b883a 	mov	r5,r18
 8006cc4:	8006dbc0 	call	8006dbc <_malloc_r>
 8006cc8:	10002e26 	beq	r2,zero,8006d84 <__smakebuf_r+0x180>
 8006ccc:	80c0030b 	ldhu	r3,12(r16)
 8006cd0:	01020034 	movhi	r4,2048
 8006cd4:	21175b04 	addi	r4,r4,23916
 8006cd8:	89000f15 	stw	r4,60(r17)
 8006cdc:	18c02014 	ori	r3,r3,128
 8006ce0:	80c0030d 	sth	r3,12(r16)
 8006ce4:	80800015 	stw	r2,0(r16)
 8006ce8:	80800415 	stw	r2,16(r16)
 8006cec:	84800515 	stw	r18,20(r16)
 8006cf0:	98001c1e 	bne	r19,zero,8006d64 <__smakebuf_r+0x160>
 8006cf4:	dfc01317 	ldw	ra,76(sp)
 8006cf8:	dcc01217 	ldw	r19,72(sp)
 8006cfc:	dc801117 	ldw	r18,68(sp)
 8006d00:	dc401017 	ldw	r17,64(sp)
 8006d04:	dc000f17 	ldw	r16,60(sp)
 8006d08:	dec01404 	addi	sp,sp,80
 8006d0c:	f800283a 	ret
 8006d10:	288010c4 	addi	r2,r5,67
 8006d14:	28800015 	stw	r2,0(r5)
 8006d18:	28800415 	stw	r2,16(r5)
 8006d1c:	00800044 	movi	r2,1
 8006d20:	28800515 	stw	r2,20(r5)
 8006d24:	f800283a 	ret
 8006d28:	04801004 	movi	r18,64
 8006d2c:	003fe006 	br	8006cb0 <__alt_data_end+0xfc006cb0>
 8006d30:	81000a17 	ldw	r4,40(r16)
 8006d34:	00c20074 	movhi	r3,2049
 8006d38:	18e43404 	addi	r3,r3,-28464
 8006d3c:	20ffc51e 	bne	r4,r3,8006c54 <__alt_data_end+0xfc006c54>
 8006d40:	80c0030b 	ldhu	r3,12(r16)
 8006d44:	01010004 	movi	r4,1024
 8006d48:	81001315 	stw	r4,76(r16)
 8006d4c:	1906b03a 	or	r3,r3,r4
 8006d50:	80c0030d 	sth	r3,12(r16)
 8006d54:	003fc206 	br	8006c60 <__alt_data_end+0xfc006c60>
 8006d58:	0027883a 	mov	r19,zero
 8006d5c:	04810004 	movi	r18,1024
 8006d60:	003fd606 	br	8006cbc <__alt_data_end+0xfc006cbc>
 8006d64:	8140038f 	ldh	r5,14(r16)
 8006d68:	8809883a 	mov	r4,r17
 8006d6c:	800ab280 	call	800ab28 <_isatty_r>
 8006d70:	103fe026 	beq	r2,zero,8006cf4 <__alt_data_end+0xfc006cf4>
 8006d74:	8080030b 	ldhu	r2,12(r16)
 8006d78:	10800054 	ori	r2,r2,1
 8006d7c:	8080030d 	sth	r2,12(r16)
 8006d80:	003fdc06 	br	8006cf4 <__alt_data_end+0xfc006cf4>
 8006d84:	8080030b 	ldhu	r2,12(r16)
 8006d88:	10c0800c 	andi	r3,r2,512
 8006d8c:	183fd91e 	bne	r3,zero,8006cf4 <__alt_data_end+0xfc006cf4>
 8006d90:	10800094 	ori	r2,r2,2
 8006d94:	80c010c4 	addi	r3,r16,67
 8006d98:	8080030d 	sth	r2,12(r16)
 8006d9c:	00800044 	movi	r2,1
 8006da0:	80c00015 	stw	r3,0(r16)
 8006da4:	80c00415 	stw	r3,16(r16)
 8006da8:	80800515 	stw	r2,20(r16)
 8006dac:	003fd106 	br	8006cf4 <__alt_data_end+0xfc006cf4>
 8006db0:	04c00044 	movi	r19,1
 8006db4:	04810004 	movi	r18,1024
 8006db8:	003fc006 	br	8006cbc <__alt_data_end+0xfc006cbc>

08006dbc <_malloc_r>:
 8006dbc:	defff504 	addi	sp,sp,-44
 8006dc0:	dc800315 	stw	r18,12(sp)
 8006dc4:	dfc00a15 	stw	ra,40(sp)
 8006dc8:	df000915 	stw	fp,36(sp)
 8006dcc:	ddc00815 	stw	r23,32(sp)
 8006dd0:	dd800715 	stw	r22,28(sp)
 8006dd4:	dd400615 	stw	r21,24(sp)
 8006dd8:	dd000515 	stw	r20,20(sp)
 8006ddc:	dcc00415 	stw	r19,16(sp)
 8006de0:	dc400215 	stw	r17,8(sp)
 8006de4:	dc000115 	stw	r16,4(sp)
 8006de8:	288002c4 	addi	r2,r5,11
 8006dec:	00c00584 	movi	r3,22
 8006df0:	2025883a 	mov	r18,r4
 8006df4:	18802a2e 	bgeu	r3,r2,8006ea0 <_malloc_r+0xe4>
 8006df8:	047ffe04 	movi	r17,-8
 8006dfc:	1462703a 	and	r17,r2,r17
 8006e00:	88009e16 	blt	r17,zero,800707c <_malloc_r+0x2c0>
 8006e04:	89409d36 	bltu	r17,r5,800707c <_malloc_r+0x2c0>
 8006e08:	800e7e00 	call	800e7e0 <__malloc_lock>
 8006e0c:	00807dc4 	movi	r2,503
 8006e10:	14402736 	bltu	r2,r17,8006eb0 <_malloc_r+0xf4>
 8006e14:	8806d0fa 	srli	r3,r17,3
 8006e18:	04c200b4 	movhi	r19,2050
 8006e1c:	9cf00e04 	addi	r19,r19,-16328
 8006e20:	18c5883a 	add	r2,r3,r3
 8006e24:	1085883a 	add	r2,r2,r2
 8006e28:	1085883a 	add	r2,r2,r2
 8006e2c:	9885883a 	add	r2,r19,r2
 8006e30:	14000317 	ldw	r16,12(r2)
 8006e34:	80814a26 	beq	r16,r2,8007360 <_malloc_r+0x5a4>
 8006e38:	80c00117 	ldw	r3,4(r16)
 8006e3c:	81000317 	ldw	r4,12(r16)
 8006e40:	00bfff04 	movi	r2,-4
 8006e44:	1884703a 	and	r2,r3,r2
 8006e48:	81400217 	ldw	r5,8(r16)
 8006e4c:	8085883a 	add	r2,r16,r2
 8006e50:	10c00117 	ldw	r3,4(r2)
 8006e54:	29000315 	stw	r4,12(r5)
 8006e58:	21400215 	stw	r5,8(r4)
 8006e5c:	18c00054 	ori	r3,r3,1
 8006e60:	10c00115 	stw	r3,4(r2)
 8006e64:	9009883a 	mov	r4,r18
 8006e68:	800e8000 	call	800e800 <__malloc_unlock>
 8006e6c:	80800204 	addi	r2,r16,8
 8006e70:	dfc00a17 	ldw	ra,40(sp)
 8006e74:	df000917 	ldw	fp,36(sp)
 8006e78:	ddc00817 	ldw	r23,32(sp)
 8006e7c:	dd800717 	ldw	r22,28(sp)
 8006e80:	dd400617 	ldw	r21,24(sp)
 8006e84:	dd000517 	ldw	r20,20(sp)
 8006e88:	dcc00417 	ldw	r19,16(sp)
 8006e8c:	dc800317 	ldw	r18,12(sp)
 8006e90:	dc400217 	ldw	r17,8(sp)
 8006e94:	dc000117 	ldw	r16,4(sp)
 8006e98:	dec00b04 	addi	sp,sp,44
 8006e9c:	f800283a 	ret
 8006ea0:	04400404 	movi	r17,16
 8006ea4:	89407536 	bltu	r17,r5,800707c <_malloc_r+0x2c0>
 8006ea8:	800e7e00 	call	800e7e0 <__malloc_lock>
 8006eac:	003fd906 	br	8006e14 <__alt_data_end+0xfc006e14>
 8006eb0:	8806d27a 	srli	r3,r17,9
 8006eb4:	18007526 	beq	r3,zero,800708c <_malloc_r+0x2d0>
 8006eb8:	00800104 	movi	r2,4
 8006ebc:	10c0ef36 	bltu	r2,r3,800727c <_malloc_r+0x4c0>
 8006ec0:	8806d1ba 	srli	r3,r17,6
 8006ec4:	19c00e04 	addi	r7,r3,56
 8006ec8:	39cb883a 	add	r5,r7,r7
 8006ecc:	04c200b4 	movhi	r19,2050
 8006ed0:	294b883a 	add	r5,r5,r5
 8006ed4:	9cf00e04 	addi	r19,r19,-16328
 8006ed8:	294b883a 	add	r5,r5,r5
 8006edc:	994b883a 	add	r5,r19,r5
 8006ee0:	2c000317 	ldw	r16,12(r5)
 8006ee4:	2c000e26 	beq	r5,r16,8006f20 <_malloc_r+0x164>
 8006ee8:	80800117 	ldw	r2,4(r16)
 8006eec:	01bfff04 	movi	r6,-4
 8006ef0:	010003c4 	movi	r4,15
 8006ef4:	1184703a 	and	r2,r2,r6
 8006ef8:	1447c83a 	sub	r3,r2,r17
 8006efc:	20c00716 	blt	r4,r3,8006f1c <_malloc_r+0x160>
 8006f00:	1800650e 	bge	r3,zero,8007098 <_malloc_r+0x2dc>
 8006f04:	84000317 	ldw	r16,12(r16)
 8006f08:	2c000526 	beq	r5,r16,8006f20 <_malloc_r+0x164>
 8006f0c:	80800117 	ldw	r2,4(r16)
 8006f10:	1184703a 	and	r2,r2,r6
 8006f14:	1447c83a 	sub	r3,r2,r17
 8006f18:	20fff90e 	bge	r4,r3,8006f00 <__alt_data_end+0xfc006f00>
 8006f1c:	39ffffc4 	addi	r7,r7,-1
 8006f20:	38c00044 	addi	r3,r7,1
 8006f24:	018200b4 	movhi	r6,2050
 8006f28:	9c000417 	ldw	r16,16(r19)
 8006f2c:	31b00e04 	addi	r6,r6,-16328
 8006f30:	32400204 	addi	r9,r6,8
 8006f34:	82410326 	beq	r16,r9,8007344 <_malloc_r+0x588>
 8006f38:	81000117 	ldw	r4,4(r16)
 8006f3c:	00bfff04 	movi	r2,-4
 8006f40:	208e703a 	and	r7,r4,r2
 8006f44:	3c45c83a 	sub	r2,r7,r17
 8006f48:	010003c4 	movi	r4,15
 8006f4c:	2080ee16 	blt	r4,r2,8007308 <_malloc_r+0x54c>
 8006f50:	32400515 	stw	r9,20(r6)
 8006f54:	32400415 	stw	r9,16(r6)
 8006f58:	1000510e 	bge	r2,zero,80070a0 <_malloc_r+0x2e4>
 8006f5c:	00807fc4 	movi	r2,511
 8006f60:	11c0ce36 	bltu	r2,r7,800729c <_malloc_r+0x4e0>
 8006f64:	3808d0fa 	srli	r4,r7,3
 8006f68:	01c00044 	movi	r7,1
 8006f6c:	30800117 	ldw	r2,4(r6)
 8006f70:	210b883a 	add	r5,r4,r4
 8006f74:	294b883a 	add	r5,r5,r5
 8006f78:	2009d0ba 	srai	r4,r4,2
 8006f7c:	294b883a 	add	r5,r5,r5
 8006f80:	298b883a 	add	r5,r5,r6
 8006f84:	2a000217 	ldw	r8,8(r5)
 8006f88:	3908983a 	sll	r4,r7,r4
 8006f8c:	81400315 	stw	r5,12(r16)
 8006f90:	82000215 	stw	r8,8(r16)
 8006f94:	2088b03a 	or	r4,r4,r2
 8006f98:	2c000215 	stw	r16,8(r5)
 8006f9c:	31000115 	stw	r4,4(r6)
 8006fa0:	44000315 	stw	r16,12(r8)
 8006fa4:	1805d0ba 	srai	r2,r3,2
 8006fa8:	01400044 	movi	r5,1
 8006fac:	288a983a 	sll	r5,r5,r2
 8006fb0:	21404336 	bltu	r4,r5,80070c0 <_malloc_r+0x304>
 8006fb4:	2144703a 	and	r2,r4,r5
 8006fb8:	10000a1e 	bne	r2,zero,8006fe4 <_malloc_r+0x228>
 8006fbc:	00bfff04 	movi	r2,-4
 8006fc0:	294b883a 	add	r5,r5,r5
 8006fc4:	1886703a 	and	r3,r3,r2
 8006fc8:	2144703a 	and	r2,r4,r5
 8006fcc:	18c00104 	addi	r3,r3,4
 8006fd0:	1000041e 	bne	r2,zero,8006fe4 <_malloc_r+0x228>
 8006fd4:	294b883a 	add	r5,r5,r5
 8006fd8:	2144703a 	and	r2,r4,r5
 8006fdc:	18c00104 	addi	r3,r3,4
 8006fe0:	103ffc26 	beq	r2,zero,8006fd4 <__alt_data_end+0xfc006fd4>
 8006fe4:	023fff04 	movi	r8,-4
 8006fe8:	01c003c4 	movi	r7,15
 8006fec:	18c5883a 	add	r2,r3,r3
 8006ff0:	1085883a 	add	r2,r2,r2
 8006ff4:	1085883a 	add	r2,r2,r2
 8006ff8:	9895883a 	add	r10,r19,r2
 8006ffc:	52c00304 	addi	r11,r10,12
 8007000:	1819883a 	mov	r12,r3
 8007004:	5c000017 	ldw	r16,0(r11)
 8007008:	59bffd04 	addi	r6,r11,-12
 800700c:	8180041e 	bne	r16,r6,8007020 <_malloc_r+0x264>
 8007010:	0000ce06 	br	800734c <_malloc_r+0x590>
 8007014:	2000d70e 	bge	r4,zero,8007374 <_malloc_r+0x5b8>
 8007018:	84000317 	ldw	r16,12(r16)
 800701c:	8180cb26 	beq	r16,r6,800734c <_malloc_r+0x590>
 8007020:	80800117 	ldw	r2,4(r16)
 8007024:	1204703a 	and	r2,r2,r8
 8007028:	1449c83a 	sub	r4,r2,r17
 800702c:	393ff90e 	bge	r7,r4,8007014 <__alt_data_end+0xfc007014>
 8007030:	80800317 	ldw	r2,12(r16)
 8007034:	80c00217 	ldw	r3,8(r16)
 8007038:	89400054 	ori	r5,r17,1
 800703c:	81400115 	stw	r5,4(r16)
 8007040:	18800315 	stw	r2,12(r3)
 8007044:	10c00215 	stw	r3,8(r2)
 8007048:	8463883a 	add	r17,r16,r17
 800704c:	9c400515 	stw	r17,20(r19)
 8007050:	9c400415 	stw	r17,16(r19)
 8007054:	20800054 	ori	r2,r4,1
 8007058:	88800115 	stw	r2,4(r17)
 800705c:	8a400315 	stw	r9,12(r17)
 8007060:	8a400215 	stw	r9,8(r17)
 8007064:	8923883a 	add	r17,r17,r4
 8007068:	89000015 	stw	r4,0(r17)
 800706c:	9009883a 	mov	r4,r18
 8007070:	800e8000 	call	800e800 <__malloc_unlock>
 8007074:	80800204 	addi	r2,r16,8
 8007078:	003f7d06 	br	8006e70 <__alt_data_end+0xfc006e70>
 800707c:	00800304 	movi	r2,12
 8007080:	90800015 	stw	r2,0(r18)
 8007084:	0005883a 	mov	r2,zero
 8007088:	003f7906 	br	8006e70 <__alt_data_end+0xfc006e70>
 800708c:	01401f84 	movi	r5,126
 8007090:	01c00fc4 	movi	r7,63
 8007094:	003f8d06 	br	8006ecc <__alt_data_end+0xfc006ecc>
 8007098:	81000317 	ldw	r4,12(r16)
 800709c:	003f6a06 	br	8006e48 <__alt_data_end+0xfc006e48>
 80070a0:	81c5883a 	add	r2,r16,r7
 80070a4:	10c00117 	ldw	r3,4(r2)
 80070a8:	9009883a 	mov	r4,r18
 80070ac:	18c00054 	ori	r3,r3,1
 80070b0:	10c00115 	stw	r3,4(r2)
 80070b4:	800e8000 	call	800e800 <__malloc_unlock>
 80070b8:	80800204 	addi	r2,r16,8
 80070bc:	003f6c06 	br	8006e70 <__alt_data_end+0xfc006e70>
 80070c0:	9c000217 	ldw	r16,8(r19)
 80070c4:	00bfff04 	movi	r2,-4
 80070c8:	85800117 	ldw	r22,4(r16)
 80070cc:	b0ac703a 	and	r22,r22,r2
 80070d0:	b4400336 	bltu	r22,r17,80070e0 <_malloc_r+0x324>
 80070d4:	b445c83a 	sub	r2,r22,r17
 80070d8:	00c003c4 	movi	r3,15
 80070dc:	18805d16 	blt	r3,r2,8007254 <_malloc_r+0x498>
 80070e0:	05c200b4 	movhi	r23,2050
 80070e4:	008200b4 	movhi	r2,2050
 80070e8:	bdf5a104 	addi	r23,r23,-10620
 80070ec:	10bc7e04 	addi	r2,r2,-3592
 80070f0:	15400017 	ldw	r21,0(r2)
 80070f4:	b9000017 	ldw	r4,0(r23)
 80070f8:	00ffffc4 	movi	r3,-1
 80070fc:	858d883a 	add	r6,r16,r22
 8007100:	8d6b883a 	add	r21,r17,r21
 8007104:	20c0e426 	beq	r4,r3,8007498 <_malloc_r+0x6dc>
 8007108:	ad4403c4 	addi	r21,r21,4111
 800710c:	00fc0004 	movi	r3,-4096
 8007110:	a8ea703a 	and	r21,r21,r3
 8007114:	9009883a 	mov	r4,r18
 8007118:	a80b883a 	mov	r5,r21
 800711c:	d9800015 	stw	r6,0(sp)
 8007120:	8008fa40 	call	8008fa4 <_sbrk_r>
 8007124:	00ffffc4 	movi	r3,-1
 8007128:	1029883a 	mov	r20,r2
 800712c:	d9800017 	ldw	r6,0(sp)
 8007130:	10c0a426 	beq	r2,r3,80073c4 <_malloc_r+0x608>
 8007134:	1180a236 	bltu	r2,r6,80073c0 <_malloc_r+0x604>
 8007138:	070200b4 	movhi	fp,2050
 800713c:	e73c8604 	addi	fp,fp,-3560
 8007140:	e0c00017 	ldw	r3,0(fp)
 8007144:	a8c7883a 	add	r3,r21,r3
 8007148:	e0c00015 	stw	r3,0(fp)
 800714c:	3500da26 	beq	r6,r20,80074b8 <_malloc_r+0x6fc>
 8007150:	b9000017 	ldw	r4,0(r23)
 8007154:	00bfffc4 	movi	r2,-1
 8007158:	2080e426 	beq	r4,r2,80074ec <_malloc_r+0x730>
 800715c:	a185c83a 	sub	r2,r20,r6
 8007160:	1885883a 	add	r2,r3,r2
 8007164:	e0800015 	stw	r2,0(fp)
 8007168:	a0c001cc 	andi	r3,r20,7
 800716c:	1800b526 	beq	r3,zero,8007444 <_malloc_r+0x688>
 8007170:	a0e9c83a 	sub	r20,r20,r3
 8007174:	00840204 	movi	r2,4104
 8007178:	a5000204 	addi	r20,r20,8
 800717c:	10c7c83a 	sub	r3,r2,r3
 8007180:	a545883a 	add	r2,r20,r21
 8007184:	1083ffcc 	andi	r2,r2,4095
 8007188:	18abc83a 	sub	r21,r3,r2
 800718c:	9009883a 	mov	r4,r18
 8007190:	a80b883a 	mov	r5,r21
 8007194:	8008fa40 	call	8008fa4 <_sbrk_r>
 8007198:	00ffffc4 	movi	r3,-1
 800719c:	10c0d026 	beq	r2,r3,80074e0 <_malloc_r+0x724>
 80071a0:	1507c83a 	sub	r3,r2,r20
 80071a4:	a8c7883a 	add	r3,r21,r3
 80071a8:	18c00054 	ori	r3,r3,1
 80071ac:	e0800017 	ldw	r2,0(fp)
 80071b0:	9d000215 	stw	r20,8(r19)
 80071b4:	a0c00115 	stw	r3,4(r20)
 80071b8:	a887883a 	add	r3,r21,r2
 80071bc:	e0c00015 	stw	r3,0(fp)
 80071c0:	84c00e26 	beq	r16,r19,80071fc <_malloc_r+0x440>
 80071c4:	018003c4 	movi	r6,15
 80071c8:	3580a02e 	bgeu	r6,r22,800744c <_malloc_r+0x690>
 80071cc:	81400117 	ldw	r5,4(r16)
 80071d0:	013ffe04 	movi	r4,-8
 80071d4:	b0bffd04 	addi	r2,r22,-12
 80071d8:	1104703a 	and	r2,r2,r4
 80071dc:	2900004c 	andi	r4,r5,1
 80071e0:	1108b03a 	or	r4,r2,r4
 80071e4:	81000115 	stw	r4,4(r16)
 80071e8:	01400144 	movi	r5,5
 80071ec:	8089883a 	add	r4,r16,r2
 80071f0:	21400115 	stw	r5,4(r4)
 80071f4:	21400215 	stw	r5,8(r4)
 80071f8:	3080c036 	bltu	r6,r2,80074fc <_malloc_r+0x740>
 80071fc:	008200b4 	movhi	r2,2050
 8007200:	10bc7d04 	addi	r2,r2,-3596
 8007204:	11000017 	ldw	r4,0(r2)
 8007208:	20c0012e 	bgeu	r4,r3,8007210 <_malloc_r+0x454>
 800720c:	10c00015 	stw	r3,0(r2)
 8007210:	008200b4 	movhi	r2,2050
 8007214:	10bc7c04 	addi	r2,r2,-3600
 8007218:	11000017 	ldw	r4,0(r2)
 800721c:	9c000217 	ldw	r16,8(r19)
 8007220:	20c0012e 	bgeu	r4,r3,8007228 <_malloc_r+0x46c>
 8007224:	10c00015 	stw	r3,0(r2)
 8007228:	80c00117 	ldw	r3,4(r16)
 800722c:	00bfff04 	movi	r2,-4
 8007230:	1886703a 	and	r3,r3,r2
 8007234:	1c45c83a 	sub	r2,r3,r17
 8007238:	1c400236 	bltu	r3,r17,8007244 <_malloc_r+0x488>
 800723c:	00c003c4 	movi	r3,15
 8007240:	18800416 	blt	r3,r2,8007254 <_malloc_r+0x498>
 8007244:	9009883a 	mov	r4,r18
 8007248:	800e8000 	call	800e800 <__malloc_unlock>
 800724c:	0005883a 	mov	r2,zero
 8007250:	003f0706 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007254:	88c00054 	ori	r3,r17,1
 8007258:	80c00115 	stw	r3,4(r16)
 800725c:	8463883a 	add	r17,r16,r17
 8007260:	10800054 	ori	r2,r2,1
 8007264:	9c400215 	stw	r17,8(r19)
 8007268:	88800115 	stw	r2,4(r17)
 800726c:	9009883a 	mov	r4,r18
 8007270:	800e8000 	call	800e800 <__malloc_unlock>
 8007274:	80800204 	addi	r2,r16,8
 8007278:	003efd06 	br	8006e70 <__alt_data_end+0xfc006e70>
 800727c:	00800504 	movi	r2,20
 8007280:	10c0482e 	bgeu	r2,r3,80073a4 <_malloc_r+0x5e8>
 8007284:	00801504 	movi	r2,84
 8007288:	10c06836 	bltu	r2,r3,800742c <_malloc_r+0x670>
 800728c:	8806d33a 	srli	r3,r17,12
 8007290:	19c01b84 	addi	r7,r3,110
 8007294:	39cb883a 	add	r5,r7,r7
 8007298:	003f0c06 	br	8006ecc <__alt_data_end+0xfc006ecc>
 800729c:	3804d27a 	srli	r2,r7,9
 80072a0:	01000104 	movi	r4,4
 80072a4:	2080422e 	bgeu	r4,r2,80073b0 <_malloc_r+0x5f4>
 80072a8:	01000504 	movi	r4,20
 80072ac:	20807c36 	bltu	r4,r2,80074a0 <_malloc_r+0x6e4>
 80072b0:	110016c4 	addi	r4,r2,91
 80072b4:	210b883a 	add	r5,r4,r4
 80072b8:	294b883a 	add	r5,r5,r5
 80072bc:	294b883a 	add	r5,r5,r5
 80072c0:	994b883a 	add	r5,r19,r5
 80072c4:	28800217 	ldw	r2,8(r5)
 80072c8:	020200b4 	movhi	r8,2050
 80072cc:	42300e04 	addi	r8,r8,-16328
 80072d0:	11406326 	beq	r2,r5,8007460 <_malloc_r+0x6a4>
 80072d4:	01bfff04 	movi	r6,-4
 80072d8:	11000117 	ldw	r4,4(r2)
 80072dc:	2188703a 	and	r4,r4,r6
 80072e0:	3900022e 	bgeu	r7,r4,80072ec <_malloc_r+0x530>
 80072e4:	10800217 	ldw	r2,8(r2)
 80072e8:	28bffb1e 	bne	r5,r2,80072d8 <__alt_data_end+0xfc0072d8>
 80072ec:	11800317 	ldw	r6,12(r2)
 80072f0:	99000117 	ldw	r4,4(r19)
 80072f4:	81800315 	stw	r6,12(r16)
 80072f8:	80800215 	stw	r2,8(r16)
 80072fc:	34000215 	stw	r16,8(r6)
 8007300:	14000315 	stw	r16,12(r2)
 8007304:	003f2706 	br	8006fa4 <__alt_data_end+0xfc006fa4>
 8007308:	88c00054 	ori	r3,r17,1
 800730c:	80c00115 	stw	r3,4(r16)
 8007310:	8463883a 	add	r17,r16,r17
 8007314:	34400515 	stw	r17,20(r6)
 8007318:	34400415 	stw	r17,16(r6)
 800731c:	10c00054 	ori	r3,r2,1
 8007320:	8a400315 	stw	r9,12(r17)
 8007324:	8a400215 	stw	r9,8(r17)
 8007328:	88c00115 	stw	r3,4(r17)
 800732c:	88a3883a 	add	r17,r17,r2
 8007330:	88800015 	stw	r2,0(r17)
 8007334:	9009883a 	mov	r4,r18
 8007338:	800e8000 	call	800e800 <__malloc_unlock>
 800733c:	80800204 	addi	r2,r16,8
 8007340:	003ecb06 	br	8006e70 <__alt_data_end+0xfc006e70>
 8007344:	31000117 	ldw	r4,4(r6)
 8007348:	003f1606 	br	8006fa4 <__alt_data_end+0xfc006fa4>
 800734c:	63000044 	addi	r12,r12,1
 8007350:	608000cc 	andi	r2,r12,3
 8007354:	5ac00204 	addi	r11,r11,8
 8007358:	103f2a1e 	bne	r2,zero,8007004 <__alt_data_end+0xfc007004>
 800735c:	00002106 	br	80073e4 <_malloc_r+0x628>
 8007360:	80800204 	addi	r2,r16,8
 8007364:	84000517 	ldw	r16,20(r16)
 8007368:	143eb31e 	bne	r2,r16,8006e38 <__alt_data_end+0xfc006e38>
 800736c:	18c00084 	addi	r3,r3,2
 8007370:	003eec06 	br	8006f24 <__alt_data_end+0xfc006f24>
 8007374:	8085883a 	add	r2,r16,r2
 8007378:	10c00117 	ldw	r3,4(r2)
 800737c:	81000317 	ldw	r4,12(r16)
 8007380:	81400217 	ldw	r5,8(r16)
 8007384:	18c00054 	ori	r3,r3,1
 8007388:	10c00115 	stw	r3,4(r2)
 800738c:	29000315 	stw	r4,12(r5)
 8007390:	21400215 	stw	r5,8(r4)
 8007394:	9009883a 	mov	r4,r18
 8007398:	800e8000 	call	800e800 <__malloc_unlock>
 800739c:	80800204 	addi	r2,r16,8
 80073a0:	003eb306 	br	8006e70 <__alt_data_end+0xfc006e70>
 80073a4:	19c016c4 	addi	r7,r3,91
 80073a8:	39cb883a 	add	r5,r7,r7
 80073ac:	003ec706 	br	8006ecc <__alt_data_end+0xfc006ecc>
 80073b0:	3804d1ba 	srli	r2,r7,6
 80073b4:	11000e04 	addi	r4,r2,56
 80073b8:	210b883a 	add	r5,r4,r4
 80073bc:	003fbe06 	br	80072b8 <__alt_data_end+0xfc0072b8>
 80073c0:	84ff5d26 	beq	r16,r19,8007138 <__alt_data_end+0xfc007138>
 80073c4:	9c000217 	ldw	r16,8(r19)
 80073c8:	00bfff04 	movi	r2,-4
 80073cc:	80c00117 	ldw	r3,4(r16)
 80073d0:	1886703a 	and	r3,r3,r2
 80073d4:	003f9706 	br	8007234 <__alt_data_end+0xfc007234>
 80073d8:	52800017 	ldw	r10,0(r10)
 80073dc:	18ffffc4 	addi	r3,r3,-1
 80073e0:	50805c1e 	bne	r10,r2,8007554 <_malloc_r+0x798>
 80073e4:	190000cc 	andi	r4,r3,3
 80073e8:	50bffe04 	addi	r2,r10,-8
 80073ec:	203ffa1e 	bne	r4,zero,80073d8 <__alt_data_end+0xfc0073d8>
 80073f0:	98800117 	ldw	r2,4(r19)
 80073f4:	0146303a 	nor	r3,zero,r5
 80073f8:	1884703a 	and	r2,r3,r2
 80073fc:	98800115 	stw	r2,4(r19)
 8007400:	294b883a 	add	r5,r5,r5
 8007404:	117f2e36 	bltu	r2,r5,80070c0 <__alt_data_end+0xfc0070c0>
 8007408:	283f2d26 	beq	r5,zero,80070c0 <__alt_data_end+0xfc0070c0>
 800740c:	1146703a 	and	r3,r2,r5
 8007410:	1800521e 	bne	r3,zero,800755c <_malloc_r+0x7a0>
 8007414:	6007883a 	mov	r3,r12
 8007418:	294b883a 	add	r5,r5,r5
 800741c:	1148703a 	and	r4,r2,r5
 8007420:	18c00104 	addi	r3,r3,4
 8007424:	203ffc26 	beq	r4,zero,8007418 <__alt_data_end+0xfc007418>
 8007428:	003ef006 	br	8006fec <__alt_data_end+0xfc006fec>
 800742c:	00805504 	movi	r2,340
 8007430:	10c01336 	bltu	r2,r3,8007480 <_malloc_r+0x6c4>
 8007434:	8806d3fa 	srli	r3,r17,15
 8007438:	19c01dc4 	addi	r7,r3,119
 800743c:	39cb883a 	add	r5,r7,r7
 8007440:	003ea206 	br	8006ecc <__alt_data_end+0xfc006ecc>
 8007444:	00c40004 	movi	r3,4096
 8007448:	003f4d06 	br	8007180 <__alt_data_end+0xfc007180>
 800744c:	00800044 	movi	r2,1
 8007450:	a0800115 	stw	r2,4(r20)
 8007454:	a021883a 	mov	r16,r20
 8007458:	0007883a 	mov	r3,zero
 800745c:	003f7506 	br	8007234 <__alt_data_end+0xfc007234>
 8007460:	200bd0ba 	srai	r5,r4,2
 8007464:	01800044 	movi	r6,1
 8007468:	41000117 	ldw	r4,4(r8)
 800746c:	314a983a 	sll	r5,r6,r5
 8007470:	100d883a 	mov	r6,r2
 8007474:	2908b03a 	or	r4,r5,r4
 8007478:	41000115 	stw	r4,4(r8)
 800747c:	003f9d06 	br	80072f4 <__alt_data_end+0xfc0072f4>
 8007480:	00815504 	movi	r2,1364
 8007484:	10c01336 	bltu	r2,r3,80074d4 <_malloc_r+0x718>
 8007488:	8806d4ba 	srli	r3,r17,18
 800748c:	19c01f04 	addi	r7,r3,124
 8007490:	39cb883a 	add	r5,r7,r7
 8007494:	003e8d06 	br	8006ecc <__alt_data_end+0xfc006ecc>
 8007498:	ad400404 	addi	r21,r21,16
 800749c:	003f1d06 	br	8007114 <__alt_data_end+0xfc007114>
 80074a0:	01001504 	movi	r4,84
 80074a4:	20801c36 	bltu	r4,r2,8007518 <_malloc_r+0x75c>
 80074a8:	3804d33a 	srli	r2,r7,12
 80074ac:	11001b84 	addi	r4,r2,110
 80074b0:	210b883a 	add	r5,r4,r4
 80074b4:	003f8006 	br	80072b8 <__alt_data_end+0xfc0072b8>
 80074b8:	3083ffcc 	andi	r2,r6,4095
 80074bc:	103f241e 	bne	r2,zero,8007150 <__alt_data_end+0xfc007150>
 80074c0:	99000217 	ldw	r4,8(r19)
 80074c4:	ad85883a 	add	r2,r21,r22
 80074c8:	10800054 	ori	r2,r2,1
 80074cc:	20800115 	stw	r2,4(r4)
 80074d0:	003f4a06 	br	80071fc <__alt_data_end+0xfc0071fc>
 80074d4:	01403f04 	movi	r5,252
 80074d8:	01c01f84 	movi	r7,126
 80074dc:	003e7b06 	br	8006ecc <__alt_data_end+0xfc006ecc>
 80074e0:	00c00044 	movi	r3,1
 80074e4:	002b883a 	mov	r21,zero
 80074e8:	003f3006 	br	80071ac <__alt_data_end+0xfc0071ac>
 80074ec:	008200b4 	movhi	r2,2050
 80074f0:	10b5a104 	addi	r2,r2,-10620
 80074f4:	15000015 	stw	r20,0(r2)
 80074f8:	003f1b06 	br	8007168 <__alt_data_end+0xfc007168>
 80074fc:	9009883a 	mov	r4,r18
 8007500:	81400204 	addi	r5,r16,8
 8007504:	80062200 	call	8006220 <_free_r>
 8007508:	008200b4 	movhi	r2,2050
 800750c:	10bc8604 	addi	r2,r2,-3560
 8007510:	10c00017 	ldw	r3,0(r2)
 8007514:	003f3906 	br	80071fc <__alt_data_end+0xfc0071fc>
 8007518:	01005504 	movi	r4,340
 800751c:	20800436 	bltu	r4,r2,8007530 <_malloc_r+0x774>
 8007520:	3804d3fa 	srli	r2,r7,15
 8007524:	11001dc4 	addi	r4,r2,119
 8007528:	210b883a 	add	r5,r4,r4
 800752c:	003f6206 	br	80072b8 <__alt_data_end+0xfc0072b8>
 8007530:	01015504 	movi	r4,1364
 8007534:	20800436 	bltu	r4,r2,8007548 <_malloc_r+0x78c>
 8007538:	3804d4ba 	srli	r2,r7,18
 800753c:	11001f04 	addi	r4,r2,124
 8007540:	210b883a 	add	r5,r4,r4
 8007544:	003f5c06 	br	80072b8 <__alt_data_end+0xfc0072b8>
 8007548:	01403f04 	movi	r5,252
 800754c:	01001f84 	movi	r4,126
 8007550:	003f5906 	br	80072b8 <__alt_data_end+0xfc0072b8>
 8007554:	98800117 	ldw	r2,4(r19)
 8007558:	003fa906 	br	8007400 <__alt_data_end+0xfc007400>
 800755c:	6007883a 	mov	r3,r12
 8007560:	003ea206 	br	8006fec <__alt_data_end+0xfc006fec>

08007564 <memchr>:
 8007564:	208000cc 	andi	r2,r4,3
 8007568:	280f883a 	mov	r7,r5
 800756c:	10003526 	beq	r2,zero,8007644 <memchr+0xe0>
 8007570:	30bfffc4 	addi	r2,r6,-1
 8007574:	30001b26 	beq	r6,zero,80075e4 <memchr+0x80>
 8007578:	21800003 	ldbu	r6,0(r4)
 800757c:	28c03fcc 	andi	r3,r5,255
 8007580:	30c01a26 	beq	r6,r3,80075ec <memchr+0x88>
 8007584:	180d883a 	mov	r6,r3
 8007588:	00000406 	br	800759c <memchr+0x38>
 800758c:	10001526 	beq	r2,zero,80075e4 <memchr+0x80>
 8007590:	20c00003 	ldbu	r3,0(r4)
 8007594:	10bfffc4 	addi	r2,r2,-1
 8007598:	19801426 	beq	r3,r6,80075ec <memchr+0x88>
 800759c:	21000044 	addi	r4,r4,1
 80075a0:	20c000cc 	andi	r3,r4,3
 80075a4:	183ff91e 	bne	r3,zero,800758c <__alt_data_end+0xfc00758c>
 80075a8:	024000c4 	movi	r9,3
 80075ac:	48801136 	bltu	r9,r2,80075f4 <memchr+0x90>
 80075b0:	10000c26 	beq	r2,zero,80075e4 <memchr+0x80>
 80075b4:	20c00003 	ldbu	r3,0(r4)
 80075b8:	29403fcc 	andi	r5,r5,255
 80075bc:	19400b26 	beq	r3,r5,80075ec <memchr+0x88>
 80075c0:	20c00044 	addi	r3,r4,1
 80075c4:	2085883a 	add	r2,r4,r2
 80075c8:	39803fcc 	andi	r6,r7,255
 80075cc:	00000306 	br	80075dc <memchr+0x78>
 80075d0:	18c00044 	addi	r3,r3,1
 80075d4:	197fffc3 	ldbu	r5,-1(r3)
 80075d8:	29800426 	beq	r5,r6,80075ec <memchr+0x88>
 80075dc:	1809883a 	mov	r4,r3
 80075e0:	18bffb1e 	bne	r3,r2,80075d0 <__alt_data_end+0xfc0075d0>
 80075e4:	0005883a 	mov	r2,zero
 80075e8:	f800283a 	ret
 80075ec:	2005883a 	mov	r2,r4
 80075f0:	f800283a 	ret
 80075f4:	28c03fcc 	andi	r3,r5,255
 80075f8:	1810923a 	slli	r8,r3,8
 80075fc:	02ffbff4 	movhi	r11,65279
 8007600:	02a02074 	movhi	r10,32897
 8007604:	40c6b03a 	or	r3,r8,r3
 8007608:	1810943a 	slli	r8,r3,16
 800760c:	5affbfc4 	addi	r11,r11,-257
 8007610:	52a02004 	addi	r10,r10,-32640
 8007614:	40d0b03a 	or	r8,r8,r3
 8007618:	20c00017 	ldw	r3,0(r4)
 800761c:	40c6f03a 	xor	r3,r8,r3
 8007620:	1acd883a 	add	r6,r3,r11
 8007624:	00c6303a 	nor	r3,zero,r3
 8007628:	30c6703a 	and	r3,r6,r3
 800762c:	1a86703a 	and	r3,r3,r10
 8007630:	183fdf1e 	bne	r3,zero,80075b0 <__alt_data_end+0xfc0075b0>
 8007634:	10bfff04 	addi	r2,r2,-4
 8007638:	21000104 	addi	r4,r4,4
 800763c:	48bff636 	bltu	r9,r2,8007618 <__alt_data_end+0xfc007618>
 8007640:	003fdb06 	br	80075b0 <__alt_data_end+0xfc0075b0>
 8007644:	3005883a 	mov	r2,r6
 8007648:	003fd706 	br	80075a8 <__alt_data_end+0xfc0075a8>

0800764c <memcpy>:
 800764c:	deffff04 	addi	sp,sp,-4
 8007650:	dc000015 	stw	r16,0(sp)
 8007654:	00c003c4 	movi	r3,15
 8007658:	2005883a 	mov	r2,r4
 800765c:	1980432e 	bgeu	r3,r6,800776c <memcpy+0x120>
 8007660:	2146b03a 	or	r3,r4,r5
 8007664:	18c000cc 	andi	r3,r3,3
 8007668:	1800421e 	bne	r3,zero,8007774 <memcpy+0x128>
 800766c:	343ffc04 	addi	r16,r6,-16
 8007670:	8020d13a 	srli	r16,r16,4
 8007674:	28c00104 	addi	r3,r5,4
 8007678:	23400104 	addi	r13,r4,4
 800767c:	801e913a 	slli	r15,r16,4
 8007680:	2b000204 	addi	r12,r5,8
 8007684:	22c00204 	addi	r11,r4,8
 8007688:	7bc00504 	addi	r15,r15,20
 800768c:	2a800304 	addi	r10,r5,12
 8007690:	22400304 	addi	r9,r4,12
 8007694:	2bdf883a 	add	r15,r5,r15
 8007698:	2811883a 	mov	r8,r5
 800769c:	200f883a 	mov	r7,r4
 80076a0:	41000017 	ldw	r4,0(r8)
 80076a4:	39c00404 	addi	r7,r7,16
 80076a8:	18c00404 	addi	r3,r3,16
 80076ac:	393ffc15 	stw	r4,-16(r7)
 80076b0:	1bbffc17 	ldw	r14,-16(r3)
 80076b4:	6b400404 	addi	r13,r13,16
 80076b8:	5ac00404 	addi	r11,r11,16
 80076bc:	6bbffc15 	stw	r14,-16(r13)
 80076c0:	63800017 	ldw	r14,0(r12)
 80076c4:	4a400404 	addi	r9,r9,16
 80076c8:	42000404 	addi	r8,r8,16
 80076cc:	5bbffc15 	stw	r14,-16(r11)
 80076d0:	53800017 	ldw	r14,0(r10)
 80076d4:	63000404 	addi	r12,r12,16
 80076d8:	52800404 	addi	r10,r10,16
 80076dc:	4bbffc15 	stw	r14,-16(r9)
 80076e0:	1bffef1e 	bne	r3,r15,80076a0 <__alt_data_end+0xfc0076a0>
 80076e4:	81c00044 	addi	r7,r16,1
 80076e8:	380e913a 	slli	r7,r7,4
 80076ec:	310003cc 	andi	r4,r6,15
 80076f0:	02c000c4 	movi	r11,3
 80076f4:	11c7883a 	add	r3,r2,r7
 80076f8:	29cb883a 	add	r5,r5,r7
 80076fc:	59001f2e 	bgeu	r11,r4,800777c <memcpy+0x130>
 8007700:	1813883a 	mov	r9,r3
 8007704:	2811883a 	mov	r8,r5
 8007708:	200f883a 	mov	r7,r4
 800770c:	42800017 	ldw	r10,0(r8)
 8007710:	4a400104 	addi	r9,r9,4
 8007714:	39ffff04 	addi	r7,r7,-4
 8007718:	4abfff15 	stw	r10,-4(r9)
 800771c:	42000104 	addi	r8,r8,4
 8007720:	59fffa36 	bltu	r11,r7,800770c <__alt_data_end+0xfc00770c>
 8007724:	213fff04 	addi	r4,r4,-4
 8007728:	2008d0ba 	srli	r4,r4,2
 800772c:	318000cc 	andi	r6,r6,3
 8007730:	21000044 	addi	r4,r4,1
 8007734:	2109883a 	add	r4,r4,r4
 8007738:	2109883a 	add	r4,r4,r4
 800773c:	1907883a 	add	r3,r3,r4
 8007740:	290b883a 	add	r5,r5,r4
 8007744:	30000626 	beq	r6,zero,8007760 <memcpy+0x114>
 8007748:	198d883a 	add	r6,r3,r6
 800774c:	29c00003 	ldbu	r7,0(r5)
 8007750:	18c00044 	addi	r3,r3,1
 8007754:	29400044 	addi	r5,r5,1
 8007758:	19ffffc5 	stb	r7,-1(r3)
 800775c:	19bffb1e 	bne	r3,r6,800774c <__alt_data_end+0xfc00774c>
 8007760:	dc000017 	ldw	r16,0(sp)
 8007764:	dec00104 	addi	sp,sp,4
 8007768:	f800283a 	ret
 800776c:	2007883a 	mov	r3,r4
 8007770:	003ff406 	br	8007744 <__alt_data_end+0xfc007744>
 8007774:	2007883a 	mov	r3,r4
 8007778:	003ff306 	br	8007748 <__alt_data_end+0xfc007748>
 800777c:	200d883a 	mov	r6,r4
 8007780:	003ff006 	br	8007744 <__alt_data_end+0xfc007744>

08007784 <memmove>:
 8007784:	2005883a 	mov	r2,r4
 8007788:	29000b2e 	bgeu	r5,r4,80077b8 <memmove+0x34>
 800778c:	298f883a 	add	r7,r5,r6
 8007790:	21c0092e 	bgeu	r4,r7,80077b8 <memmove+0x34>
 8007794:	2187883a 	add	r3,r4,r6
 8007798:	198bc83a 	sub	r5,r3,r6
 800779c:	30004b26 	beq	r6,zero,80078cc <memmove+0x148>
 80077a0:	39ffffc4 	addi	r7,r7,-1
 80077a4:	39000003 	ldbu	r4,0(r7)
 80077a8:	18ffffc4 	addi	r3,r3,-1
 80077ac:	19000005 	stb	r4,0(r3)
 80077b0:	197ffb1e 	bne	r3,r5,80077a0 <__alt_data_end+0xfc0077a0>
 80077b4:	f800283a 	ret
 80077b8:	00c003c4 	movi	r3,15
 80077bc:	1980412e 	bgeu	r3,r6,80078c4 <memmove+0x140>
 80077c0:	1146b03a 	or	r3,r2,r5
 80077c4:	18c000cc 	andi	r3,r3,3
 80077c8:	1800411e 	bne	r3,zero,80078d0 <memmove+0x14c>
 80077cc:	33fffc04 	addi	r15,r6,-16
 80077d0:	781ed13a 	srli	r15,r15,4
 80077d4:	28c00104 	addi	r3,r5,4
 80077d8:	13400104 	addi	r13,r2,4
 80077dc:	781c913a 	slli	r14,r15,4
 80077e0:	2b000204 	addi	r12,r5,8
 80077e4:	12c00204 	addi	r11,r2,8
 80077e8:	73800504 	addi	r14,r14,20
 80077ec:	2a800304 	addi	r10,r5,12
 80077f0:	12400304 	addi	r9,r2,12
 80077f4:	2b9d883a 	add	r14,r5,r14
 80077f8:	2811883a 	mov	r8,r5
 80077fc:	100f883a 	mov	r7,r2
 8007800:	41000017 	ldw	r4,0(r8)
 8007804:	39c00404 	addi	r7,r7,16
 8007808:	18c00404 	addi	r3,r3,16
 800780c:	393ffc15 	stw	r4,-16(r7)
 8007810:	193ffc17 	ldw	r4,-16(r3)
 8007814:	6b400404 	addi	r13,r13,16
 8007818:	5ac00404 	addi	r11,r11,16
 800781c:	693ffc15 	stw	r4,-16(r13)
 8007820:	61000017 	ldw	r4,0(r12)
 8007824:	4a400404 	addi	r9,r9,16
 8007828:	42000404 	addi	r8,r8,16
 800782c:	593ffc15 	stw	r4,-16(r11)
 8007830:	51000017 	ldw	r4,0(r10)
 8007834:	63000404 	addi	r12,r12,16
 8007838:	52800404 	addi	r10,r10,16
 800783c:	493ffc15 	stw	r4,-16(r9)
 8007840:	1bbfef1e 	bne	r3,r14,8007800 <__alt_data_end+0xfc007800>
 8007844:	79000044 	addi	r4,r15,1
 8007848:	2008913a 	slli	r4,r4,4
 800784c:	328003cc 	andi	r10,r6,15
 8007850:	02c000c4 	movi	r11,3
 8007854:	1107883a 	add	r3,r2,r4
 8007858:	290b883a 	add	r5,r5,r4
 800785c:	5a801e2e 	bgeu	r11,r10,80078d8 <memmove+0x154>
 8007860:	1813883a 	mov	r9,r3
 8007864:	2811883a 	mov	r8,r5
 8007868:	500f883a 	mov	r7,r10
 800786c:	41000017 	ldw	r4,0(r8)
 8007870:	4a400104 	addi	r9,r9,4
 8007874:	39ffff04 	addi	r7,r7,-4
 8007878:	493fff15 	stw	r4,-4(r9)
 800787c:	42000104 	addi	r8,r8,4
 8007880:	59fffa36 	bltu	r11,r7,800786c <__alt_data_end+0xfc00786c>
 8007884:	513fff04 	addi	r4,r10,-4
 8007888:	2008d0ba 	srli	r4,r4,2
 800788c:	318000cc 	andi	r6,r6,3
 8007890:	21000044 	addi	r4,r4,1
 8007894:	2109883a 	add	r4,r4,r4
 8007898:	2109883a 	add	r4,r4,r4
 800789c:	1907883a 	add	r3,r3,r4
 80078a0:	290b883a 	add	r5,r5,r4
 80078a4:	30000926 	beq	r6,zero,80078cc <memmove+0x148>
 80078a8:	198d883a 	add	r6,r3,r6
 80078ac:	29c00003 	ldbu	r7,0(r5)
 80078b0:	18c00044 	addi	r3,r3,1
 80078b4:	29400044 	addi	r5,r5,1
 80078b8:	19ffffc5 	stb	r7,-1(r3)
 80078bc:	19bffb1e 	bne	r3,r6,80078ac <__alt_data_end+0xfc0078ac>
 80078c0:	f800283a 	ret
 80078c4:	1007883a 	mov	r3,r2
 80078c8:	003ff606 	br	80078a4 <__alt_data_end+0xfc0078a4>
 80078cc:	f800283a 	ret
 80078d0:	1007883a 	mov	r3,r2
 80078d4:	003ff406 	br	80078a8 <__alt_data_end+0xfc0078a8>
 80078d8:	500d883a 	mov	r6,r10
 80078dc:	003ff106 	br	80078a4 <__alt_data_end+0xfc0078a4>

080078e0 <memset>:
 80078e0:	20c000cc 	andi	r3,r4,3
 80078e4:	2005883a 	mov	r2,r4
 80078e8:	18004326 	beq	r3,zero,80079f8 <memset+0x118>
 80078ec:	31ffffc4 	addi	r7,r6,-1
 80078f0:	30004026 	beq	r6,zero,80079f4 <memset+0x114>
 80078f4:	2813883a 	mov	r9,r5
 80078f8:	200d883a 	mov	r6,r4
 80078fc:	2007883a 	mov	r3,r4
 8007900:	00000406 	br	8007914 <memset+0x34>
 8007904:	3a3fffc4 	addi	r8,r7,-1
 8007908:	31800044 	addi	r6,r6,1
 800790c:	38003926 	beq	r7,zero,80079f4 <memset+0x114>
 8007910:	400f883a 	mov	r7,r8
 8007914:	18c00044 	addi	r3,r3,1
 8007918:	32400005 	stb	r9,0(r6)
 800791c:	1a0000cc 	andi	r8,r3,3
 8007920:	403ff81e 	bne	r8,zero,8007904 <__alt_data_end+0xfc007904>
 8007924:	010000c4 	movi	r4,3
 8007928:	21c02d2e 	bgeu	r4,r7,80079e0 <memset+0x100>
 800792c:	29803fcc 	andi	r6,r5,255
 8007930:	3008923a 	slli	r4,r6,8
 8007934:	218cb03a 	or	r6,r4,r6
 8007938:	3008943a 	slli	r4,r6,16
 800793c:	218cb03a 	or	r6,r4,r6
 8007940:	010003c4 	movi	r4,15
 8007944:	21c0182e 	bgeu	r4,r7,80079a8 <memset+0xc8>
 8007948:	3b3ffc04 	addi	r12,r7,-16
 800794c:	6018d13a 	srli	r12,r12,4
 8007950:	1a000104 	addi	r8,r3,4
 8007954:	1ac00204 	addi	r11,r3,8
 8007958:	6008913a 	slli	r4,r12,4
 800795c:	1a800304 	addi	r10,r3,12
 8007960:	1813883a 	mov	r9,r3
 8007964:	21000504 	addi	r4,r4,20
 8007968:	1909883a 	add	r4,r3,r4
 800796c:	49800015 	stw	r6,0(r9)
 8007970:	41800015 	stw	r6,0(r8)
 8007974:	59800015 	stw	r6,0(r11)
 8007978:	51800015 	stw	r6,0(r10)
 800797c:	42000404 	addi	r8,r8,16
 8007980:	4a400404 	addi	r9,r9,16
 8007984:	5ac00404 	addi	r11,r11,16
 8007988:	52800404 	addi	r10,r10,16
 800798c:	413ff71e 	bne	r8,r4,800796c <__alt_data_end+0xfc00796c>
 8007990:	63000044 	addi	r12,r12,1
 8007994:	6018913a 	slli	r12,r12,4
 8007998:	39c003cc 	andi	r7,r7,15
 800799c:	010000c4 	movi	r4,3
 80079a0:	1b07883a 	add	r3,r3,r12
 80079a4:	21c00e2e 	bgeu	r4,r7,80079e0 <memset+0x100>
 80079a8:	1813883a 	mov	r9,r3
 80079ac:	3811883a 	mov	r8,r7
 80079b0:	010000c4 	movi	r4,3
 80079b4:	49800015 	stw	r6,0(r9)
 80079b8:	423fff04 	addi	r8,r8,-4
 80079bc:	4a400104 	addi	r9,r9,4
 80079c0:	223ffc36 	bltu	r4,r8,80079b4 <__alt_data_end+0xfc0079b4>
 80079c4:	393fff04 	addi	r4,r7,-4
 80079c8:	2008d0ba 	srli	r4,r4,2
 80079cc:	39c000cc 	andi	r7,r7,3
 80079d0:	21000044 	addi	r4,r4,1
 80079d4:	2109883a 	add	r4,r4,r4
 80079d8:	2109883a 	add	r4,r4,r4
 80079dc:	1907883a 	add	r3,r3,r4
 80079e0:	38000426 	beq	r7,zero,80079f4 <memset+0x114>
 80079e4:	19cf883a 	add	r7,r3,r7
 80079e8:	19400005 	stb	r5,0(r3)
 80079ec:	18c00044 	addi	r3,r3,1
 80079f0:	19fffd1e 	bne	r3,r7,80079e8 <__alt_data_end+0xfc0079e8>
 80079f4:	f800283a 	ret
 80079f8:	2007883a 	mov	r3,r4
 80079fc:	300f883a 	mov	r7,r6
 8007a00:	003fc806 	br	8007924 <__alt_data_end+0xfc007924>

08007a04 <_Balloc>:
 8007a04:	20801317 	ldw	r2,76(r4)
 8007a08:	defffc04 	addi	sp,sp,-16
 8007a0c:	dc400115 	stw	r17,4(sp)
 8007a10:	dc000015 	stw	r16,0(sp)
 8007a14:	dfc00315 	stw	ra,12(sp)
 8007a18:	dc800215 	stw	r18,8(sp)
 8007a1c:	2023883a 	mov	r17,r4
 8007a20:	2821883a 	mov	r16,r5
 8007a24:	10000f26 	beq	r2,zero,8007a64 <_Balloc+0x60>
 8007a28:	8407883a 	add	r3,r16,r16
 8007a2c:	18c7883a 	add	r3,r3,r3
 8007a30:	10c7883a 	add	r3,r2,r3
 8007a34:	18800017 	ldw	r2,0(r3)
 8007a38:	10001126 	beq	r2,zero,8007a80 <_Balloc+0x7c>
 8007a3c:	11000017 	ldw	r4,0(r2)
 8007a40:	19000015 	stw	r4,0(r3)
 8007a44:	10000415 	stw	zero,16(r2)
 8007a48:	10000315 	stw	zero,12(r2)
 8007a4c:	dfc00317 	ldw	ra,12(sp)
 8007a50:	dc800217 	ldw	r18,8(sp)
 8007a54:	dc400117 	ldw	r17,4(sp)
 8007a58:	dc000017 	ldw	r16,0(sp)
 8007a5c:	dec00404 	addi	sp,sp,16
 8007a60:	f800283a 	ret
 8007a64:	01400104 	movi	r5,4
 8007a68:	01800844 	movi	r6,33
 8007a6c:	800a71c0 	call	800a71c <_calloc_r>
 8007a70:	88801315 	stw	r2,76(r17)
 8007a74:	103fec1e 	bne	r2,zero,8007a28 <__alt_data_end+0xfc007a28>
 8007a78:	0005883a 	mov	r2,zero
 8007a7c:	003ff306 	br	8007a4c <__alt_data_end+0xfc007a4c>
 8007a80:	01400044 	movi	r5,1
 8007a84:	2c24983a 	sll	r18,r5,r16
 8007a88:	8809883a 	mov	r4,r17
 8007a8c:	91800144 	addi	r6,r18,5
 8007a90:	318d883a 	add	r6,r6,r6
 8007a94:	318d883a 	add	r6,r6,r6
 8007a98:	800a71c0 	call	800a71c <_calloc_r>
 8007a9c:	103ff626 	beq	r2,zero,8007a78 <__alt_data_end+0xfc007a78>
 8007aa0:	14000115 	stw	r16,4(r2)
 8007aa4:	14800215 	stw	r18,8(r2)
 8007aa8:	003fe606 	br	8007a44 <__alt_data_end+0xfc007a44>

08007aac <_Bfree>:
 8007aac:	28000826 	beq	r5,zero,8007ad0 <_Bfree+0x24>
 8007ab0:	28c00117 	ldw	r3,4(r5)
 8007ab4:	20801317 	ldw	r2,76(r4)
 8007ab8:	18c7883a 	add	r3,r3,r3
 8007abc:	18c7883a 	add	r3,r3,r3
 8007ac0:	10c5883a 	add	r2,r2,r3
 8007ac4:	10c00017 	ldw	r3,0(r2)
 8007ac8:	28c00015 	stw	r3,0(r5)
 8007acc:	11400015 	stw	r5,0(r2)
 8007ad0:	f800283a 	ret

08007ad4 <__multadd>:
 8007ad4:	defffa04 	addi	sp,sp,-24
 8007ad8:	dc000115 	stw	r16,4(sp)
 8007adc:	2c000417 	ldw	r16,16(r5)
 8007ae0:	dc800315 	stw	r18,12(sp)
 8007ae4:	dc400215 	stw	r17,8(sp)
 8007ae8:	dfc00515 	stw	ra,20(sp)
 8007aec:	dcc00415 	stw	r19,16(sp)
 8007af0:	2823883a 	mov	r17,r5
 8007af4:	2025883a 	mov	r18,r4
 8007af8:	2a400504 	addi	r9,r5,20
 8007afc:	0015883a 	mov	r10,zero
 8007b00:	4a000017 	ldw	r8,0(r9)
 8007b04:	4a400104 	addi	r9,r9,4
 8007b08:	52800044 	addi	r10,r10,1
 8007b0c:	40ffffcc 	andi	r3,r8,65535
 8007b10:	1987383a 	mul	r3,r3,r6
 8007b14:	4010d43a 	srli	r8,r8,16
 8007b18:	19cf883a 	add	r7,r3,r7
 8007b1c:	4191383a 	mul	r8,r8,r6
 8007b20:	3816d43a 	srli	r11,r7,16
 8007b24:	38ffffcc 	andi	r3,r7,65535
 8007b28:	5a0f883a 	add	r7,r11,r8
 8007b2c:	3810943a 	slli	r8,r7,16
 8007b30:	380ed43a 	srli	r7,r7,16
 8007b34:	40c7883a 	add	r3,r8,r3
 8007b38:	48ffff15 	stw	r3,-4(r9)
 8007b3c:	543ff016 	blt	r10,r16,8007b00 <__alt_data_end+0xfc007b00>
 8007b40:	38000926 	beq	r7,zero,8007b68 <__multadd+0x94>
 8007b44:	88800217 	ldw	r2,8(r17)
 8007b48:	80800f0e 	bge	r16,r2,8007b88 <__multadd+0xb4>
 8007b4c:	80800144 	addi	r2,r16,5
 8007b50:	1085883a 	add	r2,r2,r2
 8007b54:	1085883a 	add	r2,r2,r2
 8007b58:	8885883a 	add	r2,r17,r2
 8007b5c:	11c00015 	stw	r7,0(r2)
 8007b60:	84000044 	addi	r16,r16,1
 8007b64:	8c000415 	stw	r16,16(r17)
 8007b68:	8805883a 	mov	r2,r17
 8007b6c:	dfc00517 	ldw	ra,20(sp)
 8007b70:	dcc00417 	ldw	r19,16(sp)
 8007b74:	dc800317 	ldw	r18,12(sp)
 8007b78:	dc400217 	ldw	r17,8(sp)
 8007b7c:	dc000117 	ldw	r16,4(sp)
 8007b80:	dec00604 	addi	sp,sp,24
 8007b84:	f800283a 	ret
 8007b88:	89400117 	ldw	r5,4(r17)
 8007b8c:	9009883a 	mov	r4,r18
 8007b90:	d9c00015 	stw	r7,0(sp)
 8007b94:	29400044 	addi	r5,r5,1
 8007b98:	8007a040 	call	8007a04 <_Balloc>
 8007b9c:	89800417 	ldw	r6,16(r17)
 8007ba0:	89400304 	addi	r5,r17,12
 8007ba4:	11000304 	addi	r4,r2,12
 8007ba8:	31800084 	addi	r6,r6,2
 8007bac:	318d883a 	add	r6,r6,r6
 8007bb0:	318d883a 	add	r6,r6,r6
 8007bb4:	1027883a 	mov	r19,r2
 8007bb8:	800764c0 	call	800764c <memcpy>
 8007bbc:	89000117 	ldw	r4,4(r17)
 8007bc0:	90c01317 	ldw	r3,76(r18)
 8007bc4:	d9c00017 	ldw	r7,0(sp)
 8007bc8:	2109883a 	add	r4,r4,r4
 8007bcc:	2109883a 	add	r4,r4,r4
 8007bd0:	1907883a 	add	r3,r3,r4
 8007bd4:	18800017 	ldw	r2,0(r3)
 8007bd8:	88800015 	stw	r2,0(r17)
 8007bdc:	1c400015 	stw	r17,0(r3)
 8007be0:	9823883a 	mov	r17,r19
 8007be4:	003fd906 	br	8007b4c <__alt_data_end+0xfc007b4c>

08007be8 <__s2b>:
 8007be8:	defff904 	addi	sp,sp,-28
 8007bec:	dc400115 	stw	r17,4(sp)
 8007bf0:	dc000015 	stw	r16,0(sp)
 8007bf4:	2023883a 	mov	r17,r4
 8007bf8:	2821883a 	mov	r16,r5
 8007bfc:	39000204 	addi	r4,r7,8
 8007c00:	01400244 	movi	r5,9
 8007c04:	dcc00315 	stw	r19,12(sp)
 8007c08:	dc800215 	stw	r18,8(sp)
 8007c0c:	dfc00615 	stw	ra,24(sp)
 8007c10:	dd400515 	stw	r21,20(sp)
 8007c14:	dd000415 	stw	r20,16(sp)
 8007c18:	3825883a 	mov	r18,r7
 8007c1c:	3027883a 	mov	r19,r6
 8007c20:	800bb600 	call	800bb60 <__divsi3>
 8007c24:	00c00044 	movi	r3,1
 8007c28:	000b883a 	mov	r5,zero
 8007c2c:	1880030e 	bge	r3,r2,8007c3c <__s2b+0x54>
 8007c30:	18c7883a 	add	r3,r3,r3
 8007c34:	29400044 	addi	r5,r5,1
 8007c38:	18bffd16 	blt	r3,r2,8007c30 <__alt_data_end+0xfc007c30>
 8007c3c:	8809883a 	mov	r4,r17
 8007c40:	8007a040 	call	8007a04 <_Balloc>
 8007c44:	d8c00717 	ldw	r3,28(sp)
 8007c48:	10c00515 	stw	r3,20(r2)
 8007c4c:	00c00044 	movi	r3,1
 8007c50:	10c00415 	stw	r3,16(r2)
 8007c54:	00c00244 	movi	r3,9
 8007c58:	1cc0210e 	bge	r3,r19,8007ce0 <__s2b+0xf8>
 8007c5c:	80eb883a 	add	r21,r16,r3
 8007c60:	a829883a 	mov	r20,r21
 8007c64:	84e1883a 	add	r16,r16,r19
 8007c68:	a1c00007 	ldb	r7,0(r20)
 8007c6c:	8809883a 	mov	r4,r17
 8007c70:	a5000044 	addi	r20,r20,1
 8007c74:	100b883a 	mov	r5,r2
 8007c78:	01800284 	movi	r6,10
 8007c7c:	39fff404 	addi	r7,r7,-48
 8007c80:	8007ad40 	call	8007ad4 <__multadd>
 8007c84:	a43ff81e 	bne	r20,r16,8007c68 <__alt_data_end+0xfc007c68>
 8007c88:	ace1883a 	add	r16,r21,r19
 8007c8c:	843ffe04 	addi	r16,r16,-8
 8007c90:	9c800a0e 	bge	r19,r18,8007cbc <__s2b+0xd4>
 8007c94:	94e5c83a 	sub	r18,r18,r19
 8007c98:	84a5883a 	add	r18,r16,r18
 8007c9c:	81c00007 	ldb	r7,0(r16)
 8007ca0:	8809883a 	mov	r4,r17
 8007ca4:	84000044 	addi	r16,r16,1
 8007ca8:	100b883a 	mov	r5,r2
 8007cac:	01800284 	movi	r6,10
 8007cb0:	39fff404 	addi	r7,r7,-48
 8007cb4:	8007ad40 	call	8007ad4 <__multadd>
 8007cb8:	84bff81e 	bne	r16,r18,8007c9c <__alt_data_end+0xfc007c9c>
 8007cbc:	dfc00617 	ldw	ra,24(sp)
 8007cc0:	dd400517 	ldw	r21,20(sp)
 8007cc4:	dd000417 	ldw	r20,16(sp)
 8007cc8:	dcc00317 	ldw	r19,12(sp)
 8007ccc:	dc800217 	ldw	r18,8(sp)
 8007cd0:	dc400117 	ldw	r17,4(sp)
 8007cd4:	dc000017 	ldw	r16,0(sp)
 8007cd8:	dec00704 	addi	sp,sp,28
 8007cdc:	f800283a 	ret
 8007ce0:	84000284 	addi	r16,r16,10
 8007ce4:	1827883a 	mov	r19,r3
 8007ce8:	003fe906 	br	8007c90 <__alt_data_end+0xfc007c90>

08007cec <__hi0bits>:
 8007cec:	20bfffec 	andhi	r2,r4,65535
 8007cf0:	1000141e 	bne	r2,zero,8007d44 <__hi0bits+0x58>
 8007cf4:	2008943a 	slli	r4,r4,16
 8007cf8:	00800404 	movi	r2,16
 8007cfc:	20ffc02c 	andhi	r3,r4,65280
 8007d00:	1800021e 	bne	r3,zero,8007d0c <__hi0bits+0x20>
 8007d04:	2008923a 	slli	r4,r4,8
 8007d08:	10800204 	addi	r2,r2,8
 8007d0c:	20fc002c 	andhi	r3,r4,61440
 8007d10:	1800021e 	bne	r3,zero,8007d1c <__hi0bits+0x30>
 8007d14:	2008913a 	slli	r4,r4,4
 8007d18:	10800104 	addi	r2,r2,4
 8007d1c:	20f0002c 	andhi	r3,r4,49152
 8007d20:	1800031e 	bne	r3,zero,8007d30 <__hi0bits+0x44>
 8007d24:	2109883a 	add	r4,r4,r4
 8007d28:	10800084 	addi	r2,r2,2
 8007d2c:	2109883a 	add	r4,r4,r4
 8007d30:	20000316 	blt	r4,zero,8007d40 <__hi0bits+0x54>
 8007d34:	2110002c 	andhi	r4,r4,16384
 8007d38:	2000041e 	bne	r4,zero,8007d4c <__hi0bits+0x60>
 8007d3c:	00800804 	movi	r2,32
 8007d40:	f800283a 	ret
 8007d44:	0005883a 	mov	r2,zero
 8007d48:	003fec06 	br	8007cfc <__alt_data_end+0xfc007cfc>
 8007d4c:	10800044 	addi	r2,r2,1
 8007d50:	f800283a 	ret

08007d54 <__lo0bits>:
 8007d54:	20c00017 	ldw	r3,0(r4)
 8007d58:	188001cc 	andi	r2,r3,7
 8007d5c:	10000826 	beq	r2,zero,8007d80 <__lo0bits+0x2c>
 8007d60:	1880004c 	andi	r2,r3,1
 8007d64:	1000211e 	bne	r2,zero,8007dec <__lo0bits+0x98>
 8007d68:	1880008c 	andi	r2,r3,2
 8007d6c:	1000211e 	bne	r2,zero,8007df4 <__lo0bits+0xa0>
 8007d70:	1806d0ba 	srli	r3,r3,2
 8007d74:	00800084 	movi	r2,2
 8007d78:	20c00015 	stw	r3,0(r4)
 8007d7c:	f800283a 	ret
 8007d80:	18bfffcc 	andi	r2,r3,65535
 8007d84:	10001326 	beq	r2,zero,8007dd4 <__lo0bits+0x80>
 8007d88:	0005883a 	mov	r2,zero
 8007d8c:	19403fcc 	andi	r5,r3,255
 8007d90:	2800021e 	bne	r5,zero,8007d9c <__lo0bits+0x48>
 8007d94:	1806d23a 	srli	r3,r3,8
 8007d98:	10800204 	addi	r2,r2,8
 8007d9c:	194003cc 	andi	r5,r3,15
 8007da0:	2800021e 	bne	r5,zero,8007dac <__lo0bits+0x58>
 8007da4:	1806d13a 	srli	r3,r3,4
 8007da8:	10800104 	addi	r2,r2,4
 8007dac:	194000cc 	andi	r5,r3,3
 8007db0:	2800021e 	bne	r5,zero,8007dbc <__lo0bits+0x68>
 8007db4:	1806d0ba 	srli	r3,r3,2
 8007db8:	10800084 	addi	r2,r2,2
 8007dbc:	1940004c 	andi	r5,r3,1
 8007dc0:	2800081e 	bne	r5,zero,8007de4 <__lo0bits+0x90>
 8007dc4:	1806d07a 	srli	r3,r3,1
 8007dc8:	1800051e 	bne	r3,zero,8007de0 <__lo0bits+0x8c>
 8007dcc:	00800804 	movi	r2,32
 8007dd0:	f800283a 	ret
 8007dd4:	1806d43a 	srli	r3,r3,16
 8007dd8:	00800404 	movi	r2,16
 8007ddc:	003feb06 	br	8007d8c <__alt_data_end+0xfc007d8c>
 8007de0:	10800044 	addi	r2,r2,1
 8007de4:	20c00015 	stw	r3,0(r4)
 8007de8:	f800283a 	ret
 8007dec:	0005883a 	mov	r2,zero
 8007df0:	f800283a 	ret
 8007df4:	1806d07a 	srli	r3,r3,1
 8007df8:	00800044 	movi	r2,1
 8007dfc:	20c00015 	stw	r3,0(r4)
 8007e00:	f800283a 	ret

08007e04 <__i2b>:
 8007e04:	defffd04 	addi	sp,sp,-12
 8007e08:	dc000015 	stw	r16,0(sp)
 8007e0c:	04000044 	movi	r16,1
 8007e10:	dc400115 	stw	r17,4(sp)
 8007e14:	2823883a 	mov	r17,r5
 8007e18:	800b883a 	mov	r5,r16
 8007e1c:	dfc00215 	stw	ra,8(sp)
 8007e20:	8007a040 	call	8007a04 <_Balloc>
 8007e24:	14400515 	stw	r17,20(r2)
 8007e28:	14000415 	stw	r16,16(r2)
 8007e2c:	dfc00217 	ldw	ra,8(sp)
 8007e30:	dc400117 	ldw	r17,4(sp)
 8007e34:	dc000017 	ldw	r16,0(sp)
 8007e38:	dec00304 	addi	sp,sp,12
 8007e3c:	f800283a 	ret

08007e40 <__multiply>:
 8007e40:	defffa04 	addi	sp,sp,-24
 8007e44:	dcc00315 	stw	r19,12(sp)
 8007e48:	dc800215 	stw	r18,8(sp)
 8007e4c:	2cc00417 	ldw	r19,16(r5)
 8007e50:	34800417 	ldw	r18,16(r6)
 8007e54:	dd000415 	stw	r20,16(sp)
 8007e58:	dc400115 	stw	r17,4(sp)
 8007e5c:	dfc00515 	stw	ra,20(sp)
 8007e60:	dc000015 	stw	r16,0(sp)
 8007e64:	2829883a 	mov	r20,r5
 8007e68:	3023883a 	mov	r17,r6
 8007e6c:	9c807016 	blt	r19,r18,8008030 <__multiply+0x1f0>
 8007e70:	9005883a 	mov	r2,r18
 8007e74:	9825883a 	mov	r18,r19
 8007e78:	1027883a 	mov	r19,r2
 8007e7c:	a0800217 	ldw	r2,8(r20)
 8007e80:	94e1883a 	add	r16,r18,r19
 8007e84:	a1400117 	ldw	r5,4(r20)
 8007e88:	1400010e 	bge	r2,r16,8007e90 <__multiply+0x50>
 8007e8c:	29400044 	addi	r5,r5,1
 8007e90:	8007a040 	call	8007a04 <_Balloc>
 8007e94:	8417883a 	add	r11,r16,r16
 8007e98:	13000504 	addi	r12,r2,20
 8007e9c:	5ad7883a 	add	r11,r11,r11
 8007ea0:	62d7883a 	add	r11,r12,r11
 8007ea4:	6007883a 	mov	r3,r12
 8007ea8:	62c0032e 	bgeu	r12,r11,8007eb8 <__multiply+0x78>
 8007eac:	18000015 	stw	zero,0(r3)
 8007eb0:	18c00104 	addi	r3,r3,4
 8007eb4:	1afffd36 	bltu	r3,r11,8007eac <__alt_data_end+0xfc007eac>
 8007eb8:	9ce7883a 	add	r19,r19,r19
 8007ebc:	94a5883a 	add	r18,r18,r18
 8007ec0:	89800504 	addi	r6,r17,20
 8007ec4:	9ce7883a 	add	r19,r19,r19
 8007ec8:	a3800504 	addi	r14,r20,20
 8007ecc:	94a5883a 	add	r18,r18,r18
 8007ed0:	34db883a 	add	r13,r6,r19
 8007ed4:	7495883a 	add	r10,r14,r18
 8007ed8:	3340422e 	bgeu	r6,r13,8007fe4 <__multiply+0x1a4>
 8007edc:	34400017 	ldw	r17,0(r6)
 8007ee0:	8cbfffcc 	andi	r18,r17,65535
 8007ee4:	90001b26 	beq	r18,zero,8007f54 <__multiply+0x114>
 8007ee8:	6013883a 	mov	r9,r12
 8007eec:	7023883a 	mov	r17,r14
 8007ef0:	0011883a 	mov	r8,zero
 8007ef4:	88c00017 	ldw	r3,0(r17)
 8007ef8:	4bc00017 	ldw	r15,0(r9)
 8007efc:	8c400104 	addi	r17,r17,4
 8007f00:	19ffffcc 	andi	r7,r3,65535
 8007f04:	3c8f383a 	mul	r7,r7,r18
 8007f08:	1808d43a 	srli	r4,r3,16
 8007f0c:	797fffcc 	andi	r5,r15,65535
 8007f10:	29cb883a 	add	r5,r5,r7
 8007f14:	2a0b883a 	add	r5,r5,r8
 8007f18:	2489383a 	mul	r4,r4,r18
 8007f1c:	7806d43a 	srli	r3,r15,16
 8007f20:	2810d43a 	srli	r8,r5,16
 8007f24:	297fffcc 	andi	r5,r5,65535
 8007f28:	1907883a 	add	r3,r3,r4
 8007f2c:	1a07883a 	add	r3,r3,r8
 8007f30:	1808943a 	slli	r4,r3,16
 8007f34:	480f883a 	mov	r7,r9
 8007f38:	1810d43a 	srli	r8,r3,16
 8007f3c:	214ab03a 	or	r5,r4,r5
 8007f40:	49400015 	stw	r5,0(r9)
 8007f44:	4a400104 	addi	r9,r9,4
 8007f48:	8abfea36 	bltu	r17,r10,8007ef4 <__alt_data_end+0xfc007ef4>
 8007f4c:	3a000115 	stw	r8,4(r7)
 8007f50:	34400017 	ldw	r17,0(r6)
 8007f54:	8822d43a 	srli	r17,r17,16
 8007f58:	88001f26 	beq	r17,zero,8007fd8 <__multiply+0x198>
 8007f5c:	60c00017 	ldw	r3,0(r12)
 8007f60:	7013883a 	mov	r9,r14
 8007f64:	601f883a 	mov	r15,r12
 8007f68:	1811883a 	mov	r8,r3
 8007f6c:	6027883a 	mov	r19,r12
 8007f70:	000f883a 	mov	r7,zero
 8007f74:	00000106 	br	8007f7c <__multiply+0x13c>
 8007f78:	9027883a 	mov	r19,r18
 8007f7c:	4940000b 	ldhu	r5,0(r9)
 8007f80:	4010d43a 	srli	r8,r8,16
 8007f84:	193fffcc 	andi	r4,r3,65535
 8007f88:	2c4b383a 	mul	r5,r5,r17
 8007f8c:	7bc00104 	addi	r15,r15,4
 8007f90:	4a400104 	addi	r9,r9,4
 8007f94:	2a0b883a 	add	r5,r5,r8
 8007f98:	29cb883a 	add	r5,r5,r7
 8007f9c:	2806943a 	slli	r3,r5,16
 8007fa0:	9c800104 	addi	r18,r19,4
 8007fa4:	280ad43a 	srli	r5,r5,16
 8007fa8:	1908b03a 	or	r4,r3,r4
 8007fac:	793fff15 	stw	r4,-4(r15)
 8007fb0:	48ffff17 	ldw	r3,-4(r9)
 8007fb4:	92000017 	ldw	r8,0(r18)
 8007fb8:	1806d43a 	srli	r3,r3,16
 8007fbc:	413fffcc 	andi	r4,r8,65535
 8007fc0:	1c47383a 	mul	r3,r3,r17
 8007fc4:	1907883a 	add	r3,r3,r4
 8007fc8:	1947883a 	add	r3,r3,r5
 8007fcc:	180ed43a 	srli	r7,r3,16
 8007fd0:	4abfe936 	bltu	r9,r10,8007f78 <__alt_data_end+0xfc007f78>
 8007fd4:	98c00115 	stw	r3,4(r19)
 8007fd8:	31800104 	addi	r6,r6,4
 8007fdc:	63000104 	addi	r12,r12,4
 8007fe0:	337fbe36 	bltu	r6,r13,8007edc <__alt_data_end+0xfc007edc>
 8007fe4:	0400090e 	bge	zero,r16,800800c <__multiply+0x1cc>
 8007fe8:	58ffff17 	ldw	r3,-4(r11)
 8007fec:	5affff04 	addi	r11,r11,-4
 8007ff0:	18000326 	beq	r3,zero,8008000 <__multiply+0x1c0>
 8007ff4:	00000506 	br	800800c <__multiply+0x1cc>
 8007ff8:	58c00017 	ldw	r3,0(r11)
 8007ffc:	1800031e 	bne	r3,zero,800800c <__multiply+0x1cc>
 8008000:	843fffc4 	addi	r16,r16,-1
 8008004:	5affff04 	addi	r11,r11,-4
 8008008:	803ffb1e 	bne	r16,zero,8007ff8 <__alt_data_end+0xfc007ff8>
 800800c:	14000415 	stw	r16,16(r2)
 8008010:	dfc00517 	ldw	ra,20(sp)
 8008014:	dd000417 	ldw	r20,16(sp)
 8008018:	dcc00317 	ldw	r19,12(sp)
 800801c:	dc800217 	ldw	r18,8(sp)
 8008020:	dc400117 	ldw	r17,4(sp)
 8008024:	dc000017 	ldw	r16,0(sp)
 8008028:	dec00604 	addi	sp,sp,24
 800802c:	f800283a 	ret
 8008030:	3029883a 	mov	r20,r6
 8008034:	2823883a 	mov	r17,r5
 8008038:	003f9006 	br	8007e7c <__alt_data_end+0xfc007e7c>

0800803c <__pow5mult>:
 800803c:	defffa04 	addi	sp,sp,-24
 8008040:	dcc00315 	stw	r19,12(sp)
 8008044:	dc800215 	stw	r18,8(sp)
 8008048:	dc000015 	stw	r16,0(sp)
 800804c:	dfc00515 	stw	ra,20(sp)
 8008050:	dd000415 	stw	r20,16(sp)
 8008054:	dc400115 	stw	r17,4(sp)
 8008058:	308000cc 	andi	r2,r6,3
 800805c:	3021883a 	mov	r16,r6
 8008060:	2027883a 	mov	r19,r4
 8008064:	2825883a 	mov	r18,r5
 8008068:	10002e1e 	bne	r2,zero,8008124 <__pow5mult+0xe8>
 800806c:	8021d0ba 	srai	r16,r16,2
 8008070:	80001a26 	beq	r16,zero,80080dc <__pow5mult+0xa0>
 8008074:	9c401217 	ldw	r17,72(r19)
 8008078:	8800061e 	bne	r17,zero,8008094 <__pow5mult+0x58>
 800807c:	00003406 	br	8008150 <__pow5mult+0x114>
 8008080:	8021d07a 	srai	r16,r16,1
 8008084:	80001526 	beq	r16,zero,80080dc <__pow5mult+0xa0>
 8008088:	88800017 	ldw	r2,0(r17)
 800808c:	10001c26 	beq	r2,zero,8008100 <__pow5mult+0xc4>
 8008090:	1023883a 	mov	r17,r2
 8008094:	80c0004c 	andi	r3,r16,1
 8008098:	183ff926 	beq	r3,zero,8008080 <__alt_data_end+0xfc008080>
 800809c:	900b883a 	mov	r5,r18
 80080a0:	880d883a 	mov	r6,r17
 80080a4:	9809883a 	mov	r4,r19
 80080a8:	8007e400 	call	8007e40 <__multiply>
 80080ac:	90001b26 	beq	r18,zero,800811c <__pow5mult+0xe0>
 80080b0:	91c00117 	ldw	r7,4(r18)
 80080b4:	98c01317 	ldw	r3,76(r19)
 80080b8:	8021d07a 	srai	r16,r16,1
 80080bc:	39cf883a 	add	r7,r7,r7
 80080c0:	39cf883a 	add	r7,r7,r7
 80080c4:	19c7883a 	add	r3,r3,r7
 80080c8:	19000017 	ldw	r4,0(r3)
 80080cc:	91000015 	stw	r4,0(r18)
 80080d0:	1c800015 	stw	r18,0(r3)
 80080d4:	1025883a 	mov	r18,r2
 80080d8:	803feb1e 	bne	r16,zero,8008088 <__alt_data_end+0xfc008088>
 80080dc:	9005883a 	mov	r2,r18
 80080e0:	dfc00517 	ldw	ra,20(sp)
 80080e4:	dd000417 	ldw	r20,16(sp)
 80080e8:	dcc00317 	ldw	r19,12(sp)
 80080ec:	dc800217 	ldw	r18,8(sp)
 80080f0:	dc400117 	ldw	r17,4(sp)
 80080f4:	dc000017 	ldw	r16,0(sp)
 80080f8:	dec00604 	addi	sp,sp,24
 80080fc:	f800283a 	ret
 8008100:	9809883a 	mov	r4,r19
 8008104:	880b883a 	mov	r5,r17
 8008108:	880d883a 	mov	r6,r17
 800810c:	8007e400 	call	8007e40 <__multiply>
 8008110:	88800015 	stw	r2,0(r17)
 8008114:	10000015 	stw	zero,0(r2)
 8008118:	003fdd06 	br	8008090 <__alt_data_end+0xfc008090>
 800811c:	1025883a 	mov	r18,r2
 8008120:	003fd706 	br	8008080 <__alt_data_end+0xfc008080>
 8008124:	10bfffc4 	addi	r2,r2,-1
 8008128:	1085883a 	add	r2,r2,r2
 800812c:	00c200b4 	movhi	r3,2050
 8008130:	18ee4304 	addi	r3,r3,-18164
 8008134:	1085883a 	add	r2,r2,r2
 8008138:	1885883a 	add	r2,r3,r2
 800813c:	11800017 	ldw	r6,0(r2)
 8008140:	000f883a 	mov	r7,zero
 8008144:	8007ad40 	call	8007ad4 <__multadd>
 8008148:	1025883a 	mov	r18,r2
 800814c:	003fc706 	br	800806c <__alt_data_end+0xfc00806c>
 8008150:	05000044 	movi	r20,1
 8008154:	9809883a 	mov	r4,r19
 8008158:	a00b883a 	mov	r5,r20
 800815c:	8007a040 	call	8007a04 <_Balloc>
 8008160:	1023883a 	mov	r17,r2
 8008164:	00809c44 	movi	r2,625
 8008168:	88800515 	stw	r2,20(r17)
 800816c:	8d000415 	stw	r20,16(r17)
 8008170:	9c401215 	stw	r17,72(r19)
 8008174:	88000015 	stw	zero,0(r17)
 8008178:	003fc606 	br	8008094 <__alt_data_end+0xfc008094>

0800817c <__lshift>:
 800817c:	defff904 	addi	sp,sp,-28
 8008180:	dd000415 	stw	r20,16(sp)
 8008184:	dcc00315 	stw	r19,12(sp)
 8008188:	3029d17a 	srai	r20,r6,5
 800818c:	2cc00417 	ldw	r19,16(r5)
 8008190:	28800217 	ldw	r2,8(r5)
 8008194:	dd400515 	stw	r21,20(sp)
 8008198:	a4e7883a 	add	r19,r20,r19
 800819c:	dc800215 	stw	r18,8(sp)
 80081a0:	dc400115 	stw	r17,4(sp)
 80081a4:	dc000015 	stw	r16,0(sp)
 80081a8:	dfc00615 	stw	ra,24(sp)
 80081ac:	9c000044 	addi	r16,r19,1
 80081b0:	2823883a 	mov	r17,r5
 80081b4:	302b883a 	mov	r21,r6
 80081b8:	2025883a 	mov	r18,r4
 80081bc:	29400117 	ldw	r5,4(r5)
 80081c0:	1400030e 	bge	r2,r16,80081d0 <__lshift+0x54>
 80081c4:	1085883a 	add	r2,r2,r2
 80081c8:	29400044 	addi	r5,r5,1
 80081cc:	143ffd16 	blt	r2,r16,80081c4 <__alt_data_end+0xfc0081c4>
 80081d0:	9009883a 	mov	r4,r18
 80081d4:	8007a040 	call	8007a04 <_Balloc>
 80081d8:	11c00504 	addi	r7,r2,20
 80081dc:	0500090e 	bge	zero,r20,8008204 <__lshift+0x88>
 80081e0:	3811883a 	mov	r8,r7
 80081e4:	0007883a 	mov	r3,zero
 80081e8:	40000015 	stw	zero,0(r8)
 80081ec:	18c00044 	addi	r3,r3,1
 80081f0:	42000104 	addi	r8,r8,4
 80081f4:	1d3ffc1e 	bne	r3,r20,80081e8 <__alt_data_end+0xfc0081e8>
 80081f8:	18c7883a 	add	r3,r3,r3
 80081fc:	18c7883a 	add	r3,r3,r3
 8008200:	38cf883a 	add	r7,r7,r3
 8008204:	89000417 	ldw	r4,16(r17)
 8008208:	88c00504 	addi	r3,r17,20
 800820c:	a98007cc 	andi	r6,r21,31
 8008210:	2109883a 	add	r4,r4,r4
 8008214:	2109883a 	add	r4,r4,r4
 8008218:	1909883a 	add	r4,r3,r4
 800821c:	30002326 	beq	r6,zero,80082ac <__lshift+0x130>
 8008220:	01400804 	movi	r5,32
 8008224:	298bc83a 	sub	r5,r5,r6
 8008228:	0013883a 	mov	r9,zero
 800822c:	1a000017 	ldw	r8,0(r3)
 8008230:	3815883a 	mov	r10,r7
 8008234:	39c00104 	addi	r7,r7,4
 8008238:	4190983a 	sll	r8,r8,r6
 800823c:	18c00104 	addi	r3,r3,4
 8008240:	4a10b03a 	or	r8,r9,r8
 8008244:	3a3fff15 	stw	r8,-4(r7)
 8008248:	1a3fff17 	ldw	r8,-4(r3)
 800824c:	4152d83a 	srl	r9,r8,r5
 8008250:	193ff636 	bltu	r3,r4,800822c <__alt_data_end+0xfc00822c>
 8008254:	52400115 	stw	r9,4(r10)
 8008258:	48000126 	beq	r9,zero,8008260 <__lshift+0xe4>
 800825c:	9c000084 	addi	r16,r19,2
 8008260:	89000117 	ldw	r4,4(r17)
 8008264:	90c01317 	ldw	r3,76(r18)
 8008268:	843fffc4 	addi	r16,r16,-1
 800826c:	2109883a 	add	r4,r4,r4
 8008270:	2109883a 	add	r4,r4,r4
 8008274:	1907883a 	add	r3,r3,r4
 8008278:	19000017 	ldw	r4,0(r3)
 800827c:	14000415 	stw	r16,16(r2)
 8008280:	89000015 	stw	r4,0(r17)
 8008284:	1c400015 	stw	r17,0(r3)
 8008288:	dfc00617 	ldw	ra,24(sp)
 800828c:	dd400517 	ldw	r21,20(sp)
 8008290:	dd000417 	ldw	r20,16(sp)
 8008294:	dcc00317 	ldw	r19,12(sp)
 8008298:	dc800217 	ldw	r18,8(sp)
 800829c:	dc400117 	ldw	r17,4(sp)
 80082a0:	dc000017 	ldw	r16,0(sp)
 80082a4:	dec00704 	addi	sp,sp,28
 80082a8:	f800283a 	ret
 80082ac:	19400017 	ldw	r5,0(r3)
 80082b0:	39c00104 	addi	r7,r7,4
 80082b4:	18c00104 	addi	r3,r3,4
 80082b8:	397fff15 	stw	r5,-4(r7)
 80082bc:	193ffb36 	bltu	r3,r4,80082ac <__alt_data_end+0xfc0082ac>
 80082c0:	003fe706 	br	8008260 <__alt_data_end+0xfc008260>

080082c4 <__mcmp>:
 80082c4:	20800417 	ldw	r2,16(r4)
 80082c8:	28c00417 	ldw	r3,16(r5)
 80082cc:	10c5c83a 	sub	r2,r2,r3
 80082d0:	1000111e 	bne	r2,zero,8008318 <__mcmp+0x54>
 80082d4:	18c7883a 	add	r3,r3,r3
 80082d8:	18c7883a 	add	r3,r3,r3
 80082dc:	21000504 	addi	r4,r4,20
 80082e0:	29400504 	addi	r5,r5,20
 80082e4:	20c5883a 	add	r2,r4,r3
 80082e8:	28cb883a 	add	r5,r5,r3
 80082ec:	00000106 	br	80082f4 <__mcmp+0x30>
 80082f0:	20800a2e 	bgeu	r4,r2,800831c <__mcmp+0x58>
 80082f4:	10bfff04 	addi	r2,r2,-4
 80082f8:	297fff04 	addi	r5,r5,-4
 80082fc:	11800017 	ldw	r6,0(r2)
 8008300:	28c00017 	ldw	r3,0(r5)
 8008304:	30fffa26 	beq	r6,r3,80082f0 <__alt_data_end+0xfc0082f0>
 8008308:	30c00236 	bltu	r6,r3,8008314 <__mcmp+0x50>
 800830c:	00800044 	movi	r2,1
 8008310:	f800283a 	ret
 8008314:	00bfffc4 	movi	r2,-1
 8008318:	f800283a 	ret
 800831c:	0005883a 	mov	r2,zero
 8008320:	f800283a 	ret

08008324 <__mdiff>:
 8008324:	defffb04 	addi	sp,sp,-20
 8008328:	dc000015 	stw	r16,0(sp)
 800832c:	2821883a 	mov	r16,r5
 8008330:	dcc00315 	stw	r19,12(sp)
 8008334:	300b883a 	mov	r5,r6
 8008338:	2027883a 	mov	r19,r4
 800833c:	8009883a 	mov	r4,r16
 8008340:	dc800215 	stw	r18,8(sp)
 8008344:	dfc00415 	stw	ra,16(sp)
 8008348:	dc400115 	stw	r17,4(sp)
 800834c:	3025883a 	mov	r18,r6
 8008350:	80082c40 	call	80082c4 <__mcmp>
 8008354:	10005226 	beq	r2,zero,80084a0 <__mdiff+0x17c>
 8008358:	10004c16 	blt	r2,zero,800848c <__mdiff+0x168>
 800835c:	0023883a 	mov	r17,zero
 8008360:	81400117 	ldw	r5,4(r16)
 8008364:	9809883a 	mov	r4,r19
 8008368:	8007a040 	call	8007a04 <_Balloc>
 800836c:	83400417 	ldw	r13,16(r16)
 8008370:	93800417 	ldw	r14,16(r18)
 8008374:	81000504 	addi	r4,r16,20
 8008378:	6b59883a 	add	r12,r13,r13
 800837c:	739d883a 	add	r14,r14,r14
 8008380:	6319883a 	add	r12,r12,r12
 8008384:	91800504 	addi	r6,r18,20
 8008388:	739d883a 	add	r14,r14,r14
 800838c:	14400315 	stw	r17,12(r2)
 8008390:	2319883a 	add	r12,r4,r12
 8008394:	339d883a 	add	r14,r6,r14
 8008398:	12400504 	addi	r9,r2,20
 800839c:	0007883a 	mov	r3,zero
 80083a0:	22000017 	ldw	r8,0(r4)
 80083a4:	32800017 	ldw	r10,0(r6)
 80083a8:	4ac00104 	addi	r11,r9,4
 80083ac:	41ffffcc 	andi	r7,r8,65535
 80083b0:	38c7883a 	add	r3,r7,r3
 80083b4:	51ffffcc 	andi	r7,r10,65535
 80083b8:	19cfc83a 	sub	r7,r3,r7
 80083bc:	4010d43a 	srli	r8,r8,16
 80083c0:	5014d43a 	srli	r10,r10,16
 80083c4:	3807d43a 	srai	r3,r7,16
 80083c8:	39ffffcc 	andi	r7,r7,65535
 80083cc:	4291c83a 	sub	r8,r8,r10
 80083d0:	40c7883a 	add	r3,r8,r3
 80083d4:	1810943a 	slli	r8,r3,16
 80083d8:	31800104 	addi	r6,r6,4
 80083dc:	21000104 	addi	r4,r4,4
 80083e0:	41ceb03a 	or	r7,r8,r7
 80083e4:	49c00015 	stw	r7,0(r9)
 80083e8:	1807d43a 	srai	r3,r3,16
 80083ec:	580b883a 	mov	r5,r11
 80083f0:	5813883a 	mov	r9,r11
 80083f4:	33bfea36 	bltu	r6,r14,80083a0 <__alt_data_end+0xfc0083a0>
 80083f8:	2011883a 	mov	r8,r4
 80083fc:	2300152e 	bgeu	r4,r12,8008454 <__mdiff+0x130>
 8008400:	21400017 	ldw	r5,0(r4)
 8008404:	4a400104 	addi	r9,r9,4
 8008408:	21000104 	addi	r4,r4,4
 800840c:	29ffffcc 	andi	r7,r5,65535
 8008410:	38c7883a 	add	r3,r7,r3
 8008414:	280ad43a 	srli	r5,r5,16
 8008418:	180dd43a 	srai	r6,r3,16
 800841c:	19ffffcc 	andi	r7,r3,65535
 8008420:	3147883a 	add	r3,r6,r5
 8008424:	180a943a 	slli	r5,r3,16
 8008428:	1807d43a 	srai	r3,r3,16
 800842c:	29ceb03a 	or	r7,r5,r7
 8008430:	49ffff15 	stw	r7,-4(r9)
 8008434:	233ff236 	bltu	r4,r12,8008400 <__alt_data_end+0xfc008400>
 8008438:	0206303a 	nor	r3,zero,r8
 800843c:	1b07883a 	add	r3,r3,r12
 8008440:	1806d0ba 	srli	r3,r3,2
 8008444:	18c00044 	addi	r3,r3,1
 8008448:	18c7883a 	add	r3,r3,r3
 800844c:	18c7883a 	add	r3,r3,r3
 8008450:	58cb883a 	add	r5,r11,r3
 8008454:	28ffff04 	addi	r3,r5,-4
 8008458:	3800041e 	bne	r7,zero,800846c <__mdiff+0x148>
 800845c:	18ffff04 	addi	r3,r3,-4
 8008460:	19000017 	ldw	r4,0(r3)
 8008464:	6b7fffc4 	addi	r13,r13,-1
 8008468:	203ffc26 	beq	r4,zero,800845c <__alt_data_end+0xfc00845c>
 800846c:	13400415 	stw	r13,16(r2)
 8008470:	dfc00417 	ldw	ra,16(sp)
 8008474:	dcc00317 	ldw	r19,12(sp)
 8008478:	dc800217 	ldw	r18,8(sp)
 800847c:	dc400117 	ldw	r17,4(sp)
 8008480:	dc000017 	ldw	r16,0(sp)
 8008484:	dec00504 	addi	sp,sp,20
 8008488:	f800283a 	ret
 800848c:	8005883a 	mov	r2,r16
 8008490:	04400044 	movi	r17,1
 8008494:	9021883a 	mov	r16,r18
 8008498:	1025883a 	mov	r18,r2
 800849c:	003fb006 	br	8008360 <__alt_data_end+0xfc008360>
 80084a0:	9809883a 	mov	r4,r19
 80084a4:	000b883a 	mov	r5,zero
 80084a8:	8007a040 	call	8007a04 <_Balloc>
 80084ac:	00c00044 	movi	r3,1
 80084b0:	10c00415 	stw	r3,16(r2)
 80084b4:	10000515 	stw	zero,20(r2)
 80084b8:	003fed06 	br	8008470 <__alt_data_end+0xfc008470>

080084bc <__ulp>:
 80084bc:	295ffc2c 	andhi	r5,r5,32752
 80084c0:	00bf3034 	movhi	r2,64704
 80084c4:	2887883a 	add	r3,r5,r2
 80084c8:	00c0020e 	bge	zero,r3,80084d4 <__ulp+0x18>
 80084cc:	0005883a 	mov	r2,zero
 80084d0:	f800283a 	ret
 80084d4:	00c7c83a 	sub	r3,zero,r3
 80084d8:	180bd53a 	srai	r5,r3,20
 80084dc:	008004c4 	movi	r2,19
 80084e0:	11400a0e 	bge	r2,r5,800850c <__ulp+0x50>
 80084e4:	00800c84 	movi	r2,50
 80084e8:	0007883a 	mov	r3,zero
 80084ec:	11400516 	blt	r2,r5,8008504 <__ulp+0x48>
 80084f0:	00800cc4 	movi	r2,51
 80084f4:	114bc83a 	sub	r5,r2,r5
 80084f8:	00800044 	movi	r2,1
 80084fc:	1144983a 	sll	r2,r2,r5
 8008500:	f800283a 	ret
 8008504:	00800044 	movi	r2,1
 8008508:	f800283a 	ret
 800850c:	00800234 	movhi	r2,8
 8008510:	1147d83a 	sra	r3,r2,r5
 8008514:	0005883a 	mov	r2,zero
 8008518:	f800283a 	ret

0800851c <__b2d>:
 800851c:	defffa04 	addi	sp,sp,-24
 8008520:	dc000015 	stw	r16,0(sp)
 8008524:	24000417 	ldw	r16,16(r4)
 8008528:	dc400115 	stw	r17,4(sp)
 800852c:	24400504 	addi	r17,r4,20
 8008530:	8421883a 	add	r16,r16,r16
 8008534:	8421883a 	add	r16,r16,r16
 8008538:	8c21883a 	add	r16,r17,r16
 800853c:	dc800215 	stw	r18,8(sp)
 8008540:	84bfff17 	ldw	r18,-4(r16)
 8008544:	dd000415 	stw	r20,16(sp)
 8008548:	dcc00315 	stw	r19,12(sp)
 800854c:	9009883a 	mov	r4,r18
 8008550:	2829883a 	mov	r20,r5
 8008554:	dfc00515 	stw	ra,20(sp)
 8008558:	8007cec0 	call	8007cec <__hi0bits>
 800855c:	00c00804 	movi	r3,32
 8008560:	1887c83a 	sub	r3,r3,r2
 8008564:	a0c00015 	stw	r3,0(r20)
 8008568:	00c00284 	movi	r3,10
 800856c:	84ffff04 	addi	r19,r16,-4
 8008570:	18801216 	blt	r3,r2,80085bc <__b2d+0xa0>
 8008574:	014002c4 	movi	r5,11
 8008578:	2889c83a 	sub	r4,r5,r2
 800857c:	9106d83a 	srl	r3,r18,r4
 8008580:	18cffc34 	orhi	r3,r3,16368
 8008584:	8cc0282e 	bgeu	r17,r19,8008628 <__b2d+0x10c>
 8008588:	817ffe17 	ldw	r5,-8(r16)
 800858c:	290ad83a 	srl	r5,r5,r4
 8008590:	10800544 	addi	r2,r2,21
 8008594:	9084983a 	sll	r2,r18,r2
 8008598:	2884b03a 	or	r2,r5,r2
 800859c:	dfc00517 	ldw	ra,20(sp)
 80085a0:	dd000417 	ldw	r20,16(sp)
 80085a4:	dcc00317 	ldw	r19,12(sp)
 80085a8:	dc800217 	ldw	r18,8(sp)
 80085ac:	dc400117 	ldw	r17,4(sp)
 80085b0:	dc000017 	ldw	r16,0(sp)
 80085b4:	dec00604 	addi	sp,sp,24
 80085b8:	f800283a 	ret
 80085bc:	113ffd44 	addi	r4,r2,-11
 80085c0:	8cc00f2e 	bgeu	r17,r19,8008600 <__b2d+0xe4>
 80085c4:	81bffe04 	addi	r6,r16,-8
 80085c8:	817ffe17 	ldw	r5,-8(r16)
 80085cc:	20001326 	beq	r4,zero,800861c <__b2d+0x100>
 80085d0:	00c00ac4 	movi	r3,43
 80085d4:	1885c83a 	sub	r2,r3,r2
 80085d8:	2886d83a 	srl	r3,r5,r2
 80085dc:	9124983a 	sll	r18,r18,r4
 80085e0:	90e4b03a 	or	r18,r18,r3
 80085e4:	90cffc34 	orhi	r3,r18,16368
 80085e8:	8980112e 	bgeu	r17,r6,8008630 <__b2d+0x114>
 80085ec:	81bffd17 	ldw	r6,-12(r16)
 80085f0:	308cd83a 	srl	r6,r6,r2
 80085f4:	2904983a 	sll	r2,r5,r4
 80085f8:	1184b03a 	or	r2,r2,r6
 80085fc:	003fe706 	br	800859c <__alt_data_end+0xfc00859c>
 8008600:	20000526 	beq	r4,zero,8008618 <__b2d+0xfc>
 8008604:	9124983a 	sll	r18,r18,r4
 8008608:	000d883a 	mov	r6,zero
 800860c:	000b883a 	mov	r5,zero
 8008610:	90cffc34 	orhi	r3,r18,16368
 8008614:	003ff706 	br	80085f4 <__alt_data_end+0xfc0085f4>
 8008618:	000b883a 	mov	r5,zero
 800861c:	90cffc34 	orhi	r3,r18,16368
 8008620:	2805883a 	mov	r2,r5
 8008624:	003fdd06 	br	800859c <__alt_data_end+0xfc00859c>
 8008628:	000b883a 	mov	r5,zero
 800862c:	003fd806 	br	8008590 <__alt_data_end+0xfc008590>
 8008630:	000d883a 	mov	r6,zero
 8008634:	003fef06 	br	80085f4 <__alt_data_end+0xfc0085f4>

08008638 <__d2b>:
 8008638:	defff704 	addi	sp,sp,-36
 800863c:	dc000215 	stw	r16,8(sp)
 8008640:	3021883a 	mov	r16,r6
 8008644:	dc400315 	stw	r17,12(sp)
 8008648:	8022907a 	slli	r17,r16,1
 800864c:	dd400715 	stw	r21,28(sp)
 8008650:	282b883a 	mov	r21,r5
 8008654:	01400044 	movi	r5,1
 8008658:	dd000615 	stw	r20,24(sp)
 800865c:	dcc00515 	stw	r19,20(sp)
 8008660:	dc800415 	stw	r18,16(sp)
 8008664:	dfc00815 	stw	ra,32(sp)
 8008668:	3829883a 	mov	r20,r7
 800866c:	dc800917 	ldw	r18,36(sp)
 8008670:	8822d57a 	srli	r17,r17,21
 8008674:	8007a040 	call	8007a04 <_Balloc>
 8008678:	1027883a 	mov	r19,r2
 800867c:	00800434 	movhi	r2,16
 8008680:	10bfffc4 	addi	r2,r2,-1
 8008684:	808c703a 	and	r6,r16,r2
 8008688:	88000126 	beq	r17,zero,8008690 <__d2b+0x58>
 800868c:	31800434 	orhi	r6,r6,16
 8008690:	d9800015 	stw	r6,0(sp)
 8008694:	a8001f26 	beq	r21,zero,8008714 <__d2b+0xdc>
 8008698:	d9000104 	addi	r4,sp,4
 800869c:	dd400115 	stw	r21,4(sp)
 80086a0:	8007d540 	call	8007d54 <__lo0bits>
 80086a4:	d8c00017 	ldw	r3,0(sp)
 80086a8:	1000291e 	bne	r2,zero,8008750 <__d2b+0x118>
 80086ac:	d9000117 	ldw	r4,4(sp)
 80086b0:	99000515 	stw	r4,20(r19)
 80086b4:	1820c03a 	cmpne	r16,r3,zero
 80086b8:	84000044 	addi	r16,r16,1
 80086bc:	98c00615 	stw	r3,24(r19)
 80086c0:	9c000415 	stw	r16,16(r19)
 80086c4:	88001b1e 	bne	r17,zero,8008734 <__d2b+0xfc>
 80086c8:	800690ba 	slli	r3,r16,2
 80086cc:	10bef384 	addi	r2,r2,-1074
 80086d0:	a0800015 	stw	r2,0(r20)
 80086d4:	98c5883a 	add	r2,r19,r3
 80086d8:	11000417 	ldw	r4,16(r2)
 80086dc:	8020917a 	slli	r16,r16,5
 80086e0:	8007cec0 	call	8007cec <__hi0bits>
 80086e4:	8085c83a 	sub	r2,r16,r2
 80086e8:	90800015 	stw	r2,0(r18)
 80086ec:	9805883a 	mov	r2,r19
 80086f0:	dfc00817 	ldw	ra,32(sp)
 80086f4:	dd400717 	ldw	r21,28(sp)
 80086f8:	dd000617 	ldw	r20,24(sp)
 80086fc:	dcc00517 	ldw	r19,20(sp)
 8008700:	dc800417 	ldw	r18,16(sp)
 8008704:	dc400317 	ldw	r17,12(sp)
 8008708:	dc000217 	ldw	r16,8(sp)
 800870c:	dec00904 	addi	sp,sp,36
 8008710:	f800283a 	ret
 8008714:	d809883a 	mov	r4,sp
 8008718:	8007d540 	call	8007d54 <__lo0bits>
 800871c:	d8c00017 	ldw	r3,0(sp)
 8008720:	04000044 	movi	r16,1
 8008724:	9c000415 	stw	r16,16(r19)
 8008728:	98c00515 	stw	r3,20(r19)
 800872c:	10800804 	addi	r2,r2,32
 8008730:	883fe526 	beq	r17,zero,80086c8 <__alt_data_end+0xfc0086c8>
 8008734:	8c7ef344 	addi	r17,r17,-1075
 8008738:	88a3883a 	add	r17,r17,r2
 800873c:	00c00d44 	movi	r3,53
 8008740:	a4400015 	stw	r17,0(r20)
 8008744:	1885c83a 	sub	r2,r3,r2
 8008748:	90800015 	stw	r2,0(r18)
 800874c:	003fe706 	br	80086ec <__alt_data_end+0xfc0086ec>
 8008750:	01000804 	movi	r4,32
 8008754:	2089c83a 	sub	r4,r4,r2
 8008758:	1908983a 	sll	r4,r3,r4
 800875c:	d9400117 	ldw	r5,4(sp)
 8008760:	1886d83a 	srl	r3,r3,r2
 8008764:	2148b03a 	or	r4,r4,r5
 8008768:	99000515 	stw	r4,20(r19)
 800876c:	d8c00015 	stw	r3,0(sp)
 8008770:	003fd006 	br	80086b4 <__alt_data_end+0xfc0086b4>

08008774 <__ratio>:
 8008774:	defff904 	addi	sp,sp,-28
 8008778:	dc400315 	stw	r17,12(sp)
 800877c:	2823883a 	mov	r17,r5
 8008780:	d9400104 	addi	r5,sp,4
 8008784:	dfc00615 	stw	ra,24(sp)
 8008788:	dcc00515 	stw	r19,20(sp)
 800878c:	dc800415 	stw	r18,16(sp)
 8008790:	2027883a 	mov	r19,r4
 8008794:	dc000215 	stw	r16,8(sp)
 8008798:	800851c0 	call	800851c <__b2d>
 800879c:	8809883a 	mov	r4,r17
 80087a0:	d80b883a 	mov	r5,sp
 80087a4:	1025883a 	mov	r18,r2
 80087a8:	1821883a 	mov	r16,r3
 80087ac:	800851c0 	call	800851c <__b2d>
 80087b0:	8a400417 	ldw	r9,16(r17)
 80087b4:	9a000417 	ldw	r8,16(r19)
 80087b8:	100d883a 	mov	r6,r2
 80087bc:	d8800017 	ldw	r2,0(sp)
 80087c0:	4251c83a 	sub	r8,r8,r9
 80087c4:	4012917a 	slli	r9,r8,5
 80087c8:	da000117 	ldw	r8,4(sp)
 80087cc:	4091c83a 	sub	r8,r8,r2
 80087d0:	4251883a 	add	r8,r8,r9
 80087d4:	02000d0e 	bge	zero,r8,800880c <__ratio+0x98>
 80087d8:	4010953a 	slli	r8,r8,20
 80087dc:	4421883a 	add	r16,r8,r16
 80087e0:	9009883a 	mov	r4,r18
 80087e4:	800b883a 	mov	r5,r16
 80087e8:	180f883a 	mov	r7,r3
 80087ec:	800c4bc0 	call	800c4bc <__divdf3>
 80087f0:	dfc00617 	ldw	ra,24(sp)
 80087f4:	dcc00517 	ldw	r19,20(sp)
 80087f8:	dc800417 	ldw	r18,16(sp)
 80087fc:	dc400317 	ldw	r17,12(sp)
 8008800:	dc000217 	ldw	r16,8(sp)
 8008804:	dec00704 	addi	sp,sp,28
 8008808:	f800283a 	ret
 800880c:	4010953a 	slli	r8,r8,20
 8008810:	1a07c83a 	sub	r3,r3,r8
 8008814:	003ff206 	br	80087e0 <__alt_data_end+0xfc0087e0>

08008818 <_mprec_log10>:
 8008818:	defffe04 	addi	sp,sp,-8
 800881c:	dc000015 	stw	r16,0(sp)
 8008820:	dfc00115 	stw	ra,4(sp)
 8008824:	008005c4 	movi	r2,23
 8008828:	2021883a 	mov	r16,r4
 800882c:	11000d0e 	bge	r2,r4,8008864 <_mprec_log10+0x4c>
 8008830:	0005883a 	mov	r2,zero
 8008834:	00cffc34 	movhi	r3,16368
 8008838:	843fffc4 	addi	r16,r16,-1
 800883c:	1009883a 	mov	r4,r2
 8008840:	180b883a 	mov	r5,r3
 8008844:	000d883a 	mov	r6,zero
 8008848:	01d00934 	movhi	r7,16420
 800884c:	800cfcc0 	call	800cfcc <__muldf3>
 8008850:	803ff91e 	bne	r16,zero,8008838 <__alt_data_end+0xfc008838>
 8008854:	dfc00117 	ldw	ra,4(sp)
 8008858:	dc000017 	ldw	r16,0(sp)
 800885c:	dec00204 	addi	sp,sp,8
 8008860:	f800283a 	ret
 8008864:	202090fa 	slli	r16,r4,3
 8008868:	008200b4 	movhi	r2,2050
 800886c:	10ae5a04 	addi	r2,r2,-18072
 8008870:	1421883a 	add	r16,r2,r16
 8008874:	80800017 	ldw	r2,0(r16)
 8008878:	80c00117 	ldw	r3,4(r16)
 800887c:	dfc00117 	ldw	ra,4(sp)
 8008880:	dc000017 	ldw	r16,0(sp)
 8008884:	dec00204 	addi	sp,sp,8
 8008888:	f800283a 	ret

0800888c <__copybits>:
 800888c:	297fffc4 	addi	r5,r5,-1
 8008890:	280fd17a 	srai	r7,r5,5
 8008894:	30c00417 	ldw	r3,16(r6)
 8008898:	30800504 	addi	r2,r6,20
 800889c:	39c00044 	addi	r7,r7,1
 80088a0:	18c7883a 	add	r3,r3,r3
 80088a4:	39cf883a 	add	r7,r7,r7
 80088a8:	18c7883a 	add	r3,r3,r3
 80088ac:	39cf883a 	add	r7,r7,r7
 80088b0:	10c7883a 	add	r3,r2,r3
 80088b4:	21cf883a 	add	r7,r4,r7
 80088b8:	10c00d2e 	bgeu	r2,r3,80088f0 <__copybits+0x64>
 80088bc:	200b883a 	mov	r5,r4
 80088c0:	12000017 	ldw	r8,0(r2)
 80088c4:	29400104 	addi	r5,r5,4
 80088c8:	10800104 	addi	r2,r2,4
 80088cc:	2a3fff15 	stw	r8,-4(r5)
 80088d0:	10fffb36 	bltu	r2,r3,80088c0 <__alt_data_end+0xfc0088c0>
 80088d4:	1985c83a 	sub	r2,r3,r6
 80088d8:	10bffac4 	addi	r2,r2,-21
 80088dc:	1004d0ba 	srli	r2,r2,2
 80088e0:	10800044 	addi	r2,r2,1
 80088e4:	1085883a 	add	r2,r2,r2
 80088e8:	1085883a 	add	r2,r2,r2
 80088ec:	2089883a 	add	r4,r4,r2
 80088f0:	21c0032e 	bgeu	r4,r7,8008900 <__copybits+0x74>
 80088f4:	20000015 	stw	zero,0(r4)
 80088f8:	21000104 	addi	r4,r4,4
 80088fc:	21fffd36 	bltu	r4,r7,80088f4 <__alt_data_end+0xfc0088f4>
 8008900:	f800283a 	ret

08008904 <__any_on>:
 8008904:	20c00417 	ldw	r3,16(r4)
 8008908:	2805d17a 	srai	r2,r5,5
 800890c:	21000504 	addi	r4,r4,20
 8008910:	18800d0e 	bge	r3,r2,8008948 <__any_on+0x44>
 8008914:	18c7883a 	add	r3,r3,r3
 8008918:	18c7883a 	add	r3,r3,r3
 800891c:	20c7883a 	add	r3,r4,r3
 8008920:	20c0192e 	bgeu	r4,r3,8008988 <__any_on+0x84>
 8008924:	18bfff17 	ldw	r2,-4(r3)
 8008928:	18ffff04 	addi	r3,r3,-4
 800892c:	1000041e 	bne	r2,zero,8008940 <__any_on+0x3c>
 8008930:	20c0142e 	bgeu	r4,r3,8008984 <__any_on+0x80>
 8008934:	18ffff04 	addi	r3,r3,-4
 8008938:	19400017 	ldw	r5,0(r3)
 800893c:	283ffc26 	beq	r5,zero,8008930 <__alt_data_end+0xfc008930>
 8008940:	00800044 	movi	r2,1
 8008944:	f800283a 	ret
 8008948:	10c00a0e 	bge	r2,r3,8008974 <__any_on+0x70>
 800894c:	1085883a 	add	r2,r2,r2
 8008950:	1085883a 	add	r2,r2,r2
 8008954:	294007cc 	andi	r5,r5,31
 8008958:	2087883a 	add	r3,r4,r2
 800895c:	283ff026 	beq	r5,zero,8008920 <__alt_data_end+0xfc008920>
 8008960:	19800017 	ldw	r6,0(r3)
 8008964:	3144d83a 	srl	r2,r6,r5
 8008968:	114a983a 	sll	r5,r2,r5
 800896c:	29bff41e 	bne	r5,r6,8008940 <__alt_data_end+0xfc008940>
 8008970:	003feb06 	br	8008920 <__alt_data_end+0xfc008920>
 8008974:	1085883a 	add	r2,r2,r2
 8008978:	1085883a 	add	r2,r2,r2
 800897c:	2087883a 	add	r3,r4,r2
 8008980:	003fe706 	br	8008920 <__alt_data_end+0xfc008920>
 8008984:	f800283a 	ret
 8008988:	0005883a 	mov	r2,zero
 800898c:	f800283a 	ret

08008990 <_realloc_r>:
 8008990:	defff604 	addi	sp,sp,-40
 8008994:	dcc00315 	stw	r19,12(sp)
 8008998:	dc400115 	stw	r17,4(sp)
 800899c:	dfc00915 	stw	ra,36(sp)
 80089a0:	df000815 	stw	fp,32(sp)
 80089a4:	ddc00715 	stw	r23,28(sp)
 80089a8:	dd800615 	stw	r22,24(sp)
 80089ac:	dd400515 	stw	r21,20(sp)
 80089b0:	dd000415 	stw	r20,16(sp)
 80089b4:	dc800215 	stw	r18,8(sp)
 80089b8:	dc000015 	stw	r16,0(sp)
 80089bc:	2827883a 	mov	r19,r5
 80089c0:	3023883a 	mov	r17,r6
 80089c4:	2800bf26 	beq	r5,zero,8008cc4 <_realloc_r+0x334>
 80089c8:	2025883a 	mov	r18,r4
 80089cc:	800e7e00 	call	800e7e0 <__malloc_lock>
 80089d0:	98ffff17 	ldw	r3,-4(r19)
 80089d4:	01bfff04 	movi	r6,-4
 80089d8:	890002c4 	addi	r4,r17,11
 80089dc:	01c00584 	movi	r7,22
 80089e0:	9d7ffe04 	addi	r21,r19,-8
 80089e4:	19a0703a 	and	r16,r3,r6
 80089e8:	39003f2e 	bgeu	r7,r4,8008ae8 <_realloc_r+0x158>
 80089ec:	053ffe04 	movi	r20,-8
 80089f0:	2528703a 	and	r20,r4,r20
 80089f4:	a00f883a 	mov	r7,r20
 80089f8:	a0008216 	blt	r20,zero,8008c04 <_realloc_r+0x274>
 80089fc:	a4408136 	bltu	r20,r17,8008c04 <_realloc_r+0x274>
 8008a00:	81c03c0e 	bge	r16,r7,8008af4 <_realloc_r+0x164>
 8008a04:	070200b4 	movhi	fp,2050
 8008a08:	e7300e04 	addi	fp,fp,-16328
 8008a0c:	e1000217 	ldw	r4,8(fp)
 8008a10:	ac05883a 	add	r2,r21,r16
 8008a14:	2080bf26 	beq	r4,r2,8008d14 <_realloc_r+0x384>
 8008a18:	11000117 	ldw	r4,4(r2)
 8008a1c:	023fff84 	movi	r8,-2
 8008a20:	2210703a 	and	r8,r4,r8
 8008a24:	1211883a 	add	r8,r2,r8
 8008a28:	41400117 	ldw	r5,4(r8)
 8008a2c:	2940004c 	andi	r5,r5,1
 8008a30:	28004a1e 	bne	r5,zero,8008b5c <_realloc_r+0x1cc>
 8008a34:	017fff04 	movi	r5,-4
 8008a38:	2148703a 	and	r4,r4,r5
 8008a3c:	2409883a 	add	r4,r4,r16
 8008a40:	21c0ad0e 	bge	r4,r7,8008cf8 <_realloc_r+0x368>
 8008a44:	18c0004c 	andi	r3,r3,1
 8008a48:	18007f1e 	bne	r3,zero,8008c48 <_realloc_r+0x2b8>
 8008a4c:	9dfffe17 	ldw	r23,-8(r19)
 8008a50:	adefc83a 	sub	r23,r21,r23
 8008a54:	bd800117 	ldw	r22,4(r23)
 8008a58:	b14a703a 	and	r5,r22,r5
 8008a5c:	216d883a 	add	r22,r4,r5
 8008a60:	b1c04516 	blt	r22,r7,8008b78 <_realloc_r+0x1e8>
 8008a64:	10c00317 	ldw	r3,12(r2)
 8008a68:	10800217 	ldw	r2,8(r2)
 8008a6c:	81bfff04 	addi	r6,r16,-4
 8008a70:	bc400204 	addi	r17,r23,8
 8008a74:	10c00315 	stw	r3,12(r2)
 8008a78:	18800215 	stw	r2,8(r3)
 8008a7c:	b9400217 	ldw	r5,8(r23)
 8008a80:	b8c00317 	ldw	r3,12(r23)
 8008a84:	00800904 	movi	r2,36
 8008a88:	28c00315 	stw	r3,12(r5)
 8008a8c:	19400215 	stw	r5,8(r3)
 8008a90:	1180ef36 	bltu	r2,r6,8008e50 <_realloc_r+0x4c0>
 8008a94:	008004c4 	movi	r2,19
 8008a98:	1180da2e 	bgeu	r2,r6,8008e04 <_realloc_r+0x474>
 8008a9c:	98800017 	ldw	r2,0(r19)
 8008aa0:	b8800215 	stw	r2,8(r23)
 8008aa4:	98800117 	ldw	r2,4(r19)
 8008aa8:	b8800315 	stw	r2,12(r23)
 8008aac:	008006c4 	movi	r2,27
 8008ab0:	1180fc2e 	bgeu	r2,r6,8008ea4 <_realloc_r+0x514>
 8008ab4:	98800217 	ldw	r2,8(r19)
 8008ab8:	b8800415 	stw	r2,16(r23)
 8008abc:	98800317 	ldw	r2,12(r19)
 8008ac0:	b8800515 	stw	r2,20(r23)
 8008ac4:	00800904 	movi	r2,36
 8008ac8:	3080421e 	bne	r6,r2,8008bd4 <_realloc_r+0x244>
 8008acc:	98800417 	ldw	r2,16(r19)
 8008ad0:	9cc00604 	addi	r19,r19,24
 8008ad4:	b8c00804 	addi	r3,r23,32
 8008ad8:	b8800615 	stw	r2,24(r23)
 8008adc:	98bfff17 	ldw	r2,-4(r19)
 8008ae0:	b8800715 	stw	r2,28(r23)
 8008ae4:	00003d06 	br	8008bdc <_realloc_r+0x24c>
 8008ae8:	01c00404 	movi	r7,16
 8008aec:	3829883a 	mov	r20,r7
 8008af0:	003fc206 	br	80089fc <__alt_data_end+0xfc0089fc>
 8008af4:	9823883a 	mov	r17,r19
 8008af8:	850fc83a 	sub	r7,r16,r20
 8008afc:	008003c4 	movi	r2,15
 8008b00:	18c0004c 	andi	r3,r3,1
 8008b04:	11c04336 	bltu	r2,r7,8008c14 <_realloc_r+0x284>
 8008b08:	1c06b03a 	or	r3,r3,r16
 8008b0c:	a8c00115 	stw	r3,4(r21)
 8008b10:	ac21883a 	add	r16,r21,r16
 8008b14:	80c00117 	ldw	r3,4(r16)
 8008b18:	18c00054 	ori	r3,r3,1
 8008b1c:	80c00115 	stw	r3,4(r16)
 8008b20:	9009883a 	mov	r4,r18
 8008b24:	800e8000 	call	800e800 <__malloc_unlock>
 8008b28:	8805883a 	mov	r2,r17
 8008b2c:	dfc00917 	ldw	ra,36(sp)
 8008b30:	df000817 	ldw	fp,32(sp)
 8008b34:	ddc00717 	ldw	r23,28(sp)
 8008b38:	dd800617 	ldw	r22,24(sp)
 8008b3c:	dd400517 	ldw	r21,20(sp)
 8008b40:	dd000417 	ldw	r20,16(sp)
 8008b44:	dcc00317 	ldw	r19,12(sp)
 8008b48:	dc800217 	ldw	r18,8(sp)
 8008b4c:	dc400117 	ldw	r17,4(sp)
 8008b50:	dc000017 	ldw	r16,0(sp)
 8008b54:	dec00a04 	addi	sp,sp,40
 8008b58:	f800283a 	ret
 8008b5c:	18c0004c 	andi	r3,r3,1
 8008b60:	1800391e 	bne	r3,zero,8008c48 <_realloc_r+0x2b8>
 8008b64:	9dfffe17 	ldw	r23,-8(r19)
 8008b68:	00bfff04 	movi	r2,-4
 8008b6c:	adefc83a 	sub	r23,r21,r23
 8008b70:	b9400117 	ldw	r5,4(r23)
 8008b74:	288a703a 	and	r5,r5,r2
 8008b78:	2c2d883a 	add	r22,r5,r16
 8008b7c:	b1c03216 	blt	r22,r7,8008c48 <_realloc_r+0x2b8>
 8008b80:	b8800317 	ldw	r2,12(r23)
 8008b84:	b8c00217 	ldw	r3,8(r23)
 8008b88:	81bfff04 	addi	r6,r16,-4
 8008b8c:	01000904 	movi	r4,36
 8008b90:	18800315 	stw	r2,12(r3)
 8008b94:	10c00215 	stw	r3,8(r2)
 8008b98:	bc400204 	addi	r17,r23,8
 8008b9c:	2180ac36 	bltu	r4,r6,8008e50 <_realloc_r+0x4c0>
 8008ba0:	008004c4 	movi	r2,19
 8008ba4:	1180972e 	bgeu	r2,r6,8008e04 <_realloc_r+0x474>
 8008ba8:	98800017 	ldw	r2,0(r19)
 8008bac:	b8800215 	stw	r2,8(r23)
 8008bb0:	98800117 	ldw	r2,4(r19)
 8008bb4:	b8800315 	stw	r2,12(r23)
 8008bb8:	008006c4 	movi	r2,27
 8008bbc:	1180b92e 	bgeu	r2,r6,8008ea4 <_realloc_r+0x514>
 8008bc0:	98800217 	ldw	r2,8(r19)
 8008bc4:	b8800415 	stw	r2,16(r23)
 8008bc8:	98800317 	ldw	r2,12(r19)
 8008bcc:	b8800515 	stw	r2,20(r23)
 8008bd0:	313fbe26 	beq	r6,r4,8008acc <__alt_data_end+0xfc008acc>
 8008bd4:	b8c00604 	addi	r3,r23,24
 8008bd8:	9cc00404 	addi	r19,r19,16
 8008bdc:	98800017 	ldw	r2,0(r19)
 8008be0:	b021883a 	mov	r16,r22
 8008be4:	b82b883a 	mov	r21,r23
 8008be8:	18800015 	stw	r2,0(r3)
 8008bec:	98800117 	ldw	r2,4(r19)
 8008bf0:	18800115 	stw	r2,4(r3)
 8008bf4:	98800217 	ldw	r2,8(r19)
 8008bf8:	18800215 	stw	r2,8(r3)
 8008bfc:	b8c00117 	ldw	r3,4(r23)
 8008c00:	003fbd06 	br	8008af8 <__alt_data_end+0xfc008af8>
 8008c04:	00800304 	movi	r2,12
 8008c08:	90800015 	stw	r2,0(r18)
 8008c0c:	0005883a 	mov	r2,zero
 8008c10:	003fc606 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8008c14:	1d06b03a 	or	r3,r3,r20
 8008c18:	ad0b883a 	add	r5,r21,r20
 8008c1c:	a8c00115 	stw	r3,4(r21)
 8008c20:	38800054 	ori	r2,r7,1
 8008c24:	28800115 	stw	r2,4(r5)
 8008c28:	29cf883a 	add	r7,r5,r7
 8008c2c:	38800117 	ldw	r2,4(r7)
 8008c30:	9009883a 	mov	r4,r18
 8008c34:	29400204 	addi	r5,r5,8
 8008c38:	10800054 	ori	r2,r2,1
 8008c3c:	38800115 	stw	r2,4(r7)
 8008c40:	80062200 	call	8006220 <_free_r>
 8008c44:	003fb606 	br	8008b20 <__alt_data_end+0xfc008b20>
 8008c48:	880b883a 	mov	r5,r17
 8008c4c:	9009883a 	mov	r4,r18
 8008c50:	8006dbc0 	call	8006dbc <_malloc_r>
 8008c54:	1023883a 	mov	r17,r2
 8008c58:	1000aa26 	beq	r2,zero,8008f04 <_realloc_r+0x574>
 8008c5c:	98ffff17 	ldw	r3,-4(r19)
 8008c60:	113ffe04 	addi	r4,r2,-8
 8008c64:	00bfff84 	movi	r2,-2
 8008c68:	1884703a 	and	r2,r3,r2
 8008c6c:	a885883a 	add	r2,r21,r2
 8008c70:	20808626 	beq	r4,r2,8008e8c <_realloc_r+0x4fc>
 8008c74:	81bfff04 	addi	r6,r16,-4
 8008c78:	00800904 	movi	r2,36
 8008c7c:	11807036 	bltu	r2,r6,8008e40 <_realloc_r+0x4b0>
 8008c80:	00c004c4 	movi	r3,19
 8008c84:	19805636 	bltu	r3,r6,8008de0 <_realloc_r+0x450>
 8008c88:	8805883a 	mov	r2,r17
 8008c8c:	9807883a 	mov	r3,r19
 8008c90:	19000017 	ldw	r4,0(r3)
 8008c94:	11000015 	stw	r4,0(r2)
 8008c98:	19000117 	ldw	r4,4(r3)
 8008c9c:	11000115 	stw	r4,4(r2)
 8008ca0:	18c00217 	ldw	r3,8(r3)
 8008ca4:	10c00215 	stw	r3,8(r2)
 8008ca8:	980b883a 	mov	r5,r19
 8008cac:	9009883a 	mov	r4,r18
 8008cb0:	80062200 	call	8006220 <_free_r>
 8008cb4:	9009883a 	mov	r4,r18
 8008cb8:	800e8000 	call	800e800 <__malloc_unlock>
 8008cbc:	8805883a 	mov	r2,r17
 8008cc0:	003f9a06 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8008cc4:	300b883a 	mov	r5,r6
 8008cc8:	dfc00917 	ldw	ra,36(sp)
 8008ccc:	df000817 	ldw	fp,32(sp)
 8008cd0:	ddc00717 	ldw	r23,28(sp)
 8008cd4:	dd800617 	ldw	r22,24(sp)
 8008cd8:	dd400517 	ldw	r21,20(sp)
 8008cdc:	dd000417 	ldw	r20,16(sp)
 8008ce0:	dcc00317 	ldw	r19,12(sp)
 8008ce4:	dc800217 	ldw	r18,8(sp)
 8008ce8:	dc400117 	ldw	r17,4(sp)
 8008cec:	dc000017 	ldw	r16,0(sp)
 8008cf0:	dec00a04 	addi	sp,sp,40
 8008cf4:	8006dbc1 	jmpi	8006dbc <_malloc_r>
 8008cf8:	11400317 	ldw	r5,12(r2)
 8008cfc:	10800217 	ldw	r2,8(r2)
 8008d00:	9823883a 	mov	r17,r19
 8008d04:	2021883a 	mov	r16,r4
 8008d08:	11400315 	stw	r5,12(r2)
 8008d0c:	28800215 	stw	r2,8(r5)
 8008d10:	003f7906 	br	8008af8 <__alt_data_end+0xfc008af8>
 8008d14:	21000117 	ldw	r4,4(r4)
 8008d18:	00bfff04 	movi	r2,-4
 8008d1c:	a1800404 	addi	r6,r20,16
 8008d20:	2088703a 	and	r4,r4,r2
 8008d24:	2409883a 	add	r4,r4,r16
 8008d28:	2180380e 	bge	r4,r6,8008e0c <_realloc_r+0x47c>
 8008d2c:	18c0004c 	andi	r3,r3,1
 8008d30:	183fc51e 	bne	r3,zero,8008c48 <__alt_data_end+0xfc008c48>
 8008d34:	9dfffe17 	ldw	r23,-8(r19)
 8008d38:	adefc83a 	sub	r23,r21,r23
 8008d3c:	b9400117 	ldw	r5,4(r23)
 8008d40:	288a703a 	and	r5,r5,r2
 8008d44:	216d883a 	add	r22,r4,r5
 8008d48:	b1bf8b16 	blt	r22,r6,8008b78 <__alt_data_end+0xfc008b78>
 8008d4c:	b8800317 	ldw	r2,12(r23)
 8008d50:	b8c00217 	ldw	r3,8(r23)
 8008d54:	81bfff04 	addi	r6,r16,-4
 8008d58:	01000904 	movi	r4,36
 8008d5c:	18800315 	stw	r2,12(r3)
 8008d60:	10c00215 	stw	r3,8(r2)
 8008d64:	bc400204 	addi	r17,r23,8
 8008d68:	21805a36 	bltu	r4,r6,8008ed4 <_realloc_r+0x544>
 8008d6c:	008004c4 	movi	r2,19
 8008d70:	1180562e 	bgeu	r2,r6,8008ecc <_realloc_r+0x53c>
 8008d74:	98800017 	ldw	r2,0(r19)
 8008d78:	b8800215 	stw	r2,8(r23)
 8008d7c:	98800117 	ldw	r2,4(r19)
 8008d80:	b8800315 	stw	r2,12(r23)
 8008d84:	008006c4 	movi	r2,27
 8008d88:	11805636 	bltu	r2,r6,8008ee4 <_realloc_r+0x554>
 8008d8c:	b8800404 	addi	r2,r23,16
 8008d90:	9cc00204 	addi	r19,r19,8
 8008d94:	98c00017 	ldw	r3,0(r19)
 8008d98:	10c00015 	stw	r3,0(r2)
 8008d9c:	98c00117 	ldw	r3,4(r19)
 8008da0:	10c00115 	stw	r3,4(r2)
 8008da4:	98c00217 	ldw	r3,8(r19)
 8008da8:	10c00215 	stw	r3,8(r2)
 8008dac:	bd07883a 	add	r3,r23,r20
 8008db0:	b505c83a 	sub	r2,r22,r20
 8008db4:	e0c00215 	stw	r3,8(fp)
 8008db8:	10800054 	ori	r2,r2,1
 8008dbc:	18800115 	stw	r2,4(r3)
 8008dc0:	b8800117 	ldw	r2,4(r23)
 8008dc4:	9009883a 	mov	r4,r18
 8008dc8:	1080004c 	andi	r2,r2,1
 8008dcc:	a0a8b03a 	or	r20,r20,r2
 8008dd0:	bd000115 	stw	r20,4(r23)
 8008dd4:	800e8000 	call	800e800 <__malloc_unlock>
 8008dd8:	8805883a 	mov	r2,r17
 8008ddc:	003f5306 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8008de0:	98c00017 	ldw	r3,0(r19)
 8008de4:	88c00015 	stw	r3,0(r17)
 8008de8:	98c00117 	ldw	r3,4(r19)
 8008dec:	88c00115 	stw	r3,4(r17)
 8008df0:	00c006c4 	movi	r3,27
 8008df4:	19801d36 	bltu	r3,r6,8008e6c <_realloc_r+0x4dc>
 8008df8:	88800204 	addi	r2,r17,8
 8008dfc:	98c00204 	addi	r3,r19,8
 8008e00:	003fa306 	br	8008c90 <__alt_data_end+0xfc008c90>
 8008e04:	8807883a 	mov	r3,r17
 8008e08:	003f7406 	br	8008bdc <__alt_data_end+0xfc008bdc>
 8008e0c:	ad2b883a 	add	r21,r21,r20
 8008e10:	2505c83a 	sub	r2,r4,r20
 8008e14:	e5400215 	stw	r21,8(fp)
 8008e18:	10800054 	ori	r2,r2,1
 8008e1c:	a8800115 	stw	r2,4(r21)
 8008e20:	98bfff17 	ldw	r2,-4(r19)
 8008e24:	9009883a 	mov	r4,r18
 8008e28:	1080004c 	andi	r2,r2,1
 8008e2c:	a0a8b03a 	or	r20,r20,r2
 8008e30:	9d3fff15 	stw	r20,-4(r19)
 8008e34:	800e8000 	call	800e800 <__malloc_unlock>
 8008e38:	9805883a 	mov	r2,r19
 8008e3c:	003f3b06 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8008e40:	8809883a 	mov	r4,r17
 8008e44:	980b883a 	mov	r5,r19
 8008e48:	80077840 	call	8007784 <memmove>
 8008e4c:	003f9606 	br	8008ca8 <__alt_data_end+0xfc008ca8>
 8008e50:	8809883a 	mov	r4,r17
 8008e54:	980b883a 	mov	r5,r19
 8008e58:	80077840 	call	8007784 <memmove>
 8008e5c:	b8c00117 	ldw	r3,4(r23)
 8008e60:	b021883a 	mov	r16,r22
 8008e64:	b82b883a 	mov	r21,r23
 8008e68:	003f2306 	br	8008af8 <__alt_data_end+0xfc008af8>
 8008e6c:	98c00217 	ldw	r3,8(r19)
 8008e70:	88c00215 	stw	r3,8(r17)
 8008e74:	98c00317 	ldw	r3,12(r19)
 8008e78:	88c00315 	stw	r3,12(r17)
 8008e7c:	30800c26 	beq	r6,r2,8008eb0 <_realloc_r+0x520>
 8008e80:	88800404 	addi	r2,r17,16
 8008e84:	98c00404 	addi	r3,r19,16
 8008e88:	003f8106 	br	8008c90 <__alt_data_end+0xfc008c90>
 8008e8c:	893fff17 	ldw	r4,-4(r17)
 8008e90:	00bfff04 	movi	r2,-4
 8008e94:	9823883a 	mov	r17,r19
 8008e98:	2084703a 	and	r2,r4,r2
 8008e9c:	80a1883a 	add	r16,r16,r2
 8008ea0:	003f1506 	br	8008af8 <__alt_data_end+0xfc008af8>
 8008ea4:	b8c00404 	addi	r3,r23,16
 8008ea8:	9cc00204 	addi	r19,r19,8
 8008eac:	003f4b06 	br	8008bdc <__alt_data_end+0xfc008bdc>
 8008eb0:	99000417 	ldw	r4,16(r19)
 8008eb4:	88800604 	addi	r2,r17,24
 8008eb8:	98c00604 	addi	r3,r19,24
 8008ebc:	89000415 	stw	r4,16(r17)
 8008ec0:	99000517 	ldw	r4,20(r19)
 8008ec4:	89000515 	stw	r4,20(r17)
 8008ec8:	003f7106 	br	8008c90 <__alt_data_end+0xfc008c90>
 8008ecc:	8805883a 	mov	r2,r17
 8008ed0:	003fb006 	br	8008d94 <__alt_data_end+0xfc008d94>
 8008ed4:	8809883a 	mov	r4,r17
 8008ed8:	980b883a 	mov	r5,r19
 8008edc:	80077840 	call	8007784 <memmove>
 8008ee0:	003fb206 	br	8008dac <__alt_data_end+0xfc008dac>
 8008ee4:	98800217 	ldw	r2,8(r19)
 8008ee8:	b8800415 	stw	r2,16(r23)
 8008eec:	98800317 	ldw	r2,12(r19)
 8008ef0:	b8800515 	stw	r2,20(r23)
 8008ef4:	31000726 	beq	r6,r4,8008f14 <_realloc_r+0x584>
 8008ef8:	b8800604 	addi	r2,r23,24
 8008efc:	9cc00404 	addi	r19,r19,16
 8008f00:	003fa406 	br	8008d94 <__alt_data_end+0xfc008d94>
 8008f04:	9009883a 	mov	r4,r18
 8008f08:	800e8000 	call	800e800 <__malloc_unlock>
 8008f0c:	0005883a 	mov	r2,zero
 8008f10:	003f0606 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8008f14:	98c00417 	ldw	r3,16(r19)
 8008f18:	9cc00604 	addi	r19,r19,24
 8008f1c:	b8800804 	addi	r2,r23,32
 8008f20:	b8c00615 	stw	r3,24(r23)
 8008f24:	98ffff17 	ldw	r3,-4(r19)
 8008f28:	b8c00715 	stw	r3,28(r23)
 8008f2c:	003f9906 	br	8008d94 <__alt_data_end+0xfc008d94>

08008f30 <__fpclassifyd>:
 8008f30:	00a00034 	movhi	r2,32768
 8008f34:	10bfffc4 	addi	r2,r2,-1
 8008f38:	2884703a 	and	r2,r5,r2
 8008f3c:	10000726 	beq	r2,zero,8008f5c <__fpclassifyd+0x2c>
 8008f40:	00fffc34 	movhi	r3,65520
 8008f44:	019ff834 	movhi	r6,32736
 8008f48:	28c7883a 	add	r3,r5,r3
 8008f4c:	31bfffc4 	addi	r6,r6,-1
 8008f50:	30c00536 	bltu	r6,r3,8008f68 <__fpclassifyd+0x38>
 8008f54:	00800104 	movi	r2,4
 8008f58:	f800283a 	ret
 8008f5c:	2000021e 	bne	r4,zero,8008f68 <__fpclassifyd+0x38>
 8008f60:	00800084 	movi	r2,2
 8008f64:	f800283a 	ret
 8008f68:	00dffc34 	movhi	r3,32752
 8008f6c:	019ff834 	movhi	r6,32736
 8008f70:	28cb883a 	add	r5,r5,r3
 8008f74:	31bfffc4 	addi	r6,r6,-1
 8008f78:	317ff62e 	bgeu	r6,r5,8008f54 <__alt_data_end+0xfc008f54>
 8008f7c:	01400434 	movhi	r5,16
 8008f80:	297fffc4 	addi	r5,r5,-1
 8008f84:	28800236 	bltu	r5,r2,8008f90 <__fpclassifyd+0x60>
 8008f88:	008000c4 	movi	r2,3
 8008f8c:	f800283a 	ret
 8008f90:	10c00226 	beq	r2,r3,8008f9c <__fpclassifyd+0x6c>
 8008f94:	0005883a 	mov	r2,zero
 8008f98:	f800283a 	ret
 8008f9c:	2005003a 	cmpeq	r2,r4,zero
 8008fa0:	f800283a 	ret

08008fa4 <_sbrk_r>:
 8008fa4:	defffd04 	addi	sp,sp,-12
 8008fa8:	dc000015 	stw	r16,0(sp)
 8008fac:	040200b4 	movhi	r16,2050
 8008fb0:	dc400115 	stw	r17,4(sp)
 8008fb4:	843c7f04 	addi	r16,r16,-3588
 8008fb8:	2023883a 	mov	r17,r4
 8008fbc:	2809883a 	mov	r4,r5
 8008fc0:	dfc00215 	stw	ra,8(sp)
 8008fc4:	80000015 	stw	zero,0(r16)
 8008fc8:	800e9cc0 	call	800e9cc <sbrk>
 8008fcc:	00ffffc4 	movi	r3,-1
 8008fd0:	10c00526 	beq	r2,r3,8008fe8 <_sbrk_r+0x44>
 8008fd4:	dfc00217 	ldw	ra,8(sp)
 8008fd8:	dc400117 	ldw	r17,4(sp)
 8008fdc:	dc000017 	ldw	r16,0(sp)
 8008fe0:	dec00304 	addi	sp,sp,12
 8008fe4:	f800283a 	ret
 8008fe8:	80c00017 	ldw	r3,0(r16)
 8008fec:	183ff926 	beq	r3,zero,8008fd4 <__alt_data_end+0xfc008fd4>
 8008ff0:	88c00015 	stw	r3,0(r17)
 8008ff4:	003ff706 	br	8008fd4 <__alt_data_end+0xfc008fd4>

08008ff8 <__sread>:
 8008ff8:	defffe04 	addi	sp,sp,-8
 8008ffc:	dc000015 	stw	r16,0(sp)
 8009000:	2821883a 	mov	r16,r5
 8009004:	2940038f 	ldh	r5,14(r5)
 8009008:	dfc00115 	stw	ra,4(sp)
 800900c:	800abd80 	call	800abd8 <_read_r>
 8009010:	10000716 	blt	r2,zero,8009030 <__sread+0x38>
 8009014:	80c01417 	ldw	r3,80(r16)
 8009018:	1887883a 	add	r3,r3,r2
 800901c:	80c01415 	stw	r3,80(r16)
 8009020:	dfc00117 	ldw	ra,4(sp)
 8009024:	dc000017 	ldw	r16,0(sp)
 8009028:	dec00204 	addi	sp,sp,8
 800902c:	f800283a 	ret
 8009030:	80c0030b 	ldhu	r3,12(r16)
 8009034:	18fbffcc 	andi	r3,r3,61439
 8009038:	80c0030d 	sth	r3,12(r16)
 800903c:	dfc00117 	ldw	ra,4(sp)
 8009040:	dc000017 	ldw	r16,0(sp)
 8009044:	dec00204 	addi	sp,sp,8
 8009048:	f800283a 	ret

0800904c <__seofread>:
 800904c:	0005883a 	mov	r2,zero
 8009050:	f800283a 	ret

08009054 <__swrite>:
 8009054:	2880030b 	ldhu	r2,12(r5)
 8009058:	defffb04 	addi	sp,sp,-20
 800905c:	dcc00315 	stw	r19,12(sp)
 8009060:	dc800215 	stw	r18,8(sp)
 8009064:	dc400115 	stw	r17,4(sp)
 8009068:	dc000015 	stw	r16,0(sp)
 800906c:	dfc00415 	stw	ra,16(sp)
 8009070:	10c0400c 	andi	r3,r2,256
 8009074:	2821883a 	mov	r16,r5
 8009078:	2027883a 	mov	r19,r4
 800907c:	3025883a 	mov	r18,r6
 8009080:	3823883a 	mov	r17,r7
 8009084:	18000526 	beq	r3,zero,800909c <__swrite+0x48>
 8009088:	2940038f 	ldh	r5,14(r5)
 800908c:	000d883a 	mov	r6,zero
 8009090:	01c00084 	movi	r7,2
 8009094:	800ab7c0 	call	800ab7c <_lseek_r>
 8009098:	8080030b 	ldhu	r2,12(r16)
 800909c:	8140038f 	ldh	r5,14(r16)
 80090a0:	10bbffcc 	andi	r2,r2,61439
 80090a4:	9809883a 	mov	r4,r19
 80090a8:	900d883a 	mov	r6,r18
 80090ac:	880f883a 	mov	r7,r17
 80090b0:	8080030d 	sth	r2,12(r16)
 80090b4:	dfc00417 	ldw	ra,16(sp)
 80090b8:	dcc00317 	ldw	r19,12(sp)
 80090bc:	dc800217 	ldw	r18,8(sp)
 80090c0:	dc400117 	ldw	r17,4(sp)
 80090c4:	dc000017 	ldw	r16,0(sp)
 80090c8:	dec00504 	addi	sp,sp,20
 80090cc:	800a66c1 	jmpi	800a66c <_write_r>

080090d0 <__sseek>:
 80090d0:	defffe04 	addi	sp,sp,-8
 80090d4:	dc000015 	stw	r16,0(sp)
 80090d8:	2821883a 	mov	r16,r5
 80090dc:	2940038f 	ldh	r5,14(r5)
 80090e0:	dfc00115 	stw	ra,4(sp)
 80090e4:	800ab7c0 	call	800ab7c <_lseek_r>
 80090e8:	00ffffc4 	movi	r3,-1
 80090ec:	10c00826 	beq	r2,r3,8009110 <__sseek+0x40>
 80090f0:	80c0030b 	ldhu	r3,12(r16)
 80090f4:	80801415 	stw	r2,80(r16)
 80090f8:	18c40014 	ori	r3,r3,4096
 80090fc:	80c0030d 	sth	r3,12(r16)
 8009100:	dfc00117 	ldw	ra,4(sp)
 8009104:	dc000017 	ldw	r16,0(sp)
 8009108:	dec00204 	addi	sp,sp,8
 800910c:	f800283a 	ret
 8009110:	80c0030b 	ldhu	r3,12(r16)
 8009114:	18fbffcc 	andi	r3,r3,61439
 8009118:	80c0030d 	sth	r3,12(r16)
 800911c:	dfc00117 	ldw	ra,4(sp)
 8009120:	dc000017 	ldw	r16,0(sp)
 8009124:	dec00204 	addi	sp,sp,8
 8009128:	f800283a 	ret

0800912c <__sclose>:
 800912c:	2940038f 	ldh	r5,14(r5)
 8009130:	800a6c81 	jmpi	800a6c8 <_close_r>

08009134 <strcmp>:
 8009134:	2144b03a 	or	r2,r4,r5
 8009138:	108000cc 	andi	r2,r2,3
 800913c:	1000171e 	bne	r2,zero,800919c <strcmp+0x68>
 8009140:	20800017 	ldw	r2,0(r4)
 8009144:	28c00017 	ldw	r3,0(r5)
 8009148:	10c0141e 	bne	r2,r3,800919c <strcmp+0x68>
 800914c:	027fbff4 	movhi	r9,65279
 8009150:	4a7fbfc4 	addi	r9,r9,-257
 8009154:	0086303a 	nor	r3,zero,r2
 8009158:	02202074 	movhi	r8,32897
 800915c:	1245883a 	add	r2,r2,r9
 8009160:	42202004 	addi	r8,r8,-32640
 8009164:	10c4703a 	and	r2,r2,r3
 8009168:	1204703a 	and	r2,r2,r8
 800916c:	10000226 	beq	r2,zero,8009178 <strcmp+0x44>
 8009170:	00001706 	br	80091d0 <strcmp+0x9c>
 8009174:	1000161e 	bne	r2,zero,80091d0 <strcmp+0x9c>
 8009178:	21000104 	addi	r4,r4,4
 800917c:	20c00017 	ldw	r3,0(r4)
 8009180:	29400104 	addi	r5,r5,4
 8009184:	29800017 	ldw	r6,0(r5)
 8009188:	1a4f883a 	add	r7,r3,r9
 800918c:	00c4303a 	nor	r2,zero,r3
 8009190:	3884703a 	and	r2,r7,r2
 8009194:	1204703a 	and	r2,r2,r8
 8009198:	19bff626 	beq	r3,r6,8009174 <__alt_data_end+0xfc009174>
 800919c:	20800007 	ldb	r2,0(r4)
 80091a0:	1000051e 	bne	r2,zero,80091b8 <strcmp+0x84>
 80091a4:	00000606 	br	80091c0 <strcmp+0x8c>
 80091a8:	21000044 	addi	r4,r4,1
 80091ac:	20800007 	ldb	r2,0(r4)
 80091b0:	29400044 	addi	r5,r5,1
 80091b4:	10000226 	beq	r2,zero,80091c0 <strcmp+0x8c>
 80091b8:	28c00007 	ldb	r3,0(r5)
 80091bc:	10fffa26 	beq	r2,r3,80091a8 <__alt_data_end+0xfc0091a8>
 80091c0:	20800003 	ldbu	r2,0(r4)
 80091c4:	28c00003 	ldbu	r3,0(r5)
 80091c8:	10c5c83a 	sub	r2,r2,r3
 80091cc:	f800283a 	ret
 80091d0:	0005883a 	mov	r2,zero
 80091d4:	f800283a 	ret

080091d8 <__sprint_r.part.0>:
 80091d8:	28801917 	ldw	r2,100(r5)
 80091dc:	defff604 	addi	sp,sp,-40
 80091e0:	dd400515 	stw	r21,20(sp)
 80091e4:	dcc00315 	stw	r19,12(sp)
 80091e8:	dfc00915 	stw	ra,36(sp)
 80091ec:	df000815 	stw	fp,32(sp)
 80091f0:	ddc00715 	stw	r23,28(sp)
 80091f4:	dd800615 	stw	r22,24(sp)
 80091f8:	dd000415 	stw	r20,16(sp)
 80091fc:	dc800215 	stw	r18,8(sp)
 8009200:	dc400115 	stw	r17,4(sp)
 8009204:	dc000015 	stw	r16,0(sp)
 8009208:	1088000c 	andi	r2,r2,8192
 800920c:	2827883a 	mov	r19,r5
 8009210:	302b883a 	mov	r21,r6
 8009214:	10002d26 	beq	r2,zero,80092cc <__sprint_r.part.0+0xf4>
 8009218:	30800217 	ldw	r2,8(r6)
 800921c:	35800017 	ldw	r22,0(r6)
 8009220:	10002826 	beq	r2,zero,80092c4 <__sprint_r.part.0+0xec>
 8009224:	2029883a 	mov	r20,r4
 8009228:	b5c00104 	addi	r23,r22,4
 800922c:	04bfffc4 	movi	r18,-1
 8009230:	bc400017 	ldw	r17,0(r23)
 8009234:	b4000017 	ldw	r16,0(r22)
 8009238:	0039883a 	mov	fp,zero
 800923c:	8822d0ba 	srli	r17,r17,2
 8009240:	04400316 	blt	zero,r17,8009250 <__sprint_r.part.0+0x78>
 8009244:	00001706 	br	80092a4 <__sprint_r.part.0+0xcc>
 8009248:	84000104 	addi	r16,r16,4
 800924c:	8f001526 	beq	r17,fp,80092a4 <__sprint_r.part.0+0xcc>
 8009250:	81400017 	ldw	r5,0(r16)
 8009254:	a009883a 	mov	r4,r20
 8009258:	980d883a 	mov	r6,r19
 800925c:	800a8f40 	call	800a8f4 <_fputwc_r>
 8009260:	e7000044 	addi	fp,fp,1
 8009264:	14bff81e 	bne	r2,r18,8009248 <__alt_data_end+0xfc009248>
 8009268:	9005883a 	mov	r2,r18
 800926c:	a8000215 	stw	zero,8(r21)
 8009270:	a8000115 	stw	zero,4(r21)
 8009274:	dfc00917 	ldw	ra,36(sp)
 8009278:	df000817 	ldw	fp,32(sp)
 800927c:	ddc00717 	ldw	r23,28(sp)
 8009280:	dd800617 	ldw	r22,24(sp)
 8009284:	dd400517 	ldw	r21,20(sp)
 8009288:	dd000417 	ldw	r20,16(sp)
 800928c:	dcc00317 	ldw	r19,12(sp)
 8009290:	dc800217 	ldw	r18,8(sp)
 8009294:	dc400117 	ldw	r17,4(sp)
 8009298:	dc000017 	ldw	r16,0(sp)
 800929c:	dec00a04 	addi	sp,sp,40
 80092a0:	f800283a 	ret
 80092a4:	a8c00217 	ldw	r3,8(r21)
 80092a8:	8c63883a 	add	r17,r17,r17
 80092ac:	8c63883a 	add	r17,r17,r17
 80092b0:	1c45c83a 	sub	r2,r3,r17
 80092b4:	a8800215 	stw	r2,8(r21)
 80092b8:	b5800204 	addi	r22,r22,8
 80092bc:	bdc00204 	addi	r23,r23,8
 80092c0:	103fdb1e 	bne	r2,zero,8009230 <__alt_data_end+0xfc009230>
 80092c4:	0005883a 	mov	r2,zero
 80092c8:	003fe806 	br	800926c <__alt_data_end+0xfc00926c>
 80092cc:	80065100 	call	8006510 <__sfvwrite_r>
 80092d0:	003fe606 	br	800926c <__alt_data_end+0xfc00926c>

080092d4 <__sprint_r>:
 80092d4:	30c00217 	ldw	r3,8(r6)
 80092d8:	18000126 	beq	r3,zero,80092e0 <__sprint_r+0xc>
 80092dc:	80091d81 	jmpi	80091d8 <__sprint_r.part.0>
 80092e0:	30000115 	stw	zero,4(r6)
 80092e4:	0005883a 	mov	r2,zero
 80092e8:	f800283a 	ret

080092ec <___vfiprintf_internal_r>:
 80092ec:	defeca04 	addi	sp,sp,-1240
 80092f0:	dd813215 	stw	r22,1224(sp)
 80092f4:	dd013015 	stw	r20,1216(sp)
 80092f8:	dfc13515 	stw	ra,1236(sp)
 80092fc:	df013415 	stw	fp,1232(sp)
 8009300:	ddc13315 	stw	r23,1228(sp)
 8009304:	dd413115 	stw	r21,1220(sp)
 8009308:	dcc12f15 	stw	r19,1212(sp)
 800930c:	dc812e15 	stw	r18,1208(sp)
 8009310:	dc412d15 	stw	r17,1204(sp)
 8009314:	dc012c15 	stw	r16,1200(sp)
 8009318:	d9012015 	stw	r4,1152(sp)
 800931c:	d9c12115 	stw	r7,1156(sp)
 8009320:	2829883a 	mov	r20,r5
 8009324:	302d883a 	mov	r22,r6
 8009328:	20000226 	beq	r4,zero,8009334 <___vfiprintf_internal_r+0x48>
 800932c:	20800e17 	ldw	r2,56(r4)
 8009330:	1001d326 	beq	r2,zero,8009a80 <___vfiprintf_internal_r+0x794>
 8009334:	a0c0030b 	ldhu	r3,12(r20)
 8009338:	1908000c 	andi	r4,r3,8192
 800933c:	1805883a 	mov	r2,r3
 8009340:	2000071e 	bne	r4,zero,8009360 <___vfiprintf_internal_r+0x74>
 8009344:	a1001917 	ldw	r4,100(r20)
 8009348:	18880014 	ori	r2,r3,8192
 800934c:	00f7ffc4 	movi	r3,-8193
 8009350:	20c8703a 	and	r4,r4,r3
 8009354:	a080030d 	sth	r2,12(r20)
 8009358:	1007883a 	mov	r3,r2
 800935c:	a1001915 	stw	r4,100(r20)
 8009360:	1100020c 	andi	r4,r2,8
 8009364:	20018926 	beq	r4,zero,800998c <___vfiprintf_internal_r+0x6a0>
 8009368:	a1000417 	ldw	r4,16(r20)
 800936c:	20018726 	beq	r4,zero,800998c <___vfiprintf_internal_r+0x6a0>
 8009370:	1080068c 	andi	r2,r2,26
 8009374:	01000284 	movi	r4,10
 8009378:	11018d26 	beq	r2,r4,80099b0 <___vfiprintf_internal_r+0x6c4>
 800937c:	da810a04 	addi	r10,sp,1064
 8009380:	dac109c4 	addi	r11,sp,1063
 8009384:	070200b4 	movhi	fp,2050
 8009388:	05c200b4 	movhi	r23,2050
 800938c:	da811e15 	stw	r10,1144(sp)
 8009390:	52d5c83a 	sub	r10,r10,r11
 8009394:	e72e9004 	addi	fp,fp,-17856
 8009398:	bdee8c04 	addi	r23,r23,-17872
 800939c:	dac11f15 	stw	r11,1148(sp)
 80093a0:	dec11a15 	stw	sp,1128(sp)
 80093a4:	d8011c15 	stw	zero,1136(sp)
 80093a8:	d8011b15 	stw	zero,1132(sp)
 80093ac:	d8012615 	stw	zero,1176(sp)
 80093b0:	d8012215 	stw	zero,1160(sp)
 80093b4:	da812715 	stw	r10,1180(sp)
 80093b8:	d811883a 	mov	r8,sp
 80093bc:	b021883a 	mov	r16,r22
 80093c0:	80800007 	ldb	r2,0(r16)
 80093c4:	10039c26 	beq	r2,zero,800a238 <___vfiprintf_internal_r+0xf4c>
 80093c8:	01000944 	movi	r4,37
 80093cc:	11039a26 	beq	r2,r4,800a238 <___vfiprintf_internal_r+0xf4c>
 80093d0:	8005883a 	mov	r2,r16
 80093d4:	00000106 	br	80093dc <___vfiprintf_internal_r+0xf0>
 80093d8:	19000326 	beq	r3,r4,80093e8 <___vfiprintf_internal_r+0xfc>
 80093dc:	10800044 	addi	r2,r2,1
 80093e0:	10c00007 	ldb	r3,0(r2)
 80093e4:	183ffc1e 	bne	r3,zero,80093d8 <__alt_data_end+0xfc0093d8>
 80093e8:	1425c83a 	sub	r18,r2,r16
 80093ec:	1023883a 	mov	r17,r2
 80093f0:	90001026 	beq	r18,zero,8009434 <___vfiprintf_internal_r+0x148>
 80093f4:	d8c11c17 	ldw	r3,1136(sp)
 80093f8:	d8811b17 	ldw	r2,1132(sp)
 80093fc:	44000015 	stw	r16,0(r8)
 8009400:	90c7883a 	add	r3,r18,r3
 8009404:	10800044 	addi	r2,r2,1
 8009408:	44800115 	stw	r18,4(r8)
 800940c:	d8c11c15 	stw	r3,1136(sp)
 8009410:	d8811b15 	stw	r2,1132(sp)
 8009414:	010001c4 	movi	r4,7
 8009418:	2080750e 	bge	r4,r2,80095f0 <___vfiprintf_internal_r+0x304>
 800941c:	18039d1e 	bne	r3,zero,800a294 <___vfiprintf_internal_r+0xfa8>
 8009420:	dac12217 	ldw	r11,1160(sp)
 8009424:	d8011b15 	stw	zero,1132(sp)
 8009428:	d811883a 	mov	r8,sp
 800942c:	5c97883a 	add	r11,r11,r18
 8009430:	dac12215 	stw	r11,1160(sp)
 8009434:	88800007 	ldb	r2,0(r17)
 8009438:	1002e026 	beq	r2,zero,8009fbc <___vfiprintf_internal_r+0xcd0>
 800943c:	88c00047 	ldb	r3,1(r17)
 8009440:	8c000044 	addi	r16,r17,1
 8009444:	d8011d85 	stb	zero,1142(sp)
 8009448:	000d883a 	mov	r6,zero
 800944c:	027fffc4 	movi	r9,-1
 8009450:	0027883a 	mov	r19,zero
 8009454:	002b883a 	mov	r21,zero
 8009458:	01001604 	movi	r4,88
 800945c:	01400244 	movi	r5,9
 8009460:	03000a84 	movi	r12,42
 8009464:	01c01b04 	movi	r7,108
 8009468:	84000044 	addi	r16,r16,1
 800946c:	18bff804 	addi	r2,r3,-32
 8009470:	20825f36 	bltu	r4,r2,8009df0 <___vfiprintf_internal_r+0xb04>
 8009474:	100490ba 	slli	r2,r2,2
 8009478:	02820074 	movhi	r10,2049
 800947c:	52a52304 	addi	r10,r10,-27508
 8009480:	1285883a 	add	r2,r2,r10
 8009484:	10800017 	ldw	r2,0(r2)
 8009488:	1000683a 	jmp	r2
 800948c:	08009c60 	cmpeqi	zero,at,625
 8009490:	08009df0 	cmpltui	zero,at,631
 8009494:	08009df0 	cmpltui	zero,at,631
 8009498:	08009de4 	muli	zero,at,631
 800949c:	08009df0 	cmpltui	zero,at,631
 80094a0:	08009df0 	cmpltui	zero,at,631
 80094a4:	08009df0 	cmpltui	zero,at,631
 80094a8:	08009df0 	cmpltui	zero,at,631
 80094ac:	08009df0 	cmpltui	zero,at,631
 80094b0:	08009df0 	cmpltui	zero,at,631
 80094b4:	08009dbc 	xorhi	zero,at,630
 80094b8:	08009dd8 	cmpnei	zero,at,631
 80094bc:	08009df0 	cmpltui	zero,at,631
 80094c0:	08009a90 	cmplti	zero,at,618
 80094c4:	08009bf0 	cmpltui	zero,at,623
 80094c8:	08009df0 	cmpltui	zero,at,631
 80094cc:	08009b74 	orhi	zero,at,621
 80094d0:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094d4:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094d8:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094dc:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094e0:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094e4:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094e8:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094ec:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094f0:	08009b80 	call	8009b8 <__alt_mem_sdram-0x77ff648>
 80094f4:	08009df0 	cmpltui	zero,at,631
 80094f8:	08009df0 	cmpltui	zero,at,631
 80094fc:	08009df0 	cmpltui	zero,at,631
 8009500:	08009df0 	cmpltui	zero,at,631
 8009504:	08009df0 	cmpltui	zero,at,631
 8009508:	08009df0 	cmpltui	zero,at,631
 800950c:	08009df0 	cmpltui	zero,at,631
 8009510:	08009df0 	cmpltui	zero,at,631
 8009514:	08009df0 	cmpltui	zero,at,631
 8009518:	08009df0 	cmpltui	zero,at,631
 800951c:	08009bac 	andhi	zero,at,622
 8009520:	08009df0 	cmpltui	zero,at,631
 8009524:	08009df0 	cmpltui	zero,at,631
 8009528:	08009df0 	cmpltui	zero,at,631
 800952c:	08009df0 	cmpltui	zero,at,631
 8009530:	08009df0 	cmpltui	zero,at,631
 8009534:	08009df0 	cmpltui	zero,at,631
 8009538:	08009df0 	cmpltui	zero,at,631
 800953c:	08009df0 	cmpltui	zero,at,631
 8009540:	08009df0 	cmpltui	zero,at,631
 8009544:	08009df0 	cmpltui	zero,at,631
 8009548:	08009640 	call	800964 <__alt_mem_sdram-0x77ff69c>
 800954c:	08009df0 	cmpltui	zero,at,631
 8009550:	08009df0 	cmpltui	zero,at,631
 8009554:	08009df0 	cmpltui	zero,at,631
 8009558:	08009df0 	cmpltui	zero,at,631
 800955c:	08009df0 	cmpltui	zero,at,631
 8009560:	08009604 	addi	zero,at,600
 8009564:	08009df0 	cmpltui	zero,at,631
 8009568:	08009df0 	cmpltui	zero,at,631
 800956c:	08009aec 	andhi	zero,at,619
 8009570:	08009df0 	cmpltui	zero,at,631
 8009574:	08009df0 	cmpltui	zero,at,631
 8009578:	08009df0 	cmpltui	zero,at,631
 800957c:	08009df0 	cmpltui	zero,at,631
 8009580:	08009df0 	cmpltui	zero,at,631
 8009584:	08009df0 	cmpltui	zero,at,631
 8009588:	08009df0 	cmpltui	zero,at,631
 800958c:	08009df0 	cmpltui	zero,at,631
 8009590:	08009df0 	cmpltui	zero,at,631
 8009594:	08009df0 	cmpltui	zero,at,631
 8009598:	08009b44 	addi	zero,at,621
 800959c:	08009cdc 	xori	zero,at,627
 80095a0:	08009df0 	cmpltui	zero,at,631
 80095a4:	08009df0 	cmpltui	zero,at,631
 80095a8:	08009df0 	cmpltui	zero,at,631
 80095ac:	08009d64 	muli	zero,at,629
 80095b0:	08009cdc 	xori	zero,at,627
 80095b4:	08009df0 	cmpltui	zero,at,631
 80095b8:	08009df0 	cmpltui	zero,at,631
 80095bc:	08009d70 	cmpltui	zero,at,629
 80095c0:	08009df0 	cmpltui	zero,at,631
 80095c4:	08009c30 	cmpltui	zero,at,624
 80095c8:	08009644 	addi	zero,at,601
 80095cc:	08009d18 	cmpnei	zero,at,628
 80095d0:	08009d58 	cmpnei	zero,at,629
 80095d4:	08009df0 	cmpltui	zero,at,631
 80095d8:	08009c7c 	xorhi	zero,at,625
 80095dc:	08009df0 	cmpltui	zero,at,631
 80095e0:	08009608 	cmpgei	zero,at,600
 80095e4:	08009df0 	cmpltui	zero,at,631
 80095e8:	08009df0 	cmpltui	zero,at,631
 80095ec:	08009d80 	call	8009d8 <__alt_mem_sdram-0x77ff628>
 80095f0:	42000204 	addi	r8,r8,8
 80095f4:	dac12217 	ldw	r11,1160(sp)
 80095f8:	5c97883a 	add	r11,r11,r18
 80095fc:	dac12215 	stw	r11,1160(sp)
 8009600:	003f8c06 	br	8009434 <__alt_data_end+0xfc009434>
 8009604:	ad400414 	ori	r21,r21,16
 8009608:	a880080c 	andi	r2,r21,32
 800960c:	10012f1e 	bne	r2,zero,8009acc <___vfiprintf_internal_r+0x7e0>
 8009610:	a880040c 	andi	r2,r21,16
 8009614:	1001ff1e 	bne	r2,zero,8009e14 <___vfiprintf_internal_r+0xb28>
 8009618:	a880100c 	andi	r2,r21,64
 800961c:	1001fd26 	beq	r2,zero,8009e14 <___vfiprintf_internal_r+0xb28>
 8009620:	da812117 	ldw	r10,1156(sp)
 8009624:	002d883a 	mov	r22,zero
 8009628:	00800044 	movi	r2,1
 800962c:	5480000b 	ldhu	r18,0(r10)
 8009630:	52800104 	addi	r10,r10,4
 8009634:	da812115 	stw	r10,1156(sp)
 8009638:	9009883a 	mov	r4,r18
 800963c:	00000a06 	br	8009668 <___vfiprintf_internal_r+0x37c>
 8009640:	ad400414 	ori	r21,r21,16
 8009644:	a880080c 	andi	r2,r21,32
 8009648:	10011426 	beq	r2,zero,8009a9c <___vfiprintf_internal_r+0x7b0>
 800964c:	da812117 	ldw	r10,1156(sp)
 8009650:	0005883a 	mov	r2,zero
 8009654:	54800017 	ldw	r18,0(r10)
 8009658:	55800117 	ldw	r22,4(r10)
 800965c:	52800204 	addi	r10,r10,8
 8009660:	da812115 	stw	r10,1156(sp)
 8009664:	9588b03a 	or	r4,r18,r22
 8009668:	d8011d85 	stb	zero,1142(sp)
 800966c:	4823883a 	mov	r17,r9
 8009670:	0019883a 	mov	r12,zero
 8009674:	48000216 	blt	r9,zero,8009680 <___vfiprintf_internal_r+0x394>
 8009678:	00ffdfc4 	movi	r3,-129
 800967c:	a8ea703a 	and	r21,r21,r3
 8009680:	2002221e 	bne	r4,zero,8009f0c <___vfiprintf_internal_r+0xc20>
 8009684:	4802c726 	beq	r9,zero,800a1a4 <___vfiprintf_internal_r+0xeb8>
 8009688:	10803fcc 	andi	r2,r2,255
 800968c:	00c00044 	movi	r3,1
 8009690:	10c24426 	beq	r2,r3,8009fa4 <___vfiprintf_internal_r+0xcb8>
 8009694:	00c00084 	movi	r3,2
 8009698:	10c2cc26 	beq	r2,r3,800a1cc <___vfiprintf_internal_r+0xee0>
 800969c:	d8c10a04 	addi	r3,sp,1064
 80096a0:	9008d0fa 	srli	r4,r18,3
 80096a4:	b00a977a 	slli	r5,r22,29
 80096a8:	b02cd0fa 	srli	r22,r22,3
 80096ac:	948001cc 	andi	r18,r18,7
 80096b0:	90800c04 	addi	r2,r18,48
 80096b4:	18ffffc4 	addi	r3,r3,-1
 80096b8:	2924b03a 	or	r18,r5,r4
 80096bc:	18800005 	stb	r2,0(r3)
 80096c0:	9588b03a 	or	r4,r18,r22
 80096c4:	203ff61e 	bne	r4,zero,80096a0 <__alt_data_end+0xfc0096a0>
 80096c8:	a900004c 	andi	r4,r21,1
 80096cc:	d8c12415 	stw	r3,1168(sp)
 80096d0:	2002fb1e 	bne	r4,zero,800a2c0 <___vfiprintf_internal_r+0xfd4>
 80096d4:	da811e17 	ldw	r10,1144(sp)
 80096d8:	50e3c83a 	sub	r17,r10,r3
 80096dc:	8825883a 	mov	r18,r17
 80096e0:	8a40010e 	bge	r17,r9,80096e8 <___vfiprintf_internal_r+0x3fc>
 80096e4:	4825883a 	mov	r18,r9
 80096e8:	63003fcc 	andi	r12,r12,255
 80096ec:	6300201c 	xori	r12,r12,128
 80096f0:	633fe004 	addi	r12,r12,-128
 80096f4:	60000126 	beq	r12,zero,80096fc <___vfiprintf_internal_r+0x410>
 80096f8:	94800044 	addi	r18,r18,1
 80096fc:	ab80008c 	andi	r14,r21,2
 8009700:	70000126 	beq	r14,zero,8009708 <___vfiprintf_internal_r+0x41c>
 8009704:	94800084 	addi	r18,r18,2
 8009708:	ad80210c 	andi	r22,r21,132
 800970c:	b001df1e 	bne	r22,zero,8009e8c <___vfiprintf_internal_r+0xba0>
 8009710:	9c8fc83a 	sub	r7,r19,r18
 8009714:	01c1dd0e 	bge	zero,r7,8009e8c <___vfiprintf_internal_r+0xba0>
 8009718:	03000404 	movi	r12,16
 800971c:	d8811c17 	ldw	r2,1136(sp)
 8009720:	61c3920e 	bge	r12,r7,800a56c <___vfiprintf_internal_r+0x1280>
 8009724:	028200b4 	movhi	r10,2050
 8009728:	52ae9004 	addi	r10,r10,-17856
 800972c:	dc012915 	stw	r16,1188(sp)
 8009730:	d9811b17 	ldw	r6,1132(sp)
 8009734:	da812315 	stw	r10,1164(sp)
 8009738:	00c001c4 	movi	r3,7
 800973c:	da412515 	stw	r9,1172(sp)
 8009740:	db812815 	stw	r14,1184(sp)
 8009744:	3821883a 	mov	r16,r7
 8009748:	00000506 	br	8009760 <___vfiprintf_internal_r+0x474>
 800974c:	31400084 	addi	r5,r6,2
 8009750:	42000204 	addi	r8,r8,8
 8009754:	200d883a 	mov	r6,r4
 8009758:	843ffc04 	addi	r16,r16,-16
 800975c:	64000d0e 	bge	r12,r16,8009794 <___vfiprintf_internal_r+0x4a8>
 8009760:	10800404 	addi	r2,r2,16
 8009764:	31000044 	addi	r4,r6,1
 8009768:	47000015 	stw	fp,0(r8)
 800976c:	43000115 	stw	r12,4(r8)
 8009770:	d8811c15 	stw	r2,1136(sp)
 8009774:	d9011b15 	stw	r4,1132(sp)
 8009778:	193ff40e 	bge	r3,r4,800974c <__alt_data_end+0xfc00974c>
 800977c:	1001b51e 	bne	r2,zero,8009e54 <___vfiprintf_internal_r+0xb68>
 8009780:	843ffc04 	addi	r16,r16,-16
 8009784:	000d883a 	mov	r6,zero
 8009788:	01400044 	movi	r5,1
 800978c:	d811883a 	mov	r8,sp
 8009790:	643ff316 	blt	r12,r16,8009760 <__alt_data_end+0xfc009760>
 8009794:	800f883a 	mov	r7,r16
 8009798:	da412517 	ldw	r9,1172(sp)
 800979c:	db812817 	ldw	r14,1184(sp)
 80097a0:	dc012917 	ldw	r16,1188(sp)
 80097a4:	dac12317 	ldw	r11,1164(sp)
 80097a8:	3887883a 	add	r3,r7,r2
 80097ac:	41c00115 	stw	r7,4(r8)
 80097b0:	42c00015 	stw	r11,0(r8)
 80097b4:	d8c11c15 	stw	r3,1136(sp)
 80097b8:	d9411b15 	stw	r5,1132(sp)
 80097bc:	008001c4 	movi	r2,7
 80097c0:	11429316 	blt	r2,r5,800a210 <___vfiprintf_internal_r+0xf24>
 80097c4:	d9011d87 	ldb	r4,1142(sp)
 80097c8:	42000204 	addi	r8,r8,8
 80097cc:	28800044 	addi	r2,r5,1
 80097d0:	2001b31e 	bne	r4,zero,8009ea0 <___vfiprintf_internal_r+0xbb4>
 80097d4:	70000c26 	beq	r14,zero,8009808 <___vfiprintf_internal_r+0x51c>
 80097d8:	d9011d04 	addi	r4,sp,1140
 80097dc:	18c00084 	addi	r3,r3,2
 80097e0:	41000015 	stw	r4,0(r8)
 80097e4:	01000084 	movi	r4,2
 80097e8:	41000115 	stw	r4,4(r8)
 80097ec:	d8c11c15 	stw	r3,1136(sp)
 80097f0:	d8811b15 	stw	r2,1132(sp)
 80097f4:	010001c4 	movi	r4,7
 80097f8:	20826516 	blt	r4,r2,800a190 <___vfiprintf_internal_r+0xea4>
 80097fc:	100b883a 	mov	r5,r2
 8009800:	42000204 	addi	r8,r8,8
 8009804:	10800044 	addi	r2,r2,1
 8009808:	01002004 	movi	r4,128
 800980c:	b1021a26 	beq	r22,r4,800a078 <___vfiprintf_internal_r+0xd8c>
 8009810:	4c6dc83a 	sub	r22,r9,r17
 8009814:	0580230e 	bge	zero,r22,80098a4 <___vfiprintf_internal_r+0x5b8>
 8009818:	01c00404 	movi	r7,16
 800981c:	3d83300e 	bge	r7,r22,800a4e0 <___vfiprintf_internal_r+0x11f4>
 8009820:	008200b4 	movhi	r2,2050
 8009824:	10ae8c04 	addi	r2,r2,-17872
 8009828:	d8812315 	stw	r2,1164(sp)
 800982c:	030001c4 	movi	r12,7
 8009830:	00000506 	br	8009848 <___vfiprintf_internal_r+0x55c>
 8009834:	28800084 	addi	r2,r5,2
 8009838:	42000204 	addi	r8,r8,8
 800983c:	200b883a 	mov	r5,r4
 8009840:	b5bffc04 	addi	r22,r22,-16
 8009844:	3d800d0e 	bge	r7,r22,800987c <___vfiprintf_internal_r+0x590>
 8009848:	18c00404 	addi	r3,r3,16
 800984c:	29000044 	addi	r4,r5,1
 8009850:	45c00015 	stw	r23,0(r8)
 8009854:	41c00115 	stw	r7,4(r8)
 8009858:	d8c11c15 	stw	r3,1136(sp)
 800985c:	d9011b15 	stw	r4,1132(sp)
 8009860:	613ff40e 	bge	r12,r4,8009834 <__alt_data_end+0xfc009834>
 8009864:	18019b1e 	bne	r3,zero,8009ed4 <___vfiprintf_internal_r+0xbe8>
 8009868:	b5bffc04 	addi	r22,r22,-16
 800986c:	000b883a 	mov	r5,zero
 8009870:	00800044 	movi	r2,1
 8009874:	d811883a 	mov	r8,sp
 8009878:	3dbff316 	blt	r7,r22,8009848 <__alt_data_end+0xfc009848>
 800987c:	da812317 	ldw	r10,1164(sp)
 8009880:	1d87883a 	add	r3,r3,r22
 8009884:	45800115 	stw	r22,4(r8)
 8009888:	42800015 	stw	r10,0(r8)
 800988c:	d8c11c15 	stw	r3,1136(sp)
 8009890:	d8811b15 	stw	r2,1132(sp)
 8009894:	010001c4 	movi	r4,7
 8009898:	2081dd16 	blt	r4,r2,800a010 <___vfiprintf_internal_r+0xd24>
 800989c:	42000204 	addi	r8,r8,8
 80098a0:	10800044 	addi	r2,r2,1
 80098a4:	da812417 	ldw	r10,1168(sp)
 80098a8:	1c47883a 	add	r3,r3,r17
 80098ac:	44400115 	stw	r17,4(r8)
 80098b0:	42800015 	stw	r10,0(r8)
 80098b4:	d8c11c15 	stw	r3,1136(sp)
 80098b8:	d8811b15 	stw	r2,1132(sp)
 80098bc:	010001c4 	movi	r4,7
 80098c0:	2081dc0e 	bge	r4,r2,800a034 <___vfiprintf_internal_r+0xd48>
 80098c4:	1802611e 	bne	r3,zero,800a24c <___vfiprintf_internal_r+0xf60>
 80098c8:	d8011b15 	stw	zero,1132(sp)
 80098cc:	aac0010c 	andi	r11,r21,4
 80098d0:	58002726 	beq	r11,zero,8009970 <___vfiprintf_internal_r+0x684>
 80098d4:	9ca3c83a 	sub	r17,r19,r18
 80098d8:	d811883a 	mov	r8,sp
 80098dc:	0443510e 	bge	zero,r17,800a624 <___vfiprintf_internal_r+0x1338>
 80098e0:	01c00404 	movi	r7,16
 80098e4:	3c43320e 	bge	r7,r17,800a5b0 <___vfiprintf_internal_r+0x12c4>
 80098e8:	008200b4 	movhi	r2,2050
 80098ec:	10ae9004 	addi	r2,r2,-17856
 80098f0:	d9011b17 	ldw	r4,1132(sp)
 80098f4:	d8812315 	stw	r2,1164(sp)
 80098f8:	382d883a 	mov	r22,r7
 80098fc:	054001c4 	movi	r21,7
 8009900:	00000506 	br	8009918 <___vfiprintf_internal_r+0x62c>
 8009904:	21400084 	addi	r5,r4,2
 8009908:	42000204 	addi	r8,r8,8
 800990c:	1009883a 	mov	r4,r2
 8009910:	8c7ffc04 	addi	r17,r17,-16
 8009914:	b4400d0e 	bge	r22,r17,800994c <___vfiprintf_internal_r+0x660>
 8009918:	18c00404 	addi	r3,r3,16
 800991c:	20800044 	addi	r2,r4,1
 8009920:	47000015 	stw	fp,0(r8)
 8009924:	45800115 	stw	r22,4(r8)
 8009928:	d8c11c15 	stw	r3,1136(sp)
 800992c:	d8811b15 	stw	r2,1132(sp)
 8009930:	a8bff40e 	bge	r21,r2,8009904 <__alt_data_end+0xfc009904>
 8009934:	1801ac1e 	bne	r3,zero,8009fe8 <___vfiprintf_internal_r+0xcfc>
 8009938:	8c7ffc04 	addi	r17,r17,-16
 800993c:	0009883a 	mov	r4,zero
 8009940:	01400044 	movi	r5,1
 8009944:	d811883a 	mov	r8,sp
 8009948:	b47ff316 	blt	r22,r17,8009918 <__alt_data_end+0xfc009918>
 800994c:	da812317 	ldw	r10,1164(sp)
 8009950:	1c47883a 	add	r3,r3,r17
 8009954:	44400115 	stw	r17,4(r8)
 8009958:	42800015 	stw	r10,0(r8)
 800995c:	d8c11c15 	stw	r3,1136(sp)
 8009960:	d9411b15 	stw	r5,1132(sp)
 8009964:	008001c4 	movi	r2,7
 8009968:	1141b70e 	bge	r2,r5,800a048 <___vfiprintf_internal_r+0xd5c>
 800996c:	1802cf1e 	bne	r3,zero,800a4ac <___vfiprintf_internal_r+0x11c0>
 8009970:	94c2ca16 	blt	r18,r19,800a49c <___vfiprintf_internal_r+0x11b0>
 8009974:	dac12217 	ldw	r11,1160(sp)
 8009978:	5c97883a 	add	r11,r11,r18
 800997c:	dac12215 	stw	r11,1160(sp)
 8009980:	d8011b15 	stw	zero,1132(sp)
 8009984:	d811883a 	mov	r8,sp
 8009988:	003e8d06 	br	80093c0 <__alt_data_end+0xfc0093c0>
 800998c:	d9012017 	ldw	r4,1152(sp)
 8009990:	a00b883a 	mov	r5,r20
 8009994:	80040ac0 	call	80040ac <__swsetup_r>
 8009998:	10002c1e 	bne	r2,zero,8009a4c <___vfiprintf_internal_r+0x760>
 800999c:	a0c0030b 	ldhu	r3,12(r20)
 80099a0:	01000284 	movi	r4,10
 80099a4:	1805883a 	mov	r2,r3
 80099a8:	1080068c 	andi	r2,r2,26
 80099ac:	113e731e 	bne	r2,r4,800937c <__alt_data_end+0xfc00937c>
 80099b0:	a080038b 	ldhu	r2,14(r20)
 80099b4:	113fffcc 	andi	r4,r2,65535
 80099b8:	2120001c 	xori	r4,r4,32768
 80099bc:	21200004 	addi	r4,r4,-32768
 80099c0:	203e6e16 	blt	r4,zero,800937c <__alt_data_end+0xfc00937c>
 80099c4:	a3001917 	ldw	r12,100(r20)
 80099c8:	a2c00717 	ldw	r11,28(r20)
 80099cc:	a2800917 	ldw	r10,36(r20)
 80099d0:	d9012017 	ldw	r4,1152(sp)
 80099d4:	d9c12117 	ldw	r7,1156(sp)
 80099d8:	02410004 	movi	r9,1024
 80099dc:	18ffff4c 	andi	r3,r3,65533
 80099e0:	da4b883a 	add	r5,sp,r9
 80099e4:	b00d883a 	mov	r6,r22
 80099e8:	d8c1030d 	sth	r3,1036(sp)
 80099ec:	db011915 	stw	r12,1124(sp)
 80099f0:	d881038d 	sth	r2,1038(sp)
 80099f4:	dac10715 	stw	r11,1052(sp)
 80099f8:	da810915 	stw	r10,1060(sp)
 80099fc:	dec10015 	stw	sp,1024(sp)
 8009a00:	dec10415 	stw	sp,1040(sp)
 8009a04:	da410215 	stw	r9,1032(sp)
 8009a08:	da410515 	stw	r9,1044(sp)
 8009a0c:	d8010615 	stw	zero,1048(sp)
 8009a10:	80092ec0 	call	80092ec <___vfiprintf_internal_r>
 8009a14:	1021883a 	mov	r16,r2
 8009a18:	10000416 	blt	r2,zero,8009a2c <___vfiprintf_internal_r+0x740>
 8009a1c:	d9012017 	ldw	r4,1152(sp)
 8009a20:	d9410004 	addi	r5,sp,1024
 8009a24:	8005b040 	call	8005b04 <_fflush_r>
 8009a28:	1002fc1e 	bne	r2,zero,800a61c <___vfiprintf_internal_r+0x1330>
 8009a2c:	d881030b 	ldhu	r2,1036(sp)
 8009a30:	1080100c 	andi	r2,r2,64
 8009a34:	10000326 	beq	r2,zero,8009a44 <___vfiprintf_internal_r+0x758>
 8009a38:	a080030b 	ldhu	r2,12(r20)
 8009a3c:	10801014 	ori	r2,r2,64
 8009a40:	a080030d 	sth	r2,12(r20)
 8009a44:	8005883a 	mov	r2,r16
 8009a48:	00000106 	br	8009a50 <___vfiprintf_internal_r+0x764>
 8009a4c:	00bfffc4 	movi	r2,-1
 8009a50:	dfc13517 	ldw	ra,1236(sp)
 8009a54:	df013417 	ldw	fp,1232(sp)
 8009a58:	ddc13317 	ldw	r23,1228(sp)
 8009a5c:	dd813217 	ldw	r22,1224(sp)
 8009a60:	dd413117 	ldw	r21,1220(sp)
 8009a64:	dd013017 	ldw	r20,1216(sp)
 8009a68:	dcc12f17 	ldw	r19,1212(sp)
 8009a6c:	dc812e17 	ldw	r18,1208(sp)
 8009a70:	dc412d17 	ldw	r17,1204(sp)
 8009a74:	dc012c17 	ldw	r16,1200(sp)
 8009a78:	dec13604 	addi	sp,sp,1240
 8009a7c:	f800283a 	ret
 8009a80:	80060ac0 	call	80060ac <__sinit>
 8009a84:	003e2b06 	br	8009334 <__alt_data_end+0xfc009334>
 8009a88:	04e7c83a 	sub	r19,zero,r19
 8009a8c:	d8812115 	stw	r2,1156(sp)
 8009a90:	ad400114 	ori	r21,r21,4
 8009a94:	80c00007 	ldb	r3,0(r16)
 8009a98:	003e7306 	br	8009468 <__alt_data_end+0xfc009468>
 8009a9c:	a880040c 	andi	r2,r21,16
 8009aa0:	1000e41e 	bne	r2,zero,8009e34 <___vfiprintf_internal_r+0xb48>
 8009aa4:	a880100c 	andi	r2,r21,64
 8009aa8:	1000e226 	beq	r2,zero,8009e34 <___vfiprintf_internal_r+0xb48>
 8009aac:	da812117 	ldw	r10,1156(sp)
 8009ab0:	002d883a 	mov	r22,zero
 8009ab4:	0005883a 	mov	r2,zero
 8009ab8:	5480000b 	ldhu	r18,0(r10)
 8009abc:	52800104 	addi	r10,r10,4
 8009ac0:	da812115 	stw	r10,1156(sp)
 8009ac4:	9009883a 	mov	r4,r18
 8009ac8:	003ee706 	br	8009668 <__alt_data_end+0xfc009668>
 8009acc:	da812117 	ldw	r10,1156(sp)
 8009ad0:	00800044 	movi	r2,1
 8009ad4:	54800017 	ldw	r18,0(r10)
 8009ad8:	55800117 	ldw	r22,4(r10)
 8009adc:	52800204 	addi	r10,r10,8
 8009ae0:	da812115 	stw	r10,1156(sp)
 8009ae4:	9588b03a 	or	r4,r18,r22
 8009ae8:	003edf06 	br	8009668 <__alt_data_end+0xfc009668>
 8009aec:	02c200b4 	movhi	r11,2050
 8009af0:	5aee2604 	addi	r11,r11,-18280
 8009af4:	d9811d85 	stb	r6,1142(sp)
 8009af8:	dac12615 	stw	r11,1176(sp)
 8009afc:	a900080c 	andi	r4,r21,32
 8009b00:	d8812117 	ldw	r2,1156(sp)
 8009b04:	2000a526 	beq	r4,zero,8009d9c <___vfiprintf_internal_r+0xab0>
 8009b08:	da812117 	ldw	r10,1156(sp)
 8009b0c:	14800017 	ldw	r18,0(r2)
 8009b10:	15800117 	ldw	r22,4(r2)
 8009b14:	52800204 	addi	r10,r10,8
 8009b18:	da812115 	stw	r10,1156(sp)
 8009b1c:	a880004c 	andi	r2,r21,1
 8009b20:	1001d926 	beq	r2,zero,800a288 <___vfiprintf_internal_r+0xf9c>
 8009b24:	9588b03a 	or	r4,r18,r22
 8009b28:	20024426 	beq	r4,zero,800a43c <___vfiprintf_internal_r+0x1150>
 8009b2c:	00800c04 	movi	r2,48
 8009b30:	d8811d05 	stb	r2,1140(sp)
 8009b34:	d8c11d45 	stb	r3,1141(sp)
 8009b38:	ad400094 	ori	r21,r21,2
 8009b3c:	00800084 	movi	r2,2
 8009b40:	003ec906 	br	8009668 <__alt_data_end+0xfc009668>
 8009b44:	da812117 	ldw	r10,1156(sp)
 8009b48:	04800044 	movi	r18,1
 8009b4c:	dac10004 	addi	r11,sp,1024
 8009b50:	50800017 	ldw	r2,0(r10)
 8009b54:	52800104 	addi	r10,r10,4
 8009b58:	d8011d85 	stb	zero,1142(sp)
 8009b5c:	d8810005 	stb	r2,1024(sp)
 8009b60:	da812115 	stw	r10,1156(sp)
 8009b64:	9023883a 	mov	r17,r18
 8009b68:	dac12415 	stw	r11,1168(sp)
 8009b6c:	0013883a 	mov	r9,zero
 8009b70:	003ee206 	br	80096fc <__alt_data_end+0xfc0096fc>
 8009b74:	ad402014 	ori	r21,r21,128
 8009b78:	80c00007 	ldb	r3,0(r16)
 8009b7c:	003e3a06 	br	8009468 <__alt_data_end+0xfc009468>
 8009b80:	8015883a 	mov	r10,r16
 8009b84:	0027883a 	mov	r19,zero
 8009b88:	18bff404 	addi	r2,r3,-48
 8009b8c:	50c00007 	ldb	r3,0(r10)
 8009b90:	9cc002a4 	muli	r19,r19,10
 8009b94:	84000044 	addi	r16,r16,1
 8009b98:	8015883a 	mov	r10,r16
 8009b9c:	98a7883a 	add	r19,r19,r2
 8009ba0:	18bff404 	addi	r2,r3,-48
 8009ba4:	28bff92e 	bgeu	r5,r2,8009b8c <__alt_data_end+0xfc009b8c>
 8009ba8:	003e3006 	br	800946c <__alt_data_end+0xfc00946c>
 8009bac:	ad400414 	ori	r21,r21,16
 8009bb0:	d9811d85 	stb	r6,1142(sp)
 8009bb4:	a880080c 	andi	r2,r21,32
 8009bb8:	d8c12117 	ldw	r3,1156(sp)
 8009bbc:	10004b26 	beq	r2,zero,8009cec <___vfiprintf_internal_r+0xa00>
 8009bc0:	da812117 	ldw	r10,1156(sp)
 8009bc4:	18800117 	ldw	r2,4(r3)
 8009bc8:	1c800017 	ldw	r18,0(r3)
 8009bcc:	52800204 	addi	r10,r10,8
 8009bd0:	da812115 	stw	r10,1156(sp)
 8009bd4:	102d883a 	mov	r22,r2
 8009bd8:	1001f116 	blt	r2,zero,800a3a0 <___vfiprintf_internal_r+0x10b4>
 8009bdc:	db011d83 	ldbu	r12,1142(sp)
 8009be0:	4823883a 	mov	r17,r9
 8009be4:	00800044 	movi	r2,1
 8009be8:	9588b03a 	or	r4,r18,r22
 8009bec:	003ea106 	br	8009674 <__alt_data_end+0xfc009674>
 8009bf0:	80c00007 	ldb	r3,0(r16)
 8009bf4:	82800044 	addi	r10,r16,1
 8009bf8:	1b027f26 	beq	r3,r12,800a5f8 <___vfiprintf_internal_r+0x130c>
 8009bfc:	18bff404 	addi	r2,r3,-48
 8009c00:	5021883a 	mov	r16,r10
 8009c04:	0013883a 	mov	r9,zero
 8009c08:	28be1836 	bltu	r5,r2,800946c <__alt_data_end+0xfc00946c>
 8009c0c:	80c00007 	ldb	r3,0(r16)
 8009c10:	4a4002a4 	muli	r9,r9,10
 8009c14:	84000044 	addi	r16,r16,1
 8009c18:	1253883a 	add	r9,r2,r9
 8009c1c:	18bff404 	addi	r2,r3,-48
 8009c20:	28bffa2e 	bgeu	r5,r2,8009c0c <__alt_data_end+0xfc009c0c>
 8009c24:	483e110e 	bge	r9,zero,800946c <__alt_data_end+0xfc00946c>
 8009c28:	027fffc4 	movi	r9,-1
 8009c2c:	003e0f06 	br	800946c <__alt_data_end+0xfc00946c>
 8009c30:	d9811d85 	stb	r6,1142(sp)
 8009c34:	a880080c 	andi	r2,r21,32
 8009c38:	1001ee26 	beq	r2,zero,800a3f4 <___vfiprintf_internal_r+0x1108>
 8009c3c:	da812117 	ldw	r10,1156(sp)
 8009c40:	dac12217 	ldw	r11,1160(sp)
 8009c44:	50800017 	ldw	r2,0(r10)
 8009c48:	5807d7fa 	srai	r3,r11,31
 8009c4c:	52800104 	addi	r10,r10,4
 8009c50:	da812115 	stw	r10,1156(sp)
 8009c54:	12c00015 	stw	r11,0(r2)
 8009c58:	10c00115 	stw	r3,4(r2)
 8009c5c:	003dd806 	br	80093c0 <__alt_data_end+0xfc0093c0>
 8009c60:	30803fcc 	andi	r2,r6,255
 8009c64:	1080201c 	xori	r2,r2,128
 8009c68:	10bfe004 	addi	r2,r2,-128
 8009c6c:	1001df1e 	bne	r2,zero,800a3ec <___vfiprintf_internal_r+0x1100>
 8009c70:	01800804 	movi	r6,32
 8009c74:	80c00007 	ldb	r3,0(r16)
 8009c78:	003dfb06 	br	8009468 <__alt_data_end+0xfc009468>
 8009c7c:	da812117 	ldw	r10,1156(sp)
 8009c80:	dac12117 	ldw	r11,1156(sp)
 8009c84:	d8011d85 	stb	zero,1142(sp)
 8009c88:	52800017 	ldw	r10,0(r10)
 8009c8c:	5d800104 	addi	r22,r11,4
 8009c90:	da812415 	stw	r10,1168(sp)
 8009c94:	50023b26 	beq	r10,zero,800a584 <___vfiprintf_internal_r+0x1298>
 8009c98:	d9012417 	ldw	r4,1168(sp)
 8009c9c:	48021f16 	blt	r9,zero,800a51c <___vfiprintf_internal_r+0x1230>
 8009ca0:	480d883a 	mov	r6,r9
 8009ca4:	000b883a 	mov	r5,zero
 8009ca8:	da012a15 	stw	r8,1192(sp)
 8009cac:	da412b15 	stw	r9,1196(sp)
 8009cb0:	80075640 	call	8007564 <memchr>
 8009cb4:	da012a17 	ldw	r8,1192(sp)
 8009cb8:	da412b17 	ldw	r9,1196(sp)
 8009cbc:	10024726 	beq	r2,zero,800a5dc <___vfiprintf_internal_r+0x12f0>
 8009cc0:	d8c12417 	ldw	r3,1168(sp)
 8009cc4:	10e3c83a 	sub	r17,r2,r3
 8009cc8:	4c41f616 	blt	r9,r17,800a4a4 <___vfiprintf_internal_r+0x11b8>
 8009ccc:	db011d83 	ldbu	r12,1142(sp)
 8009cd0:	dd812115 	stw	r22,1156(sp)
 8009cd4:	0013883a 	mov	r9,zero
 8009cd8:	003e8006 	br	80096dc <__alt_data_end+0xfc0096dc>
 8009cdc:	d9811d85 	stb	r6,1142(sp)
 8009ce0:	a880080c 	andi	r2,r21,32
 8009ce4:	d8c12117 	ldw	r3,1156(sp)
 8009ce8:	103fb51e 	bne	r2,zero,8009bc0 <__alt_data_end+0xfc009bc0>
 8009cec:	a880040c 	andi	r2,r21,16
 8009cf0:	10015e1e 	bne	r2,zero,800a26c <___vfiprintf_internal_r+0xf80>
 8009cf4:	a880100c 	andi	r2,r21,64
 8009cf8:	10015c26 	beq	r2,zero,800a26c <___vfiprintf_internal_r+0xf80>
 8009cfc:	1c80000f 	ldh	r18,0(r3)
 8009d00:	da812117 	ldw	r10,1156(sp)
 8009d04:	902dd7fa 	srai	r22,r18,31
 8009d08:	52800104 	addi	r10,r10,4
 8009d0c:	da812115 	stw	r10,1156(sp)
 8009d10:	b005883a 	mov	r2,r22
 8009d14:	003fb006 	br	8009bd8 <__alt_data_end+0xfc009bd8>
 8009d18:	da812117 	ldw	r10,1156(sp)
 8009d1c:	00800c04 	movi	r2,48
 8009d20:	02c200b4 	movhi	r11,2050
 8009d24:	54800017 	ldw	r18,0(r10)
 8009d28:	d8811d05 	stb	r2,1140(sp)
 8009d2c:	52800104 	addi	r10,r10,4
 8009d30:	00801e04 	movi	r2,120
 8009d34:	5aee2b04 	addi	r11,r11,-18260
 8009d38:	d8811d45 	stb	r2,1141(sp)
 8009d3c:	002d883a 	mov	r22,zero
 8009d40:	ad400094 	ori	r21,r21,2
 8009d44:	da812115 	stw	r10,1156(sp)
 8009d48:	dac12615 	stw	r11,1176(sp)
 8009d4c:	00800084 	movi	r2,2
 8009d50:	9009883a 	mov	r4,r18
 8009d54:	003e4406 	br	8009668 <__alt_data_end+0xfc009668>
 8009d58:	ad400814 	ori	r21,r21,32
 8009d5c:	80c00007 	ldb	r3,0(r16)
 8009d60:	003dc106 	br	8009468 <__alt_data_end+0xfc009468>
 8009d64:	ad401014 	ori	r21,r21,64
 8009d68:	80c00007 	ldb	r3,0(r16)
 8009d6c:	003dbe06 	br	8009468 <__alt_data_end+0xfc009468>
 8009d70:	80c00007 	ldb	r3,0(r16)
 8009d74:	19c1de26 	beq	r3,r7,800a4f0 <___vfiprintf_internal_r+0x1204>
 8009d78:	ad400414 	ori	r21,r21,16
 8009d7c:	003dba06 	br	8009468 <__alt_data_end+0xfc009468>
 8009d80:	008200b4 	movhi	r2,2050
 8009d84:	10ae2b04 	addi	r2,r2,-18260
 8009d88:	d8812615 	stw	r2,1176(sp)
 8009d8c:	d9811d85 	stb	r6,1142(sp)
 8009d90:	a900080c 	andi	r4,r21,32
 8009d94:	d8812117 	ldw	r2,1156(sp)
 8009d98:	203f5b1e 	bne	r4,zero,8009b08 <__alt_data_end+0xfc009b08>
 8009d9c:	a900040c 	andi	r4,r21,16
 8009da0:	2001a826 	beq	r4,zero,800a444 <___vfiprintf_internal_r+0x1158>
 8009da4:	dac12117 	ldw	r11,1156(sp)
 8009da8:	14800017 	ldw	r18,0(r2)
 8009dac:	002d883a 	mov	r22,zero
 8009db0:	5ac00104 	addi	r11,r11,4
 8009db4:	dac12115 	stw	r11,1156(sp)
 8009db8:	003f5806 	br	8009b1c <__alt_data_end+0xfc009b1c>
 8009dbc:	da812117 	ldw	r10,1156(sp)
 8009dc0:	54c00017 	ldw	r19,0(r10)
 8009dc4:	50800104 	addi	r2,r10,4
 8009dc8:	983f2f16 	blt	r19,zero,8009a88 <__alt_data_end+0xfc009a88>
 8009dcc:	d8812115 	stw	r2,1156(sp)
 8009dd0:	80c00007 	ldb	r3,0(r16)
 8009dd4:	003da406 	br	8009468 <__alt_data_end+0xfc009468>
 8009dd8:	01800ac4 	movi	r6,43
 8009ddc:	80c00007 	ldb	r3,0(r16)
 8009de0:	003da106 	br	8009468 <__alt_data_end+0xfc009468>
 8009de4:	ad400054 	ori	r21,r21,1
 8009de8:	80c00007 	ldb	r3,0(r16)
 8009dec:	003d9e06 	br	8009468 <__alt_data_end+0xfc009468>
 8009df0:	d9811d85 	stb	r6,1142(sp)
 8009df4:	18007126 	beq	r3,zero,8009fbc <___vfiprintf_internal_r+0xcd0>
 8009df8:	04800044 	movi	r18,1
 8009dfc:	d8c10005 	stb	r3,1024(sp)
 8009e00:	d8c10004 	addi	r3,sp,1024
 8009e04:	d8011d85 	stb	zero,1142(sp)
 8009e08:	9023883a 	mov	r17,r18
 8009e0c:	d8c12415 	stw	r3,1168(sp)
 8009e10:	003f5606 	br	8009b6c <__alt_data_end+0xfc009b6c>
 8009e14:	dac12117 	ldw	r11,1156(sp)
 8009e18:	002d883a 	mov	r22,zero
 8009e1c:	00800044 	movi	r2,1
 8009e20:	5c800017 	ldw	r18,0(r11)
 8009e24:	5ac00104 	addi	r11,r11,4
 8009e28:	dac12115 	stw	r11,1156(sp)
 8009e2c:	9009883a 	mov	r4,r18
 8009e30:	003e0d06 	br	8009668 <__alt_data_end+0xfc009668>
 8009e34:	dac12117 	ldw	r11,1156(sp)
 8009e38:	002d883a 	mov	r22,zero
 8009e3c:	0005883a 	mov	r2,zero
 8009e40:	5c800017 	ldw	r18,0(r11)
 8009e44:	5ac00104 	addi	r11,r11,4
 8009e48:	dac12115 	stw	r11,1156(sp)
 8009e4c:	9009883a 	mov	r4,r18
 8009e50:	003e0506 	br	8009668 <__alt_data_end+0xfc009668>
 8009e54:	d9012017 	ldw	r4,1152(sp)
 8009e58:	a00b883a 	mov	r5,r20
 8009e5c:	d9811a04 	addi	r6,sp,1128
 8009e60:	d8c12a15 	stw	r3,1192(sp)
 8009e64:	db012b15 	stw	r12,1196(sp)
 8009e68:	80091d80 	call	80091d8 <__sprint_r.part.0>
 8009e6c:	d8c12a17 	ldw	r3,1192(sp)
 8009e70:	db012b17 	ldw	r12,1196(sp)
 8009e74:	1000571e 	bne	r2,zero,8009fd4 <___vfiprintf_internal_r+0xce8>
 8009e78:	d9811b17 	ldw	r6,1132(sp)
 8009e7c:	d8811c17 	ldw	r2,1136(sp)
 8009e80:	d811883a 	mov	r8,sp
 8009e84:	31400044 	addi	r5,r6,1
 8009e88:	003e3306 	br	8009758 <__alt_data_end+0xfc009758>
 8009e8c:	d9411b17 	ldw	r5,1132(sp)
 8009e90:	d8c11c17 	ldw	r3,1136(sp)
 8009e94:	28800044 	addi	r2,r5,1
 8009e98:	d9011d87 	ldb	r4,1142(sp)
 8009e9c:	203e4d26 	beq	r4,zero,80097d4 <__alt_data_end+0xfc0097d4>
 8009ea0:	01000044 	movi	r4,1
 8009ea4:	d9411d84 	addi	r5,sp,1142
 8009ea8:	1907883a 	add	r3,r3,r4
 8009eac:	41400015 	stw	r5,0(r8)
 8009eb0:	41000115 	stw	r4,4(r8)
 8009eb4:	d8c11c15 	stw	r3,1136(sp)
 8009eb8:	d8811b15 	stw	r2,1132(sp)
 8009ebc:	014001c4 	movi	r5,7
 8009ec0:	2880aa16 	blt	r5,r2,800a16c <___vfiprintf_internal_r+0xe80>
 8009ec4:	100b883a 	mov	r5,r2
 8009ec8:	42000204 	addi	r8,r8,8
 8009ecc:	10800044 	addi	r2,r2,1
 8009ed0:	003e4006 	br	80097d4 <__alt_data_end+0xfc0097d4>
 8009ed4:	d9012017 	ldw	r4,1152(sp)
 8009ed8:	a00b883a 	mov	r5,r20
 8009edc:	d9811a04 	addi	r6,sp,1128
 8009ee0:	d9c12a15 	stw	r7,1192(sp)
 8009ee4:	db012b15 	stw	r12,1196(sp)
 8009ee8:	80091d80 	call	80091d8 <__sprint_r.part.0>
 8009eec:	d9c12a17 	ldw	r7,1192(sp)
 8009ef0:	db012b17 	ldw	r12,1196(sp)
 8009ef4:	1000371e 	bne	r2,zero,8009fd4 <___vfiprintf_internal_r+0xce8>
 8009ef8:	d9411b17 	ldw	r5,1132(sp)
 8009efc:	d8c11c17 	ldw	r3,1136(sp)
 8009f00:	d811883a 	mov	r8,sp
 8009f04:	28800044 	addi	r2,r5,1
 8009f08:	003e4d06 	br	8009840 <__alt_data_end+0xfc009840>
 8009f0c:	10803fcc 	andi	r2,r2,255
 8009f10:	00c00044 	movi	r3,1
 8009f14:	10fddf1e 	bne	r2,r3,8009694 <__alt_data_end+0xfc009694>
 8009f18:	b000021e 	bne	r22,zero,8009f24 <___vfiprintf_internal_r+0xc38>
 8009f1c:	00800244 	movi	r2,9
 8009f20:	1480202e 	bgeu	r2,r18,8009fa4 <___vfiprintf_internal_r+0xcb8>
 8009f24:	dc012515 	stw	r16,1172(sp)
 8009f28:	dc410a04 	addi	r17,sp,1064
 8009f2c:	9021883a 	mov	r16,r18
 8009f30:	da012415 	stw	r8,1168(sp)
 8009f34:	b025883a 	mov	r18,r22
 8009f38:	da412315 	stw	r9,1164(sp)
 8009f3c:	602d883a 	mov	r22,r12
 8009f40:	8009883a 	mov	r4,r16
 8009f44:	900b883a 	mov	r5,r18
 8009f48:	01800284 	movi	r6,10
 8009f4c:	000f883a 	mov	r7,zero
 8009f50:	800b5640 	call	800b564 <__umoddi3>
 8009f54:	10800c04 	addi	r2,r2,48
 8009f58:	8c7fffc4 	addi	r17,r17,-1
 8009f5c:	8009883a 	mov	r4,r16
 8009f60:	900b883a 	mov	r5,r18
 8009f64:	01800284 	movi	r6,10
 8009f68:	000f883a 	mov	r7,zero
 8009f6c:	88800005 	stb	r2,0(r17)
 8009f70:	800afa40 	call	800afa4 <__udivdi3>
 8009f74:	1021883a 	mov	r16,r2
 8009f78:	10c4b03a 	or	r2,r2,r3
 8009f7c:	1825883a 	mov	r18,r3
 8009f80:	103fef1e 	bne	r2,zero,8009f40 <__alt_data_end+0xfc009f40>
 8009f84:	da811e17 	ldw	r10,1144(sp)
 8009f88:	da012417 	ldw	r8,1168(sp)
 8009f8c:	da412317 	ldw	r9,1164(sp)
 8009f90:	dc412415 	stw	r17,1168(sp)
 8009f94:	b019883a 	mov	r12,r22
 8009f98:	dc012517 	ldw	r16,1172(sp)
 8009f9c:	5463c83a 	sub	r17,r10,r17
 8009fa0:	003dce06 	br	80096dc <__alt_data_end+0xfc0096dc>
 8009fa4:	94800c04 	addi	r18,r18,48
 8009fa8:	d8c109c4 	addi	r3,sp,1063
 8009fac:	dc8109c5 	stb	r18,1063(sp)
 8009fb0:	dc412717 	ldw	r17,1180(sp)
 8009fb4:	d8c12415 	stw	r3,1168(sp)
 8009fb8:	003dc806 	br	80096dc <__alt_data_end+0xfc0096dc>
 8009fbc:	d8811c17 	ldw	r2,1136(sp)
 8009fc0:	10000426 	beq	r2,zero,8009fd4 <___vfiprintf_internal_r+0xce8>
 8009fc4:	d9012017 	ldw	r4,1152(sp)
 8009fc8:	a00b883a 	mov	r5,r20
 8009fcc:	d9811a04 	addi	r6,sp,1128
 8009fd0:	80091d80 	call	80091d8 <__sprint_r.part.0>
 8009fd4:	a080030b 	ldhu	r2,12(r20)
 8009fd8:	1080100c 	andi	r2,r2,64
 8009fdc:	103e9b1e 	bne	r2,zero,8009a4c <__alt_data_end+0xfc009a4c>
 8009fe0:	d8812217 	ldw	r2,1160(sp)
 8009fe4:	003e9a06 	br	8009a50 <__alt_data_end+0xfc009a50>
 8009fe8:	d9012017 	ldw	r4,1152(sp)
 8009fec:	a00b883a 	mov	r5,r20
 8009ff0:	d9811a04 	addi	r6,sp,1128
 8009ff4:	80091d80 	call	80091d8 <__sprint_r.part.0>
 8009ff8:	103ff61e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 8009ffc:	d9011b17 	ldw	r4,1132(sp)
 800a000:	d8c11c17 	ldw	r3,1136(sp)
 800a004:	d811883a 	mov	r8,sp
 800a008:	21400044 	addi	r5,r4,1
 800a00c:	003e4006 	br	8009910 <__alt_data_end+0xfc009910>
 800a010:	1800d61e 	bne	r3,zero,800a36c <___vfiprintf_internal_r+0x1080>
 800a014:	dac12417 	ldw	r11,1168(sp)
 800a018:	00800044 	movi	r2,1
 800a01c:	dc400115 	stw	r17,4(sp)
 800a020:	dac00015 	stw	r11,0(sp)
 800a024:	dc411c15 	stw	r17,1136(sp)
 800a028:	d8811b15 	stw	r2,1132(sp)
 800a02c:	8807883a 	mov	r3,r17
 800a030:	d811883a 	mov	r8,sp
 800a034:	42000204 	addi	r8,r8,8
 800a038:	aac0010c 	andi	r11,r21,4
 800a03c:	58000226 	beq	r11,zero,800a048 <___vfiprintf_internal_r+0xd5c>
 800a040:	9ca3c83a 	sub	r17,r19,r18
 800a044:	047e2616 	blt	zero,r17,80098e0 <__alt_data_end+0xfc0098e0>
 800a048:	94c0010e 	bge	r18,r19,800a050 <___vfiprintf_internal_r+0xd64>
 800a04c:	9825883a 	mov	r18,r19
 800a050:	da812217 	ldw	r10,1160(sp)
 800a054:	5495883a 	add	r10,r10,r18
 800a058:	da812215 	stw	r10,1160(sp)
 800a05c:	183e4826 	beq	r3,zero,8009980 <__alt_data_end+0xfc009980>
 800a060:	d9012017 	ldw	r4,1152(sp)
 800a064:	a00b883a 	mov	r5,r20
 800a068:	d9811a04 	addi	r6,sp,1128
 800a06c:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a070:	103e4326 	beq	r2,zero,8009980 <__alt_data_end+0xfc009980>
 800a074:	003fd706 	br	8009fd4 <__alt_data_end+0xfc009fd4>
 800a078:	9cadc83a 	sub	r22,r19,r18
 800a07c:	05bde40e 	bge	zero,r22,8009810 <__alt_data_end+0xfc009810>
 800a080:	03000404 	movi	r12,16
 800a084:	6581500e 	bge	r12,r22,800a5c8 <___vfiprintf_internal_r+0x12dc>
 800a088:	008200b4 	movhi	r2,2050
 800a08c:	10ae8c04 	addi	r2,r2,-17872
 800a090:	d8812315 	stw	r2,1164(sp)
 800a094:	8005883a 	mov	r2,r16
 800a098:	038001c4 	movi	r14,7
 800a09c:	b021883a 	mov	r16,r22
 800a0a0:	da412515 	stw	r9,1172(sp)
 800a0a4:	102d883a 	mov	r22,r2
 800a0a8:	00000506 	br	800a0c0 <___vfiprintf_internal_r+0xdd4>
 800a0ac:	29000084 	addi	r4,r5,2
 800a0b0:	42000204 	addi	r8,r8,8
 800a0b4:	100b883a 	mov	r5,r2
 800a0b8:	843ffc04 	addi	r16,r16,-16
 800a0bc:	64000d0e 	bge	r12,r16,800a0f4 <___vfiprintf_internal_r+0xe08>
 800a0c0:	18c00404 	addi	r3,r3,16
 800a0c4:	28800044 	addi	r2,r5,1
 800a0c8:	45c00015 	stw	r23,0(r8)
 800a0cc:	43000115 	stw	r12,4(r8)
 800a0d0:	d8c11c15 	stw	r3,1136(sp)
 800a0d4:	d8811b15 	stw	r2,1132(sp)
 800a0d8:	70bff40e 	bge	r14,r2,800a0ac <__alt_data_end+0xfc00a0ac>
 800a0dc:	1800151e 	bne	r3,zero,800a134 <___vfiprintf_internal_r+0xe48>
 800a0e0:	843ffc04 	addi	r16,r16,-16
 800a0e4:	000b883a 	mov	r5,zero
 800a0e8:	01000044 	movi	r4,1
 800a0ec:	d811883a 	mov	r8,sp
 800a0f0:	643ff316 	blt	r12,r16,800a0c0 <__alt_data_end+0xfc00a0c0>
 800a0f4:	da412517 	ldw	r9,1172(sp)
 800a0f8:	b005883a 	mov	r2,r22
 800a0fc:	802d883a 	mov	r22,r16
 800a100:	1021883a 	mov	r16,r2
 800a104:	da812317 	ldw	r10,1164(sp)
 800a108:	1d87883a 	add	r3,r3,r22
 800a10c:	45800115 	stw	r22,4(r8)
 800a110:	42800015 	stw	r10,0(r8)
 800a114:	d8c11c15 	stw	r3,1136(sp)
 800a118:	d9011b15 	stw	r4,1132(sp)
 800a11c:	008001c4 	movi	r2,7
 800a120:	11008d16 	blt	r2,r4,800a358 <___vfiprintf_internal_r+0x106c>
 800a124:	42000204 	addi	r8,r8,8
 800a128:	20800044 	addi	r2,r4,1
 800a12c:	200b883a 	mov	r5,r4
 800a130:	003db706 	br	8009810 <__alt_data_end+0xfc009810>
 800a134:	d9012017 	ldw	r4,1152(sp)
 800a138:	a00b883a 	mov	r5,r20
 800a13c:	d9811a04 	addi	r6,sp,1128
 800a140:	db012b15 	stw	r12,1196(sp)
 800a144:	db812a15 	stw	r14,1192(sp)
 800a148:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a14c:	db012b17 	ldw	r12,1196(sp)
 800a150:	db812a17 	ldw	r14,1192(sp)
 800a154:	103f9f1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a158:	d9411b17 	ldw	r5,1132(sp)
 800a15c:	d8c11c17 	ldw	r3,1136(sp)
 800a160:	d811883a 	mov	r8,sp
 800a164:	29000044 	addi	r4,r5,1
 800a168:	003fd306 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a16c:	18006c1e 	bne	r3,zero,800a320 <___vfiprintf_internal_r+0x1034>
 800a170:	70004f26 	beq	r14,zero,800a2b0 <___vfiprintf_internal_r+0xfc4>
 800a174:	d8811d04 	addi	r2,sp,1140
 800a178:	00c00084 	movi	r3,2
 800a17c:	d8800015 	stw	r2,0(sp)
 800a180:	d8c00115 	stw	r3,4(sp)
 800a184:	2005883a 	mov	r2,r4
 800a188:	d811883a 	mov	r8,sp
 800a18c:	003d9b06 	br	80097fc <__alt_data_end+0xfc0097fc>
 800a190:	1800571e 	bne	r3,zero,800a2f0 <___vfiprintf_internal_r+0x1004>
 800a194:	000b883a 	mov	r5,zero
 800a198:	00800044 	movi	r2,1
 800a19c:	d811883a 	mov	r8,sp
 800a1a0:	003d9906 	br	8009808 <__alt_data_end+0xfc009808>
 800a1a4:	10803fcc 	andi	r2,r2,255
 800a1a8:	1000251e 	bne	r2,zero,800a240 <___vfiprintf_internal_r+0xf54>
 800a1ac:	a880004c 	andi	r2,r21,1
 800a1b0:	10007826 	beq	r2,zero,800a394 <___vfiprintf_internal_r+0x10a8>
 800a1b4:	00800c04 	movi	r2,48
 800a1b8:	d8c109c4 	addi	r3,sp,1063
 800a1bc:	d88109c5 	stb	r2,1063(sp)
 800a1c0:	dc412717 	ldw	r17,1180(sp)
 800a1c4:	d8c12415 	stw	r3,1168(sp)
 800a1c8:	003d4406 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a1cc:	d9012617 	ldw	r4,1176(sp)
 800a1d0:	dc410a04 	addi	r17,sp,1064
 800a1d4:	908003cc 	andi	r2,r18,15
 800a1d8:	b006973a 	slli	r3,r22,28
 800a1dc:	2085883a 	add	r2,r4,r2
 800a1e0:	9024d13a 	srli	r18,r18,4
 800a1e4:	10800003 	ldbu	r2,0(r2)
 800a1e8:	b02cd13a 	srli	r22,r22,4
 800a1ec:	8c7fffc4 	addi	r17,r17,-1
 800a1f0:	1ca4b03a 	or	r18,r3,r18
 800a1f4:	88800005 	stb	r2,0(r17)
 800a1f8:	9584b03a 	or	r2,r18,r22
 800a1fc:	103ff51e 	bne	r2,zero,800a1d4 <__alt_data_end+0xfc00a1d4>
 800a200:	dac11e17 	ldw	r11,1144(sp)
 800a204:	dc412415 	stw	r17,1168(sp)
 800a208:	5c63c83a 	sub	r17,r11,r17
 800a20c:	003d3306 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a210:	1800941e 	bne	r3,zero,800a464 <___vfiprintf_internal_r+0x1178>
 800a214:	d8811d87 	ldb	r2,1142(sp)
 800a218:	10006b26 	beq	r2,zero,800a3c8 <___vfiprintf_internal_r+0x10dc>
 800a21c:	00c00044 	movi	r3,1
 800a220:	d9011d84 	addi	r4,sp,1142
 800a224:	1805883a 	mov	r2,r3
 800a228:	d9000015 	stw	r4,0(sp)
 800a22c:	d8c00115 	stw	r3,4(sp)
 800a230:	d811883a 	mov	r8,sp
 800a234:	003f2306 	br	8009ec4 <__alt_data_end+0xfc009ec4>
 800a238:	8023883a 	mov	r17,r16
 800a23c:	003c7d06 	br	8009434 <__alt_data_end+0xfc009434>
 800a240:	da810a04 	addi	r10,sp,1064
 800a244:	da812415 	stw	r10,1168(sp)
 800a248:	003d2406 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a24c:	d9012017 	ldw	r4,1152(sp)
 800a250:	a00b883a 	mov	r5,r20
 800a254:	d9811a04 	addi	r6,sp,1128
 800a258:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a25c:	103f5d1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a260:	d8c11c17 	ldw	r3,1136(sp)
 800a264:	d811883a 	mov	r8,sp
 800a268:	003f7306 	br	800a038 <__alt_data_end+0xfc00a038>
 800a26c:	1c800017 	ldw	r18,0(r3)
 800a270:	dac12117 	ldw	r11,1156(sp)
 800a274:	902dd7fa 	srai	r22,r18,31
 800a278:	5ac00104 	addi	r11,r11,4
 800a27c:	dac12115 	stw	r11,1156(sp)
 800a280:	b005883a 	mov	r2,r22
 800a284:	003e5406 	br	8009bd8 <__alt_data_end+0xfc009bd8>
 800a288:	00800084 	movi	r2,2
 800a28c:	9588b03a 	or	r4,r18,r22
 800a290:	003cf506 	br	8009668 <__alt_data_end+0xfc009668>
 800a294:	d9012017 	ldw	r4,1152(sp)
 800a298:	a00b883a 	mov	r5,r20
 800a29c:	d9811a04 	addi	r6,sp,1128
 800a2a0:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a2a4:	103f4b1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a2a8:	d811883a 	mov	r8,sp
 800a2ac:	003cd106 	br	80095f4 <__alt_data_end+0xfc0095f4>
 800a2b0:	000b883a 	mov	r5,zero
 800a2b4:	2005883a 	mov	r2,r4
 800a2b8:	d811883a 	mov	r8,sp
 800a2bc:	003d5206 	br	8009808 <__alt_data_end+0xfc009808>
 800a2c0:	10803fcc 	andi	r2,r2,255
 800a2c4:	1080201c 	xori	r2,r2,128
 800a2c8:	10bfe004 	addi	r2,r2,-128
 800a2cc:	01000c04 	movi	r4,48
 800a2d0:	11008e26 	beq	r2,r4,800a50c <___vfiprintf_internal_r+0x1220>
 800a2d4:	da812417 	ldw	r10,1168(sp)
 800a2d8:	dac11e17 	ldw	r11,1144(sp)
 800a2dc:	193fffc5 	stb	r4,-1(r3)
 800a2e0:	52bfffc4 	addi	r10,r10,-1
 800a2e4:	da812415 	stw	r10,1168(sp)
 800a2e8:	5aa3c83a 	sub	r17,r11,r10
 800a2ec:	003cfb06 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a2f0:	d9012017 	ldw	r4,1152(sp)
 800a2f4:	a00b883a 	mov	r5,r20
 800a2f8:	d9811a04 	addi	r6,sp,1128
 800a2fc:	da412b15 	stw	r9,1196(sp)
 800a300:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a304:	da412b17 	ldw	r9,1196(sp)
 800a308:	103f321e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a30c:	d9411b17 	ldw	r5,1132(sp)
 800a310:	d8c11c17 	ldw	r3,1136(sp)
 800a314:	d811883a 	mov	r8,sp
 800a318:	28800044 	addi	r2,r5,1
 800a31c:	003d3a06 	br	8009808 <__alt_data_end+0xfc009808>
 800a320:	d9012017 	ldw	r4,1152(sp)
 800a324:	a00b883a 	mov	r5,r20
 800a328:	d9811a04 	addi	r6,sp,1128
 800a32c:	da412b15 	stw	r9,1196(sp)
 800a330:	db812a15 	stw	r14,1192(sp)
 800a334:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a338:	da412b17 	ldw	r9,1196(sp)
 800a33c:	db812a17 	ldw	r14,1192(sp)
 800a340:	103f241e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a344:	d9411b17 	ldw	r5,1132(sp)
 800a348:	d8c11c17 	ldw	r3,1136(sp)
 800a34c:	d811883a 	mov	r8,sp
 800a350:	28800044 	addi	r2,r5,1
 800a354:	003d1f06 	br	80097d4 <__alt_data_end+0xfc0097d4>
 800a358:	1800781e 	bne	r3,zero,800a53c <___vfiprintf_internal_r+0x1250>
 800a35c:	000b883a 	mov	r5,zero
 800a360:	00800044 	movi	r2,1
 800a364:	d811883a 	mov	r8,sp
 800a368:	003d2906 	br	8009810 <__alt_data_end+0xfc009810>
 800a36c:	d9012017 	ldw	r4,1152(sp)
 800a370:	a00b883a 	mov	r5,r20
 800a374:	d9811a04 	addi	r6,sp,1128
 800a378:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a37c:	103f151e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a380:	d8811b17 	ldw	r2,1132(sp)
 800a384:	d8c11c17 	ldw	r3,1136(sp)
 800a388:	d811883a 	mov	r8,sp
 800a38c:	10800044 	addi	r2,r2,1
 800a390:	003d4406 	br	80098a4 <__alt_data_end+0xfc0098a4>
 800a394:	dac10a04 	addi	r11,sp,1064
 800a398:	dac12415 	stw	r11,1168(sp)
 800a39c:	003ccf06 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a3a0:	04a5c83a 	sub	r18,zero,r18
 800a3a4:	9004c03a 	cmpne	r2,r18,zero
 800a3a8:	05adc83a 	sub	r22,zero,r22
 800a3ac:	b0adc83a 	sub	r22,r22,r2
 800a3b0:	03000b44 	movi	r12,45
 800a3b4:	db011d85 	stb	r12,1142(sp)
 800a3b8:	4823883a 	mov	r17,r9
 800a3bc:	00800044 	movi	r2,1
 800a3c0:	9588b03a 	or	r4,r18,r22
 800a3c4:	003cab06 	br	8009674 <__alt_data_end+0xfc009674>
 800a3c8:	000b883a 	mov	r5,zero
 800a3cc:	00800044 	movi	r2,1
 800a3d0:	d811883a 	mov	r8,sp
 800a3d4:	703d0c26 	beq	r14,zero,8009808 <__alt_data_end+0xfc009808>
 800a3d8:	00c00084 	movi	r3,2
 800a3dc:	d9011d04 	addi	r4,sp,1140
 800a3e0:	d9000015 	stw	r4,0(sp)
 800a3e4:	d8c00115 	stw	r3,4(sp)
 800a3e8:	003d0406 	br	80097fc <__alt_data_end+0xfc0097fc>
 800a3ec:	80c00007 	ldb	r3,0(r16)
 800a3f0:	003c1d06 	br	8009468 <__alt_data_end+0xfc009468>
 800a3f4:	a880040c 	andi	r2,r21,16
 800a3f8:	1000091e 	bne	r2,zero,800a420 <___vfiprintf_internal_r+0x1134>
 800a3fc:	aac0100c 	andi	r11,r21,64
 800a400:	58000726 	beq	r11,zero,800a420 <___vfiprintf_internal_r+0x1134>
 800a404:	da812117 	ldw	r10,1156(sp)
 800a408:	dac12217 	ldw	r11,1160(sp)
 800a40c:	50800017 	ldw	r2,0(r10)
 800a410:	52800104 	addi	r10,r10,4
 800a414:	da812115 	stw	r10,1156(sp)
 800a418:	12c0000d 	sth	r11,0(r2)
 800a41c:	003be806 	br	80093c0 <__alt_data_end+0xfc0093c0>
 800a420:	da812117 	ldw	r10,1156(sp)
 800a424:	dac12217 	ldw	r11,1160(sp)
 800a428:	50800017 	ldw	r2,0(r10)
 800a42c:	52800104 	addi	r10,r10,4
 800a430:	da812115 	stw	r10,1156(sp)
 800a434:	12c00015 	stw	r11,0(r2)
 800a438:	003be106 	br	80093c0 <__alt_data_end+0xfc0093c0>
 800a43c:	00800084 	movi	r2,2
 800a440:	003c8906 	br	8009668 <__alt_data_end+0xfc009668>
 800a444:	a900100c 	andi	r4,r21,64
 800a448:	20001f26 	beq	r4,zero,800a4c8 <___vfiprintf_internal_r+0x11dc>
 800a44c:	da812117 	ldw	r10,1156(sp)
 800a450:	1480000b 	ldhu	r18,0(r2)
 800a454:	002d883a 	mov	r22,zero
 800a458:	52800104 	addi	r10,r10,4
 800a45c:	da812115 	stw	r10,1156(sp)
 800a460:	003dae06 	br	8009b1c <__alt_data_end+0xfc009b1c>
 800a464:	d9012017 	ldw	r4,1152(sp)
 800a468:	a00b883a 	mov	r5,r20
 800a46c:	d9811a04 	addi	r6,sp,1128
 800a470:	da412b15 	stw	r9,1196(sp)
 800a474:	db812a15 	stw	r14,1192(sp)
 800a478:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a47c:	da412b17 	ldw	r9,1196(sp)
 800a480:	db812a17 	ldw	r14,1192(sp)
 800a484:	103ed31e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a488:	d9411b17 	ldw	r5,1132(sp)
 800a48c:	d8c11c17 	ldw	r3,1136(sp)
 800a490:	d811883a 	mov	r8,sp
 800a494:	28800044 	addi	r2,r5,1
 800a498:	003e7f06 	br	8009e98 <__alt_data_end+0xfc009e98>
 800a49c:	9825883a 	mov	r18,r19
 800a4a0:	003d3406 	br	8009974 <__alt_data_end+0xfc009974>
 800a4a4:	4823883a 	mov	r17,r9
 800a4a8:	003e0806 	br	8009ccc <__alt_data_end+0xfc009ccc>
 800a4ac:	d9012017 	ldw	r4,1152(sp)
 800a4b0:	a00b883a 	mov	r5,r20
 800a4b4:	d9811a04 	addi	r6,sp,1128
 800a4b8:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a4bc:	103ec51e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a4c0:	d8c11c17 	ldw	r3,1136(sp)
 800a4c4:	003ee006 	br	800a048 <__alt_data_end+0xfc00a048>
 800a4c8:	dac12117 	ldw	r11,1156(sp)
 800a4cc:	14800017 	ldw	r18,0(r2)
 800a4d0:	002d883a 	mov	r22,zero
 800a4d4:	5ac00104 	addi	r11,r11,4
 800a4d8:	dac12115 	stw	r11,1156(sp)
 800a4dc:	003d8f06 	br	8009b1c <__alt_data_end+0xfc009b1c>
 800a4e0:	02c200b4 	movhi	r11,2050
 800a4e4:	5aee8c04 	addi	r11,r11,-17872
 800a4e8:	dac12315 	stw	r11,1164(sp)
 800a4ec:	003ce306 	br	800987c <__alt_data_end+0xfc00987c>
 800a4f0:	80c00043 	ldbu	r3,1(r16)
 800a4f4:	ad400814 	ori	r21,r21,32
 800a4f8:	84000044 	addi	r16,r16,1
 800a4fc:	18c03fcc 	andi	r3,r3,255
 800a500:	18c0201c 	xori	r3,r3,128
 800a504:	18ffe004 	addi	r3,r3,-128
 800a508:	003bd706 	br	8009468 <__alt_data_end+0xfc009468>
 800a50c:	dac11e17 	ldw	r11,1144(sp)
 800a510:	d8c12417 	ldw	r3,1168(sp)
 800a514:	58e3c83a 	sub	r17,r11,r3
 800a518:	003c7006 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a51c:	da012a15 	stw	r8,1192(sp)
 800a520:	8001ff40 	call	8001ff4 <strlen>
 800a524:	1023883a 	mov	r17,r2
 800a528:	db011d83 	ldbu	r12,1142(sp)
 800a52c:	dd812115 	stw	r22,1156(sp)
 800a530:	0013883a 	mov	r9,zero
 800a534:	da012a17 	ldw	r8,1192(sp)
 800a538:	003c6806 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a53c:	d9012017 	ldw	r4,1152(sp)
 800a540:	a00b883a 	mov	r5,r20
 800a544:	d9811a04 	addi	r6,sp,1128
 800a548:	da412b15 	stw	r9,1196(sp)
 800a54c:	80091d80 	call	80091d8 <__sprint_r.part.0>
 800a550:	da412b17 	ldw	r9,1196(sp)
 800a554:	103e9f1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a558:	d9411b17 	ldw	r5,1132(sp)
 800a55c:	d8c11c17 	ldw	r3,1136(sp)
 800a560:	d811883a 	mov	r8,sp
 800a564:	28800044 	addi	r2,r5,1
 800a568:	003ca906 	br	8009810 <__alt_data_end+0xfc009810>
 800a56c:	d9411b17 	ldw	r5,1132(sp)
 800a570:	010200b4 	movhi	r4,2050
 800a574:	212e9004 	addi	r4,r4,-17856
 800a578:	d9012315 	stw	r4,1164(sp)
 800a57c:	29400044 	addi	r5,r5,1
 800a580:	003c8806 	br	80097a4 <__alt_data_end+0xfc0097a4>
 800a584:	00800184 	movi	r2,6
 800a588:	1240012e 	bgeu	r2,r9,800a590 <___vfiprintf_internal_r+0x12a4>
 800a58c:	1013883a 	mov	r9,r2
 800a590:	4823883a 	mov	r17,r9
 800a594:	4825883a 	mov	r18,r9
 800a598:	48001516 	blt	r9,zero,800a5f0 <___vfiprintf_internal_r+0x1304>
 800a59c:	008200b4 	movhi	r2,2050
 800a5a0:	10ae3004 	addi	r2,r2,-18240
 800a5a4:	dd812115 	stw	r22,1156(sp)
 800a5a8:	d8812415 	stw	r2,1168(sp)
 800a5ac:	003d6f06 	br	8009b6c <__alt_data_end+0xfc009b6c>
 800a5b0:	d9411b17 	ldw	r5,1132(sp)
 800a5b4:	02c200b4 	movhi	r11,2050
 800a5b8:	5aee9004 	addi	r11,r11,-17856
 800a5bc:	dac12315 	stw	r11,1164(sp)
 800a5c0:	29400044 	addi	r5,r5,1
 800a5c4:	003ce106 	br	800994c <__alt_data_end+0xfc00994c>
 800a5c8:	010200b4 	movhi	r4,2050
 800a5cc:	212e8c04 	addi	r4,r4,-17872
 800a5d0:	d9012315 	stw	r4,1164(sp)
 800a5d4:	1009883a 	mov	r4,r2
 800a5d8:	003eca06 	br	800a104 <__alt_data_end+0xfc00a104>
 800a5dc:	4823883a 	mov	r17,r9
 800a5e0:	db011d83 	ldbu	r12,1142(sp)
 800a5e4:	dd812115 	stw	r22,1156(sp)
 800a5e8:	0013883a 	mov	r9,zero
 800a5ec:	003c3b06 	br	80096dc <__alt_data_end+0xfc0096dc>
 800a5f0:	0025883a 	mov	r18,zero
 800a5f4:	003fe906 	br	800a59c <__alt_data_end+0xfc00a59c>
 800a5f8:	dac12117 	ldw	r11,1156(sp)
 800a5fc:	8005883a 	mov	r2,r16
 800a600:	5021883a 	mov	r16,r10
 800a604:	5a400017 	ldw	r9,0(r11)
 800a608:	58c00104 	addi	r3,r11,4
 800a60c:	d8c12115 	stw	r3,1156(sp)
 800a610:	48000a16 	blt	r9,zero,800a63c <___vfiprintf_internal_r+0x1350>
 800a614:	10c00047 	ldb	r3,1(r2)
 800a618:	003b9306 	br	8009468 <__alt_data_end+0xfc009468>
 800a61c:	043fffc4 	movi	r16,-1
 800a620:	003d0206 	br	8009a2c <__alt_data_end+0xfc009a2c>
 800a624:	94c0010e 	bge	r18,r19,800a62c <___vfiprintf_internal_r+0x1340>
 800a628:	9825883a 	mov	r18,r19
 800a62c:	da812217 	ldw	r10,1160(sp)
 800a630:	5495883a 	add	r10,r10,r18
 800a634:	da812215 	stw	r10,1160(sp)
 800a638:	003cd106 	br	8009980 <__alt_data_end+0xfc009980>
 800a63c:	027fffc4 	movi	r9,-1
 800a640:	10c00047 	ldb	r3,1(r2)
 800a644:	003b8806 	br	8009468 <__alt_data_end+0xfc009468>

0800a648 <__vfiprintf_internal>:
 800a648:	2007883a 	mov	r3,r4
 800a64c:	010200b4 	movhi	r4,2050
 800a650:	21359f04 	addi	r4,r4,-10628
 800a654:	21000017 	ldw	r4,0(r4)
 800a658:	2805883a 	mov	r2,r5
 800a65c:	300f883a 	mov	r7,r6
 800a660:	180b883a 	mov	r5,r3
 800a664:	100d883a 	mov	r6,r2
 800a668:	80092ec1 	jmpi	80092ec <___vfiprintf_internal_r>

0800a66c <_write_r>:
 800a66c:	defffd04 	addi	sp,sp,-12
 800a670:	dc000015 	stw	r16,0(sp)
 800a674:	040200b4 	movhi	r16,2050
 800a678:	dc400115 	stw	r17,4(sp)
 800a67c:	843c7f04 	addi	r16,r16,-3588
 800a680:	2023883a 	mov	r17,r4
 800a684:	2809883a 	mov	r4,r5
 800a688:	300b883a 	mov	r5,r6
 800a68c:	380d883a 	mov	r6,r7
 800a690:	dfc00215 	stw	ra,8(sp)
 800a694:	80000015 	stw	zero,0(r16)
 800a698:	800eacc0 	call	800eacc <write>
 800a69c:	00ffffc4 	movi	r3,-1
 800a6a0:	10c00526 	beq	r2,r3,800a6b8 <_write_r+0x4c>
 800a6a4:	dfc00217 	ldw	ra,8(sp)
 800a6a8:	dc400117 	ldw	r17,4(sp)
 800a6ac:	dc000017 	ldw	r16,0(sp)
 800a6b0:	dec00304 	addi	sp,sp,12
 800a6b4:	f800283a 	ret
 800a6b8:	80c00017 	ldw	r3,0(r16)
 800a6bc:	183ff926 	beq	r3,zero,800a6a4 <__alt_data_end+0xfc00a6a4>
 800a6c0:	88c00015 	stw	r3,0(r17)
 800a6c4:	003ff706 	br	800a6a4 <__alt_data_end+0xfc00a6a4>

0800a6c8 <_close_r>:
 800a6c8:	defffd04 	addi	sp,sp,-12
 800a6cc:	dc000015 	stw	r16,0(sp)
 800a6d0:	040200b4 	movhi	r16,2050
 800a6d4:	dc400115 	stw	r17,4(sp)
 800a6d8:	843c7f04 	addi	r16,r16,-3588
 800a6dc:	2023883a 	mov	r17,r4
 800a6e0:	2809883a 	mov	r4,r5
 800a6e4:	dfc00215 	stw	ra,8(sp)
 800a6e8:	80000015 	stw	zero,0(r16)
 800a6ec:	800e2700 	call	800e270 <close>
 800a6f0:	00ffffc4 	movi	r3,-1
 800a6f4:	10c00526 	beq	r2,r3,800a70c <_close_r+0x44>
 800a6f8:	dfc00217 	ldw	ra,8(sp)
 800a6fc:	dc400117 	ldw	r17,4(sp)
 800a700:	dc000017 	ldw	r16,0(sp)
 800a704:	dec00304 	addi	sp,sp,12
 800a708:	f800283a 	ret
 800a70c:	80c00017 	ldw	r3,0(r16)
 800a710:	183ff926 	beq	r3,zero,800a6f8 <__alt_data_end+0xfc00a6f8>
 800a714:	88c00015 	stw	r3,0(r17)
 800a718:	003ff706 	br	800a6f8 <__alt_data_end+0xfc00a6f8>

0800a71c <_calloc_r>:
 800a71c:	298b383a 	mul	r5,r5,r6
 800a720:	defffe04 	addi	sp,sp,-8
 800a724:	dc000015 	stw	r16,0(sp)
 800a728:	dfc00115 	stw	ra,4(sp)
 800a72c:	8006dbc0 	call	8006dbc <_malloc_r>
 800a730:	1021883a 	mov	r16,r2
 800a734:	10002826 	beq	r2,zero,800a7d8 <_calloc_r+0xbc>
 800a738:	11bfff17 	ldw	r6,-4(r2)
 800a73c:	00bfff04 	movi	r2,-4
 800a740:	00c00904 	movi	r3,36
 800a744:	308c703a 	and	r6,r6,r2
 800a748:	308d883a 	add	r6,r6,r2
 800a74c:	19801436 	bltu	r3,r6,800a7a0 <_calloc_r+0x84>
 800a750:	008004c4 	movi	r2,19
 800a754:	11800936 	bltu	r2,r6,800a77c <_calloc_r+0x60>
 800a758:	8005883a 	mov	r2,r16
 800a75c:	10000015 	stw	zero,0(r2)
 800a760:	10000115 	stw	zero,4(r2)
 800a764:	10000215 	stw	zero,8(r2)
 800a768:	8005883a 	mov	r2,r16
 800a76c:	dfc00117 	ldw	ra,4(sp)
 800a770:	dc000017 	ldw	r16,0(sp)
 800a774:	dec00204 	addi	sp,sp,8
 800a778:	f800283a 	ret
 800a77c:	80000015 	stw	zero,0(r16)
 800a780:	80000115 	stw	zero,4(r16)
 800a784:	008006c4 	movi	r2,27
 800a788:	11800d2e 	bgeu	r2,r6,800a7c0 <_calloc_r+0xa4>
 800a78c:	80000215 	stw	zero,8(r16)
 800a790:	80000315 	stw	zero,12(r16)
 800a794:	30c00c26 	beq	r6,r3,800a7c8 <_calloc_r+0xac>
 800a798:	80800404 	addi	r2,r16,16
 800a79c:	003fef06 	br	800a75c <__alt_data_end+0xfc00a75c>
 800a7a0:	8009883a 	mov	r4,r16
 800a7a4:	000b883a 	mov	r5,zero
 800a7a8:	80078e00 	call	80078e0 <memset>
 800a7ac:	8005883a 	mov	r2,r16
 800a7b0:	dfc00117 	ldw	ra,4(sp)
 800a7b4:	dc000017 	ldw	r16,0(sp)
 800a7b8:	dec00204 	addi	sp,sp,8
 800a7bc:	f800283a 	ret
 800a7c0:	80800204 	addi	r2,r16,8
 800a7c4:	003fe506 	br	800a75c <__alt_data_end+0xfc00a75c>
 800a7c8:	80000415 	stw	zero,16(r16)
 800a7cc:	80800604 	addi	r2,r16,24
 800a7d0:	80000515 	stw	zero,20(r16)
 800a7d4:	003fe106 	br	800a75c <__alt_data_end+0xfc00a75c>
 800a7d8:	0005883a 	mov	r2,zero
 800a7dc:	003fe306 	br	800a76c <__alt_data_end+0xfc00a76c>

0800a7e0 <_fclose_r>:
 800a7e0:	28003226 	beq	r5,zero,800a8ac <_fclose_r+0xcc>
 800a7e4:	defffc04 	addi	sp,sp,-16
 800a7e8:	dc400115 	stw	r17,4(sp)
 800a7ec:	2023883a 	mov	r17,r4
 800a7f0:	dc000015 	stw	r16,0(sp)
 800a7f4:	dfc00315 	stw	ra,12(sp)
 800a7f8:	dc800215 	stw	r18,8(sp)
 800a7fc:	2821883a 	mov	r16,r5
 800a800:	80060bc0 	call	80060bc <__sfp_lock_acquire>
 800a804:	88000226 	beq	r17,zero,800a810 <_fclose_r+0x30>
 800a808:	88800e17 	ldw	r2,56(r17)
 800a80c:	10002926 	beq	r2,zero,800a8b4 <_fclose_r+0xd4>
 800a810:	8080030f 	ldh	r2,12(r16)
 800a814:	10002226 	beq	r2,zero,800a8a0 <_fclose_r+0xc0>
 800a818:	8809883a 	mov	r4,r17
 800a81c:	800b883a 	mov	r5,r16
 800a820:	8005b040 	call	8005b04 <_fflush_r>
 800a824:	1025883a 	mov	r18,r2
 800a828:	80800b17 	ldw	r2,44(r16)
 800a82c:	10000426 	beq	r2,zero,800a840 <_fclose_r+0x60>
 800a830:	81400717 	ldw	r5,28(r16)
 800a834:	8809883a 	mov	r4,r17
 800a838:	103ee83a 	callr	r2
 800a83c:	10002616 	blt	r2,zero,800a8d8 <_fclose_r+0xf8>
 800a840:	8080030b 	ldhu	r2,12(r16)
 800a844:	1080200c 	andi	r2,r2,128
 800a848:	10001f1e 	bne	r2,zero,800a8c8 <_fclose_r+0xe8>
 800a84c:	81400c17 	ldw	r5,48(r16)
 800a850:	28000526 	beq	r5,zero,800a868 <_fclose_r+0x88>
 800a854:	80801004 	addi	r2,r16,64
 800a858:	28800226 	beq	r5,r2,800a864 <_fclose_r+0x84>
 800a85c:	8809883a 	mov	r4,r17
 800a860:	80062200 	call	8006220 <_free_r>
 800a864:	80000c15 	stw	zero,48(r16)
 800a868:	81401117 	ldw	r5,68(r16)
 800a86c:	28000326 	beq	r5,zero,800a87c <_fclose_r+0x9c>
 800a870:	8809883a 	mov	r4,r17
 800a874:	80062200 	call	8006220 <_free_r>
 800a878:	80001115 	stw	zero,68(r16)
 800a87c:	8000030d 	sth	zero,12(r16)
 800a880:	80060c00 	call	80060c0 <__sfp_lock_release>
 800a884:	9005883a 	mov	r2,r18
 800a888:	dfc00317 	ldw	ra,12(sp)
 800a88c:	dc800217 	ldw	r18,8(sp)
 800a890:	dc400117 	ldw	r17,4(sp)
 800a894:	dc000017 	ldw	r16,0(sp)
 800a898:	dec00404 	addi	sp,sp,16
 800a89c:	f800283a 	ret
 800a8a0:	80060c00 	call	80060c0 <__sfp_lock_release>
 800a8a4:	0005883a 	mov	r2,zero
 800a8a8:	003ff706 	br	800a888 <__alt_data_end+0xfc00a888>
 800a8ac:	0005883a 	mov	r2,zero
 800a8b0:	f800283a 	ret
 800a8b4:	8809883a 	mov	r4,r17
 800a8b8:	80060ac0 	call	80060ac <__sinit>
 800a8bc:	8080030f 	ldh	r2,12(r16)
 800a8c0:	103fd51e 	bne	r2,zero,800a818 <__alt_data_end+0xfc00a818>
 800a8c4:	003ff606 	br	800a8a0 <__alt_data_end+0xfc00a8a0>
 800a8c8:	81400417 	ldw	r5,16(r16)
 800a8cc:	8809883a 	mov	r4,r17
 800a8d0:	80062200 	call	8006220 <_free_r>
 800a8d4:	003fdd06 	br	800a84c <__alt_data_end+0xfc00a84c>
 800a8d8:	04bfffc4 	movi	r18,-1
 800a8dc:	003fd806 	br	800a840 <__alt_data_end+0xfc00a840>

0800a8e0 <fclose>:
 800a8e0:	008200b4 	movhi	r2,2050
 800a8e4:	10b59f04 	addi	r2,r2,-10628
 800a8e8:	200b883a 	mov	r5,r4
 800a8ec:	11000017 	ldw	r4,0(r2)
 800a8f0:	800a7e01 	jmpi	800a7e0 <_fclose_r>

0800a8f4 <_fputwc_r>:
 800a8f4:	3080030b 	ldhu	r2,12(r6)
 800a8f8:	defff804 	addi	sp,sp,-32
 800a8fc:	dcc00415 	stw	r19,16(sp)
 800a900:	dc800315 	stw	r18,12(sp)
 800a904:	dc000115 	stw	r16,4(sp)
 800a908:	dfc00715 	stw	ra,28(sp)
 800a90c:	dd400615 	stw	r21,24(sp)
 800a910:	dd000515 	stw	r20,20(sp)
 800a914:	dc400215 	stw	r17,8(sp)
 800a918:	10c8000c 	andi	r3,r2,8192
 800a91c:	3021883a 	mov	r16,r6
 800a920:	2027883a 	mov	r19,r4
 800a924:	2825883a 	mov	r18,r5
 800a928:	1800051e 	bne	r3,zero,800a940 <_fputwc_r+0x4c>
 800a92c:	30c01917 	ldw	r3,100(r6)
 800a930:	10880014 	ori	r2,r2,8192
 800a934:	3080030d 	sth	r2,12(r6)
 800a938:	18880014 	ori	r2,r3,8192
 800a93c:	30801915 	stw	r2,100(r6)
 800a940:	8006bac0 	call	8006bac <__locale_mb_cur_max>
 800a944:	00c00044 	movi	r3,1
 800a948:	10c03e26 	beq	r2,r3,800aa44 <_fputwc_r+0x150>
 800a94c:	9809883a 	mov	r4,r19
 800a950:	d80b883a 	mov	r5,sp
 800a954:	900d883a 	mov	r6,r18
 800a958:	81c01704 	addi	r7,r16,92
 800a95c:	800ada40 	call	800ada4 <_wcrtomb_r>
 800a960:	1029883a 	mov	r20,r2
 800a964:	00bfffc4 	movi	r2,-1
 800a968:	a0802026 	beq	r20,r2,800a9ec <_fputwc_r+0xf8>
 800a96c:	d9400003 	ldbu	r5,0(sp)
 800a970:	a0001c26 	beq	r20,zero,800a9e4 <_fputwc_r+0xf0>
 800a974:	0023883a 	mov	r17,zero
 800a978:	05400284 	movi	r21,10
 800a97c:	00000906 	br	800a9a4 <_fputwc_r+0xb0>
 800a980:	80800017 	ldw	r2,0(r16)
 800a984:	11400005 	stb	r5,0(r2)
 800a988:	80c00017 	ldw	r3,0(r16)
 800a98c:	18c00044 	addi	r3,r3,1
 800a990:	80c00015 	stw	r3,0(r16)
 800a994:	8c400044 	addi	r17,r17,1
 800a998:	dc45883a 	add	r2,sp,r17
 800a99c:	8d00112e 	bgeu	r17,r20,800a9e4 <_fputwc_r+0xf0>
 800a9a0:	11400003 	ldbu	r5,0(r2)
 800a9a4:	80c00217 	ldw	r3,8(r16)
 800a9a8:	18ffffc4 	addi	r3,r3,-1
 800a9ac:	80c00215 	stw	r3,8(r16)
 800a9b0:	183ff30e 	bge	r3,zero,800a980 <__alt_data_end+0xfc00a980>
 800a9b4:	80800617 	ldw	r2,24(r16)
 800a9b8:	18801916 	blt	r3,r2,800aa20 <_fputwc_r+0x12c>
 800a9bc:	80800017 	ldw	r2,0(r16)
 800a9c0:	11400005 	stb	r5,0(r2)
 800a9c4:	80800017 	ldw	r2,0(r16)
 800a9c8:	10c00003 	ldbu	r3,0(r2)
 800a9cc:	10800044 	addi	r2,r2,1
 800a9d0:	1d402326 	beq	r3,r21,800aa60 <_fputwc_r+0x16c>
 800a9d4:	80800015 	stw	r2,0(r16)
 800a9d8:	8c400044 	addi	r17,r17,1
 800a9dc:	dc45883a 	add	r2,sp,r17
 800a9e0:	8d3fef36 	bltu	r17,r20,800a9a0 <__alt_data_end+0xfc00a9a0>
 800a9e4:	9005883a 	mov	r2,r18
 800a9e8:	00000406 	br	800a9fc <_fputwc_r+0x108>
 800a9ec:	80c0030b 	ldhu	r3,12(r16)
 800a9f0:	a005883a 	mov	r2,r20
 800a9f4:	18c01014 	ori	r3,r3,64
 800a9f8:	80c0030d 	sth	r3,12(r16)
 800a9fc:	dfc00717 	ldw	ra,28(sp)
 800aa00:	dd400617 	ldw	r21,24(sp)
 800aa04:	dd000517 	ldw	r20,20(sp)
 800aa08:	dcc00417 	ldw	r19,16(sp)
 800aa0c:	dc800317 	ldw	r18,12(sp)
 800aa10:	dc400217 	ldw	r17,8(sp)
 800aa14:	dc000117 	ldw	r16,4(sp)
 800aa18:	dec00804 	addi	sp,sp,32
 800aa1c:	f800283a 	ret
 800aa20:	9809883a 	mov	r4,r19
 800aa24:	29403fcc 	andi	r5,r5,255
 800aa28:	800d883a 	mov	r6,r16
 800aa2c:	800ac340 	call	800ac34 <__swbuf_r>
 800aa30:	10bfffe0 	cmpeqi	r2,r2,-1
 800aa34:	10803fcc 	andi	r2,r2,255
 800aa38:	103fd626 	beq	r2,zero,800a994 <__alt_data_end+0xfc00a994>
 800aa3c:	00bfffc4 	movi	r2,-1
 800aa40:	003fee06 	br	800a9fc <__alt_data_end+0xfc00a9fc>
 800aa44:	90ffffc4 	addi	r3,r18,-1
 800aa48:	01003f84 	movi	r4,254
 800aa4c:	20ffbf36 	bltu	r4,r3,800a94c <__alt_data_end+0xfc00a94c>
 800aa50:	900b883a 	mov	r5,r18
 800aa54:	dc800005 	stb	r18,0(sp)
 800aa58:	1029883a 	mov	r20,r2
 800aa5c:	003fc506 	br	800a974 <__alt_data_end+0xfc00a974>
 800aa60:	9809883a 	mov	r4,r19
 800aa64:	a80b883a 	mov	r5,r21
 800aa68:	800d883a 	mov	r6,r16
 800aa6c:	800ac340 	call	800ac34 <__swbuf_r>
 800aa70:	10bfffe0 	cmpeqi	r2,r2,-1
 800aa74:	003fef06 	br	800aa34 <__alt_data_end+0xfc00aa34>

0800aa78 <fputwc>:
 800aa78:	defffc04 	addi	sp,sp,-16
 800aa7c:	dc000115 	stw	r16,4(sp)
 800aa80:	040200b4 	movhi	r16,2050
 800aa84:	84359f04 	addi	r16,r16,-10628
 800aa88:	dc400215 	stw	r17,8(sp)
 800aa8c:	2023883a 	mov	r17,r4
 800aa90:	81000017 	ldw	r4,0(r16)
 800aa94:	dfc00315 	stw	ra,12(sp)
 800aa98:	280d883a 	mov	r6,r5
 800aa9c:	20000626 	beq	r4,zero,800aab8 <fputwc+0x40>
 800aaa0:	20800e17 	ldw	r2,56(r4)
 800aaa4:	1000041e 	bne	r2,zero,800aab8 <fputwc+0x40>
 800aaa8:	d9400015 	stw	r5,0(sp)
 800aaac:	80060ac0 	call	80060ac <__sinit>
 800aab0:	81000017 	ldw	r4,0(r16)
 800aab4:	d9800017 	ldw	r6,0(sp)
 800aab8:	880b883a 	mov	r5,r17
 800aabc:	dfc00317 	ldw	ra,12(sp)
 800aac0:	dc400217 	ldw	r17,8(sp)
 800aac4:	dc000117 	ldw	r16,4(sp)
 800aac8:	dec00404 	addi	sp,sp,16
 800aacc:	800a8f41 	jmpi	800a8f4 <_fputwc_r>

0800aad0 <_fstat_r>:
 800aad0:	defffd04 	addi	sp,sp,-12
 800aad4:	dc000015 	stw	r16,0(sp)
 800aad8:	040200b4 	movhi	r16,2050
 800aadc:	dc400115 	stw	r17,4(sp)
 800aae0:	843c7f04 	addi	r16,r16,-3588
 800aae4:	2023883a 	mov	r17,r4
 800aae8:	2809883a 	mov	r4,r5
 800aaec:	300b883a 	mov	r5,r6
 800aaf0:	dfc00215 	stw	ra,8(sp)
 800aaf4:	80000015 	stw	zero,0(r16)
 800aaf8:	800e3bc0 	call	800e3bc <fstat>
 800aafc:	00ffffc4 	movi	r3,-1
 800ab00:	10c00526 	beq	r2,r3,800ab18 <_fstat_r+0x48>
 800ab04:	dfc00217 	ldw	ra,8(sp)
 800ab08:	dc400117 	ldw	r17,4(sp)
 800ab0c:	dc000017 	ldw	r16,0(sp)
 800ab10:	dec00304 	addi	sp,sp,12
 800ab14:	f800283a 	ret
 800ab18:	80c00017 	ldw	r3,0(r16)
 800ab1c:	183ff926 	beq	r3,zero,800ab04 <__alt_data_end+0xfc00ab04>
 800ab20:	88c00015 	stw	r3,0(r17)
 800ab24:	003ff706 	br	800ab04 <__alt_data_end+0xfc00ab04>

0800ab28 <_isatty_r>:
 800ab28:	defffd04 	addi	sp,sp,-12
 800ab2c:	dc000015 	stw	r16,0(sp)
 800ab30:	040200b4 	movhi	r16,2050
 800ab34:	dc400115 	stw	r17,4(sp)
 800ab38:	843c7f04 	addi	r16,r16,-3588
 800ab3c:	2023883a 	mov	r17,r4
 800ab40:	2809883a 	mov	r4,r5
 800ab44:	dfc00215 	stw	ra,8(sp)
 800ab48:	80000015 	stw	zero,0(r16)
 800ab4c:	800e4bc0 	call	800e4bc <isatty>
 800ab50:	00ffffc4 	movi	r3,-1
 800ab54:	10c00526 	beq	r2,r3,800ab6c <_isatty_r+0x44>
 800ab58:	dfc00217 	ldw	ra,8(sp)
 800ab5c:	dc400117 	ldw	r17,4(sp)
 800ab60:	dc000017 	ldw	r16,0(sp)
 800ab64:	dec00304 	addi	sp,sp,12
 800ab68:	f800283a 	ret
 800ab6c:	80c00017 	ldw	r3,0(r16)
 800ab70:	183ff926 	beq	r3,zero,800ab58 <__alt_data_end+0xfc00ab58>
 800ab74:	88c00015 	stw	r3,0(r17)
 800ab78:	003ff706 	br	800ab58 <__alt_data_end+0xfc00ab58>

0800ab7c <_lseek_r>:
 800ab7c:	defffd04 	addi	sp,sp,-12
 800ab80:	dc000015 	stw	r16,0(sp)
 800ab84:	040200b4 	movhi	r16,2050
 800ab88:	dc400115 	stw	r17,4(sp)
 800ab8c:	843c7f04 	addi	r16,r16,-3588
 800ab90:	2023883a 	mov	r17,r4
 800ab94:	2809883a 	mov	r4,r5
 800ab98:	300b883a 	mov	r5,r6
 800ab9c:	380d883a 	mov	r6,r7
 800aba0:	dfc00215 	stw	ra,8(sp)
 800aba4:	80000015 	stw	zero,0(r16)
 800aba8:	800e6940 	call	800e694 <lseek>
 800abac:	00ffffc4 	movi	r3,-1
 800abb0:	10c00526 	beq	r2,r3,800abc8 <_lseek_r+0x4c>
 800abb4:	dfc00217 	ldw	ra,8(sp)
 800abb8:	dc400117 	ldw	r17,4(sp)
 800abbc:	dc000017 	ldw	r16,0(sp)
 800abc0:	dec00304 	addi	sp,sp,12
 800abc4:	f800283a 	ret
 800abc8:	80c00017 	ldw	r3,0(r16)
 800abcc:	183ff926 	beq	r3,zero,800abb4 <__alt_data_end+0xfc00abb4>
 800abd0:	88c00015 	stw	r3,0(r17)
 800abd4:	003ff706 	br	800abb4 <__alt_data_end+0xfc00abb4>

0800abd8 <_read_r>:
 800abd8:	defffd04 	addi	sp,sp,-12
 800abdc:	dc000015 	stw	r16,0(sp)
 800abe0:	040200b4 	movhi	r16,2050
 800abe4:	dc400115 	stw	r17,4(sp)
 800abe8:	843c7f04 	addi	r16,r16,-3588
 800abec:	2023883a 	mov	r17,r4
 800abf0:	2809883a 	mov	r4,r5
 800abf4:	300b883a 	mov	r5,r6
 800abf8:	380d883a 	mov	r6,r7
 800abfc:	dfc00215 	stw	ra,8(sp)
 800ac00:	80000015 	stw	zero,0(r16)
 800ac04:	800e8700 	call	800e870 <read>
 800ac08:	00ffffc4 	movi	r3,-1
 800ac0c:	10c00526 	beq	r2,r3,800ac24 <_read_r+0x4c>
 800ac10:	dfc00217 	ldw	ra,8(sp)
 800ac14:	dc400117 	ldw	r17,4(sp)
 800ac18:	dc000017 	ldw	r16,0(sp)
 800ac1c:	dec00304 	addi	sp,sp,12
 800ac20:	f800283a 	ret
 800ac24:	80c00017 	ldw	r3,0(r16)
 800ac28:	183ff926 	beq	r3,zero,800ac10 <__alt_data_end+0xfc00ac10>
 800ac2c:	88c00015 	stw	r3,0(r17)
 800ac30:	003ff706 	br	800ac10 <__alt_data_end+0xfc00ac10>

0800ac34 <__swbuf_r>:
 800ac34:	defffc04 	addi	sp,sp,-16
 800ac38:	dc800215 	stw	r18,8(sp)
 800ac3c:	dc400115 	stw	r17,4(sp)
 800ac40:	dc000015 	stw	r16,0(sp)
 800ac44:	dfc00315 	stw	ra,12(sp)
 800ac48:	2025883a 	mov	r18,r4
 800ac4c:	2823883a 	mov	r17,r5
 800ac50:	3021883a 	mov	r16,r6
 800ac54:	20000226 	beq	r4,zero,800ac60 <__swbuf_r+0x2c>
 800ac58:	20800e17 	ldw	r2,56(r4)
 800ac5c:	10004126 	beq	r2,zero,800ad64 <__swbuf_r+0x130>
 800ac60:	80c00617 	ldw	r3,24(r16)
 800ac64:	8180030b 	ldhu	r6,12(r16)
 800ac68:	80c00215 	stw	r3,8(r16)
 800ac6c:	30c0020c 	andi	r3,r6,8
 800ac70:	18003526 	beq	r3,zero,800ad48 <__swbuf_r+0x114>
 800ac74:	80c00417 	ldw	r3,16(r16)
 800ac78:	18003326 	beq	r3,zero,800ad48 <__swbuf_r+0x114>
 800ac7c:	3088000c 	andi	r2,r6,8192
 800ac80:	8c403fcc 	andi	r17,r17,255
 800ac84:	10001726 	beq	r2,zero,800ace4 <__swbuf_r+0xb0>
 800ac88:	80800017 	ldw	r2,0(r16)
 800ac8c:	81000517 	ldw	r4,20(r16)
 800ac90:	10c7c83a 	sub	r3,r2,r3
 800ac94:	19001d0e 	bge	r3,r4,800ad0c <__swbuf_r+0xd8>
 800ac98:	18c00044 	addi	r3,r3,1
 800ac9c:	81400217 	ldw	r5,8(r16)
 800aca0:	11000044 	addi	r4,r2,1
 800aca4:	81000015 	stw	r4,0(r16)
 800aca8:	297fffc4 	addi	r5,r5,-1
 800acac:	81400215 	stw	r5,8(r16)
 800acb0:	14400005 	stb	r17,0(r2)
 800acb4:	80800517 	ldw	r2,20(r16)
 800acb8:	10c01d26 	beq	r2,r3,800ad30 <__swbuf_r+0xfc>
 800acbc:	8080030b 	ldhu	r2,12(r16)
 800acc0:	1080004c 	andi	r2,r2,1
 800acc4:	1000181e 	bne	r2,zero,800ad28 <__swbuf_r+0xf4>
 800acc8:	8805883a 	mov	r2,r17
 800accc:	dfc00317 	ldw	ra,12(sp)
 800acd0:	dc800217 	ldw	r18,8(sp)
 800acd4:	dc400117 	ldw	r17,4(sp)
 800acd8:	dc000017 	ldw	r16,0(sp)
 800acdc:	dec00404 	addi	sp,sp,16
 800ace0:	f800283a 	ret
 800ace4:	81001917 	ldw	r4,100(r16)
 800ace8:	00b7ffc4 	movi	r2,-8193
 800acec:	31880014 	ori	r6,r6,8192
 800acf0:	2084703a 	and	r2,r4,r2
 800acf4:	80801915 	stw	r2,100(r16)
 800acf8:	80800017 	ldw	r2,0(r16)
 800acfc:	81000517 	ldw	r4,20(r16)
 800ad00:	8180030d 	sth	r6,12(r16)
 800ad04:	10c7c83a 	sub	r3,r2,r3
 800ad08:	193fe316 	blt	r3,r4,800ac98 <__alt_data_end+0xfc00ac98>
 800ad0c:	9009883a 	mov	r4,r18
 800ad10:	800b883a 	mov	r5,r16
 800ad14:	8005b040 	call	8005b04 <_fflush_r>
 800ad18:	1000091e 	bne	r2,zero,800ad40 <__swbuf_r+0x10c>
 800ad1c:	80800017 	ldw	r2,0(r16)
 800ad20:	00c00044 	movi	r3,1
 800ad24:	003fdd06 	br	800ac9c <__alt_data_end+0xfc00ac9c>
 800ad28:	00800284 	movi	r2,10
 800ad2c:	88bfe61e 	bne	r17,r2,800acc8 <__alt_data_end+0xfc00acc8>
 800ad30:	9009883a 	mov	r4,r18
 800ad34:	800b883a 	mov	r5,r16
 800ad38:	8005b040 	call	8005b04 <_fflush_r>
 800ad3c:	103fe226 	beq	r2,zero,800acc8 <__alt_data_end+0xfc00acc8>
 800ad40:	00bfffc4 	movi	r2,-1
 800ad44:	003fe106 	br	800accc <__alt_data_end+0xfc00accc>
 800ad48:	9009883a 	mov	r4,r18
 800ad4c:	800b883a 	mov	r5,r16
 800ad50:	80040ac0 	call	80040ac <__swsetup_r>
 800ad54:	1000051e 	bne	r2,zero,800ad6c <__swbuf_r+0x138>
 800ad58:	8180030b 	ldhu	r6,12(r16)
 800ad5c:	80c00417 	ldw	r3,16(r16)
 800ad60:	003fc606 	br	800ac7c <__alt_data_end+0xfc00ac7c>
 800ad64:	80060ac0 	call	80060ac <__sinit>
 800ad68:	003fbd06 	br	800ac60 <__alt_data_end+0xfc00ac60>
 800ad6c:	80c0030b 	ldhu	r3,12(r16)
 800ad70:	00bfffc4 	movi	r2,-1
 800ad74:	18c01014 	ori	r3,r3,64
 800ad78:	80c0030d 	sth	r3,12(r16)
 800ad7c:	00c00244 	movi	r3,9
 800ad80:	90c00015 	stw	r3,0(r18)
 800ad84:	003fd106 	br	800accc <__alt_data_end+0xfc00accc>

0800ad88 <__swbuf>:
 800ad88:	00c200b4 	movhi	r3,2050
 800ad8c:	18f59f04 	addi	r3,r3,-10628
 800ad90:	2005883a 	mov	r2,r4
 800ad94:	19000017 	ldw	r4,0(r3)
 800ad98:	280d883a 	mov	r6,r5
 800ad9c:	100b883a 	mov	r5,r2
 800ada0:	800ac341 	jmpi	800ac34 <__swbuf_r>

0800ada4 <_wcrtomb_r>:
 800ada4:	defff604 	addi	sp,sp,-40
 800ada8:	008200b4 	movhi	r2,2050
 800adac:	dc800815 	stw	r18,32(sp)
 800adb0:	dc400715 	stw	r17,28(sp)
 800adb4:	dc000615 	stw	r16,24(sp)
 800adb8:	10b5a304 	addi	r2,r2,-10612
 800adbc:	dfc00915 	stw	ra,36(sp)
 800adc0:	2021883a 	mov	r16,r4
 800adc4:	3823883a 	mov	r17,r7
 800adc8:	14800017 	ldw	r18,0(r2)
 800adcc:	28001426 	beq	r5,zero,800ae20 <_wcrtomb_r+0x7c>
 800add0:	d9400415 	stw	r5,16(sp)
 800add4:	d9800515 	stw	r6,20(sp)
 800add8:	8006ba00 	call	8006ba0 <__locale_charset>
 800addc:	d9400417 	ldw	r5,16(sp)
 800ade0:	d9800517 	ldw	r6,20(sp)
 800ade4:	8009883a 	mov	r4,r16
 800ade8:	dc400015 	stw	r17,0(sp)
 800adec:	100f883a 	mov	r7,r2
 800adf0:	903ee83a 	callr	r18
 800adf4:	00ffffc4 	movi	r3,-1
 800adf8:	10c0031e 	bne	r2,r3,800ae08 <_wcrtomb_r+0x64>
 800adfc:	88000015 	stw	zero,0(r17)
 800ae00:	00c02284 	movi	r3,138
 800ae04:	80c00015 	stw	r3,0(r16)
 800ae08:	dfc00917 	ldw	ra,36(sp)
 800ae0c:	dc800817 	ldw	r18,32(sp)
 800ae10:	dc400717 	ldw	r17,28(sp)
 800ae14:	dc000617 	ldw	r16,24(sp)
 800ae18:	dec00a04 	addi	sp,sp,40
 800ae1c:	f800283a 	ret
 800ae20:	8006ba00 	call	8006ba0 <__locale_charset>
 800ae24:	8009883a 	mov	r4,r16
 800ae28:	dc400015 	stw	r17,0(sp)
 800ae2c:	d9400104 	addi	r5,sp,4
 800ae30:	000d883a 	mov	r6,zero
 800ae34:	100f883a 	mov	r7,r2
 800ae38:	903ee83a 	callr	r18
 800ae3c:	003fed06 	br	800adf4 <__alt_data_end+0xfc00adf4>

0800ae40 <wcrtomb>:
 800ae40:	defff504 	addi	sp,sp,-44
 800ae44:	dc400515 	stw	r17,20(sp)
 800ae48:	dc000415 	stw	r16,16(sp)
 800ae4c:	dfc00a15 	stw	ra,40(sp)
 800ae50:	dd400915 	stw	r21,36(sp)
 800ae54:	dd000815 	stw	r20,32(sp)
 800ae58:	dcc00715 	stw	r19,28(sp)
 800ae5c:	dc800615 	stw	r18,24(sp)
 800ae60:	2021883a 	mov	r16,r4
 800ae64:	3023883a 	mov	r17,r6
 800ae68:	20001d26 	beq	r4,zero,800aee0 <wcrtomb+0xa0>
 800ae6c:	048200b4 	movhi	r18,2050
 800ae70:	94b59f04 	addi	r18,r18,-10628
 800ae74:	008200b4 	movhi	r2,2050
 800ae78:	95400017 	ldw	r21,0(r18)
 800ae7c:	10b5a304 	addi	r2,r2,-10612
 800ae80:	15000017 	ldw	r20,0(r2)
 800ae84:	2827883a 	mov	r19,r5
 800ae88:	8006ba00 	call	8006ba0 <__locale_charset>
 800ae8c:	a809883a 	mov	r4,r21
 800ae90:	dc400015 	stw	r17,0(sp)
 800ae94:	800b883a 	mov	r5,r16
 800ae98:	980d883a 	mov	r6,r19
 800ae9c:	100f883a 	mov	r7,r2
 800aea0:	a03ee83a 	callr	r20
 800aea4:	00ffffc4 	movi	r3,-1
 800aea8:	10c0041e 	bne	r2,r3,800aebc <wcrtomb+0x7c>
 800aeac:	90c00017 	ldw	r3,0(r18)
 800aeb0:	01002284 	movi	r4,138
 800aeb4:	88000015 	stw	zero,0(r17)
 800aeb8:	19000015 	stw	r4,0(r3)
 800aebc:	dfc00a17 	ldw	ra,40(sp)
 800aec0:	dd400917 	ldw	r21,36(sp)
 800aec4:	dd000817 	ldw	r20,32(sp)
 800aec8:	dcc00717 	ldw	r19,28(sp)
 800aecc:	dc800617 	ldw	r18,24(sp)
 800aed0:	dc400517 	ldw	r17,20(sp)
 800aed4:	dc000417 	ldw	r16,16(sp)
 800aed8:	dec00b04 	addi	sp,sp,44
 800aedc:	f800283a 	ret
 800aee0:	048200b4 	movhi	r18,2050
 800aee4:	94b59f04 	addi	r18,r18,-10628
 800aee8:	008200b4 	movhi	r2,2050
 800aeec:	94c00017 	ldw	r19,0(r18)
 800aef0:	10b5a304 	addi	r2,r2,-10612
 800aef4:	14000017 	ldw	r16,0(r2)
 800aef8:	8006ba00 	call	8006ba0 <__locale_charset>
 800aefc:	9809883a 	mov	r4,r19
 800af00:	dc400015 	stw	r17,0(sp)
 800af04:	d9400104 	addi	r5,sp,4
 800af08:	000d883a 	mov	r6,zero
 800af0c:	100f883a 	mov	r7,r2
 800af10:	803ee83a 	callr	r16
 800af14:	003fe306 	br	800aea4 <__alt_data_end+0xfc00aea4>

0800af18 <__ascii_wctomb>:
 800af18:	28000526 	beq	r5,zero,800af30 <__ascii_wctomb+0x18>
 800af1c:	00803fc4 	movi	r2,255
 800af20:	11800536 	bltu	r2,r6,800af38 <__ascii_wctomb+0x20>
 800af24:	29800005 	stb	r6,0(r5)
 800af28:	00800044 	movi	r2,1
 800af2c:	f800283a 	ret
 800af30:	0005883a 	mov	r2,zero
 800af34:	f800283a 	ret
 800af38:	00802284 	movi	r2,138
 800af3c:	20800015 	stw	r2,0(r4)
 800af40:	00bfffc4 	movi	r2,-1
 800af44:	f800283a 	ret

0800af48 <_wctomb_r>:
 800af48:	008200b4 	movhi	r2,2050
 800af4c:	defff904 	addi	sp,sp,-28
 800af50:	10b5a304 	addi	r2,r2,-10612
 800af54:	dfc00615 	stw	ra,24(sp)
 800af58:	dc400515 	stw	r17,20(sp)
 800af5c:	dc000415 	stw	r16,16(sp)
 800af60:	3823883a 	mov	r17,r7
 800af64:	14000017 	ldw	r16,0(r2)
 800af68:	d9000115 	stw	r4,4(sp)
 800af6c:	d9400215 	stw	r5,8(sp)
 800af70:	d9800315 	stw	r6,12(sp)
 800af74:	8006ba00 	call	8006ba0 <__locale_charset>
 800af78:	d9000117 	ldw	r4,4(sp)
 800af7c:	d9400217 	ldw	r5,8(sp)
 800af80:	d9800317 	ldw	r6,12(sp)
 800af84:	dc400015 	stw	r17,0(sp)
 800af88:	100f883a 	mov	r7,r2
 800af8c:	803ee83a 	callr	r16
 800af90:	dfc00617 	ldw	ra,24(sp)
 800af94:	dc400517 	ldw	r17,20(sp)
 800af98:	dc000417 	ldw	r16,16(sp)
 800af9c:	dec00704 	addi	sp,sp,28
 800afa0:	f800283a 	ret

0800afa4 <__udivdi3>:
 800afa4:	defff504 	addi	sp,sp,-44
 800afa8:	dcc00415 	stw	r19,16(sp)
 800afac:	dc000115 	stw	r16,4(sp)
 800afb0:	dfc00a15 	stw	ra,40(sp)
 800afb4:	df000915 	stw	fp,36(sp)
 800afb8:	ddc00815 	stw	r23,32(sp)
 800afbc:	dd800715 	stw	r22,28(sp)
 800afc0:	dd400615 	stw	r21,24(sp)
 800afc4:	dd000515 	stw	r20,20(sp)
 800afc8:	dc800315 	stw	r18,12(sp)
 800afcc:	dc400215 	stw	r17,8(sp)
 800afd0:	2027883a 	mov	r19,r4
 800afd4:	2821883a 	mov	r16,r5
 800afd8:	3800421e 	bne	r7,zero,800b0e4 <__udivdi3+0x140>
 800afdc:	3025883a 	mov	r18,r6
 800afe0:	2023883a 	mov	r17,r4
 800afe4:	2980542e 	bgeu	r5,r6,800b138 <__udivdi3+0x194>
 800afe8:	00bfffd4 	movui	r2,65535
 800afec:	282d883a 	mov	r22,r5
 800aff0:	1180a836 	bltu	r2,r6,800b294 <__udivdi3+0x2f0>
 800aff4:	00803fc4 	movi	r2,255
 800aff8:	1181422e 	bgeu	r2,r6,800b504 <__udivdi3+0x560>
 800affc:	00800204 	movi	r2,8
 800b000:	1007883a 	mov	r3,r2
 800b004:	3084d83a 	srl	r2,r6,r2
 800b008:	010200b4 	movhi	r4,2050
 800b00c:	212e9404 	addi	r4,r4,-17840
 800b010:	2085883a 	add	r2,r4,r2
 800b014:	10800003 	ldbu	r2,0(r2)
 800b018:	10c7883a 	add	r3,r2,r3
 800b01c:	00800804 	movi	r2,32
 800b020:	10c5c83a 	sub	r2,r2,r3
 800b024:	10000526 	beq	r2,zero,800b03c <__udivdi3+0x98>
 800b028:	80a0983a 	sll	r16,r16,r2
 800b02c:	98c6d83a 	srl	r3,r19,r3
 800b030:	30a4983a 	sll	r18,r6,r2
 800b034:	98a2983a 	sll	r17,r19,r2
 800b038:	80ecb03a 	or	r22,r16,r3
 800b03c:	902ad43a 	srli	r21,r18,16
 800b040:	b009883a 	mov	r4,r22
 800b044:	953fffcc 	andi	r20,r18,65535
 800b048:	a80b883a 	mov	r5,r21
 800b04c:	800bc180 	call	800bc18 <__umodsi3>
 800b050:	b009883a 	mov	r4,r22
 800b054:	a80b883a 	mov	r5,r21
 800b058:	1027883a 	mov	r19,r2
 800b05c:	800bc100 	call	800bc10 <__udivsi3>
 800b060:	1021883a 	mov	r16,r2
 800b064:	8806d43a 	srli	r3,r17,16
 800b068:	9804943a 	slli	r2,r19,16
 800b06c:	8527383a 	mul	r19,r16,r20
 800b070:	10c4b03a 	or	r2,r2,r3
 800b074:	14c0052e 	bgeu	r2,r19,800b08c <__udivdi3+0xe8>
 800b078:	1485883a 	add	r2,r2,r18
 800b07c:	80ffffc4 	addi	r3,r16,-1
 800b080:	14800136 	bltu	r2,r18,800b088 <__udivdi3+0xe4>
 800b084:	14c13436 	bltu	r2,r19,800b558 <__udivdi3+0x5b4>
 800b088:	1821883a 	mov	r16,r3
 800b08c:	14e7c83a 	sub	r19,r2,r19
 800b090:	9809883a 	mov	r4,r19
 800b094:	a80b883a 	mov	r5,r21
 800b098:	800bc180 	call	800bc18 <__umodsi3>
 800b09c:	102d883a 	mov	r22,r2
 800b0a0:	9809883a 	mov	r4,r19
 800b0a4:	a80b883a 	mov	r5,r21
 800b0a8:	800bc100 	call	800bc10 <__udivsi3>
 800b0ac:	b02c943a 	slli	r22,r22,16
 800b0b0:	1529383a 	mul	r20,r2,r20
 800b0b4:	8c7fffcc 	andi	r17,r17,65535
 800b0b8:	b462b03a 	or	r17,r22,r17
 800b0bc:	8d00052e 	bgeu	r17,r20,800b0d4 <__udivdi3+0x130>
 800b0c0:	8ca3883a 	add	r17,r17,r18
 800b0c4:	10ffffc4 	addi	r3,r2,-1
 800b0c8:	8c80f636 	bltu	r17,r18,800b4a4 <__udivdi3+0x500>
 800b0cc:	8d00f52e 	bgeu	r17,r20,800b4a4 <__udivdi3+0x500>
 800b0d0:	10bfff84 	addi	r2,r2,-2
 800b0d4:	8020943a 	slli	r16,r16,16
 800b0d8:	0007883a 	mov	r3,zero
 800b0dc:	1404b03a 	or	r2,r2,r16
 800b0e0:	00005b06 	br	800b250 <__udivdi3+0x2ac>
 800b0e4:	29c05836 	bltu	r5,r7,800b248 <__udivdi3+0x2a4>
 800b0e8:	00bfffd4 	movui	r2,65535
 800b0ec:	11c0642e 	bgeu	r2,r7,800b280 <__udivdi3+0x2dc>
 800b0f0:	00804034 	movhi	r2,256
 800b0f4:	10bfffc4 	addi	r2,r2,-1
 800b0f8:	11c0f32e 	bgeu	r2,r7,800b4c8 <__udivdi3+0x524>
 800b0fc:	00c00604 	movi	r3,24
 800b100:	180b883a 	mov	r5,r3
 800b104:	38c6d83a 	srl	r3,r7,r3
 800b108:	008200b4 	movhi	r2,2050
 800b10c:	10ae9404 	addi	r2,r2,-17840
 800b110:	10c7883a 	add	r3,r2,r3
 800b114:	18c00003 	ldbu	r3,0(r3)
 800b118:	01000804 	movi	r4,32
 800b11c:	1947883a 	add	r3,r3,r5
 800b120:	20e5c83a 	sub	r18,r4,r3
 800b124:	9000661e 	bne	r18,zero,800b2c0 <__udivdi3+0x31c>
 800b128:	3c00f936 	bltu	r7,r16,800b510 <__udivdi3+0x56c>
 800b12c:	9985403a 	cmpgeu	r2,r19,r6
 800b130:	0007883a 	mov	r3,zero
 800b134:	00004606 	br	800b250 <__udivdi3+0x2ac>
 800b138:	3000041e 	bne	r6,zero,800b14c <__udivdi3+0x1a8>
 800b13c:	01000044 	movi	r4,1
 800b140:	000b883a 	mov	r5,zero
 800b144:	800bc100 	call	800bc10 <__udivsi3>
 800b148:	1025883a 	mov	r18,r2
 800b14c:	00bfffd4 	movui	r2,65535
 800b150:	1480562e 	bgeu	r2,r18,800b2ac <__udivdi3+0x308>
 800b154:	00804034 	movhi	r2,256
 800b158:	10bfffc4 	addi	r2,r2,-1
 800b15c:	1480e32e 	bgeu	r2,r18,800b4ec <__udivdi3+0x548>
 800b160:	00800604 	movi	r2,24
 800b164:	1007883a 	mov	r3,r2
 800b168:	9084d83a 	srl	r2,r18,r2
 800b16c:	010200b4 	movhi	r4,2050
 800b170:	212e9404 	addi	r4,r4,-17840
 800b174:	2085883a 	add	r2,r4,r2
 800b178:	10800003 	ldbu	r2,0(r2)
 800b17c:	10c5883a 	add	r2,r2,r3
 800b180:	00c00804 	movi	r3,32
 800b184:	1887c83a 	sub	r3,r3,r2
 800b188:	1800911e 	bne	r3,zero,800b3d0 <__udivdi3+0x42c>
 800b18c:	9028d43a 	srli	r20,r18,16
 800b190:	84a1c83a 	sub	r16,r16,r18
 800b194:	957fffcc 	andi	r21,r18,65535
 800b198:	00c00044 	movi	r3,1
 800b19c:	8009883a 	mov	r4,r16
 800b1a0:	a00b883a 	mov	r5,r20
 800b1a4:	d8c00015 	stw	r3,0(sp)
 800b1a8:	800bc180 	call	800bc18 <__umodsi3>
 800b1ac:	8009883a 	mov	r4,r16
 800b1b0:	a00b883a 	mov	r5,r20
 800b1b4:	1027883a 	mov	r19,r2
 800b1b8:	800bc100 	call	800bc10 <__udivsi3>
 800b1bc:	1021883a 	mov	r16,r2
 800b1c0:	880cd43a 	srli	r6,r17,16
 800b1c4:	9804943a 	slli	r2,r19,16
 800b1c8:	8567383a 	mul	r19,r16,r21
 800b1cc:	d8c00017 	ldw	r3,0(sp)
 800b1d0:	1188b03a 	or	r4,r2,r6
 800b1d4:	24c0052e 	bgeu	r4,r19,800b1ec <__udivdi3+0x248>
 800b1d8:	2489883a 	add	r4,r4,r18
 800b1dc:	80bfffc4 	addi	r2,r16,-1
 800b1e0:	24800136 	bltu	r4,r18,800b1e8 <__udivdi3+0x244>
 800b1e4:	24c0d936 	bltu	r4,r19,800b54c <__udivdi3+0x5a8>
 800b1e8:	1021883a 	mov	r16,r2
 800b1ec:	24e7c83a 	sub	r19,r4,r19
 800b1f0:	9809883a 	mov	r4,r19
 800b1f4:	a00b883a 	mov	r5,r20
 800b1f8:	d8c00015 	stw	r3,0(sp)
 800b1fc:	800bc180 	call	800bc18 <__umodsi3>
 800b200:	102d883a 	mov	r22,r2
 800b204:	9809883a 	mov	r4,r19
 800b208:	a00b883a 	mov	r5,r20
 800b20c:	800bc100 	call	800bc10 <__udivsi3>
 800b210:	b02c943a 	slli	r22,r22,16
 800b214:	156b383a 	mul	r21,r2,r21
 800b218:	8c7fffcc 	andi	r17,r17,65535
 800b21c:	b462b03a 	or	r17,r22,r17
 800b220:	d8c00017 	ldw	r3,0(sp)
 800b224:	8d40052e 	bgeu	r17,r21,800b23c <__udivdi3+0x298>
 800b228:	8ca3883a 	add	r17,r17,r18
 800b22c:	113fffc4 	addi	r4,r2,-1
 800b230:	8c809a36 	bltu	r17,r18,800b49c <__udivdi3+0x4f8>
 800b234:	8d40992e 	bgeu	r17,r21,800b49c <__udivdi3+0x4f8>
 800b238:	10bfff84 	addi	r2,r2,-2
 800b23c:	8020943a 	slli	r16,r16,16
 800b240:	1404b03a 	or	r2,r2,r16
 800b244:	00000206 	br	800b250 <__udivdi3+0x2ac>
 800b248:	0007883a 	mov	r3,zero
 800b24c:	0005883a 	mov	r2,zero
 800b250:	dfc00a17 	ldw	ra,40(sp)
 800b254:	df000917 	ldw	fp,36(sp)
 800b258:	ddc00817 	ldw	r23,32(sp)
 800b25c:	dd800717 	ldw	r22,28(sp)
 800b260:	dd400617 	ldw	r21,24(sp)
 800b264:	dd000517 	ldw	r20,20(sp)
 800b268:	dcc00417 	ldw	r19,16(sp)
 800b26c:	dc800317 	ldw	r18,12(sp)
 800b270:	dc400217 	ldw	r17,8(sp)
 800b274:	dc000117 	ldw	r16,4(sp)
 800b278:	dec00b04 	addi	sp,sp,44
 800b27c:	f800283a 	ret
 800b280:	00803fc4 	movi	r2,255
 800b284:	11c0932e 	bgeu	r2,r7,800b4d4 <__udivdi3+0x530>
 800b288:	00c00204 	movi	r3,8
 800b28c:	180b883a 	mov	r5,r3
 800b290:	003f9c06 	br	800b104 <__alt_data_end+0xfc00b104>
 800b294:	00804034 	movhi	r2,256
 800b298:	10bfffc4 	addi	r2,r2,-1
 800b29c:	1180902e 	bgeu	r2,r6,800b4e0 <__udivdi3+0x53c>
 800b2a0:	00800604 	movi	r2,24
 800b2a4:	1007883a 	mov	r3,r2
 800b2a8:	003f5606 	br	800b004 <__alt_data_end+0xfc00b004>
 800b2ac:	00803fc4 	movi	r2,255
 800b2b0:	1480912e 	bgeu	r2,r18,800b4f8 <__udivdi3+0x554>
 800b2b4:	00800204 	movi	r2,8
 800b2b8:	1007883a 	mov	r3,r2
 800b2bc:	003faa06 	br	800b168 <__alt_data_end+0xfc00b168>
 800b2c0:	30eed83a 	srl	r23,r6,r3
 800b2c4:	3c8e983a 	sll	r7,r7,r18
 800b2c8:	80f8d83a 	srl	fp,r16,r3
 800b2cc:	98c6d83a 	srl	r3,r19,r3
 800b2d0:	3deeb03a 	or	r23,r7,r23
 800b2d4:	b828d43a 	srli	r20,r23,16
 800b2d8:	84a0983a 	sll	r16,r16,r18
 800b2dc:	e009883a 	mov	r4,fp
 800b2e0:	a00b883a 	mov	r5,r20
 800b2e4:	80e2b03a 	or	r17,r16,r3
 800b2e8:	34aa983a 	sll	r21,r6,r18
 800b2ec:	800bc180 	call	800bc18 <__umodsi3>
 800b2f0:	e009883a 	mov	r4,fp
 800b2f4:	a00b883a 	mov	r5,r20
 800b2f8:	102d883a 	mov	r22,r2
 800b2fc:	800bc100 	call	800bc10 <__udivsi3>
 800b300:	1021883a 	mov	r16,r2
 800b304:	bf3fffcc 	andi	fp,r23,65535
 800b308:	b004943a 	slli	r2,r22,16
 800b30c:	8808d43a 	srli	r4,r17,16
 800b310:	872d383a 	mul	r22,r16,fp
 800b314:	1104b03a 	or	r2,r2,r4
 800b318:	1580042e 	bgeu	r2,r22,800b32c <__udivdi3+0x388>
 800b31c:	15c5883a 	add	r2,r2,r23
 800b320:	80ffffc4 	addi	r3,r16,-1
 800b324:	15c0812e 	bgeu	r2,r23,800b52c <__udivdi3+0x588>
 800b328:	1821883a 	mov	r16,r3
 800b32c:	15adc83a 	sub	r22,r2,r22
 800b330:	b009883a 	mov	r4,r22
 800b334:	a00b883a 	mov	r5,r20
 800b338:	800bc180 	call	800bc18 <__umodsi3>
 800b33c:	a00b883a 	mov	r5,r20
 800b340:	b009883a 	mov	r4,r22
 800b344:	d8800015 	stw	r2,0(sp)
 800b348:	800bc100 	call	800bc10 <__udivsi3>
 800b34c:	d8c00017 	ldw	r3,0(sp)
 800b350:	170b383a 	mul	r5,r2,fp
 800b354:	8c7fffcc 	andi	r17,r17,65535
 800b358:	1806943a 	slli	r3,r3,16
 800b35c:	1c46b03a 	or	r3,r3,r17
 800b360:	1940042e 	bgeu	r3,r5,800b374 <__udivdi3+0x3d0>
 800b364:	1dc7883a 	add	r3,r3,r23
 800b368:	113fffc4 	addi	r4,r2,-1
 800b36c:	1dc06b2e 	bgeu	r3,r23,800b51c <__udivdi3+0x578>
 800b370:	2005883a 	mov	r2,r4
 800b374:	8020943a 	slli	r16,r16,16
 800b378:	a9ffffcc 	andi	r7,r21,65535
 800b37c:	a82ad43a 	srli	r21,r21,16
 800b380:	1404b03a 	or	r2,r2,r16
 800b384:	113fffcc 	andi	r4,r2,65535
 800b388:	100cd43a 	srli	r6,r2,16
 800b38c:	21d3383a 	mul	r9,r4,r7
 800b390:	2549383a 	mul	r4,r4,r21
 800b394:	31cf383a 	mul	r7,r6,r7
 800b398:	4810d43a 	srli	r8,r9,16
 800b39c:	1947c83a 	sub	r3,r3,r5
 800b3a0:	3909883a 	add	r4,r7,r4
 800b3a4:	2209883a 	add	r4,r4,r8
 800b3a8:	354d383a 	mul	r6,r6,r21
 800b3ac:	21c0022e 	bgeu	r4,r7,800b3b8 <__udivdi3+0x414>
 800b3b0:	01400074 	movhi	r5,1
 800b3b4:	314d883a 	add	r6,r6,r5
 800b3b8:	202ad43a 	srli	r21,r4,16
 800b3bc:	354d883a 	add	r6,r6,r21
 800b3c0:	19803f36 	bltu	r3,r6,800b4c0 <__udivdi3+0x51c>
 800b3c4:	19803926 	beq	r3,r6,800b4ac <__udivdi3+0x508>
 800b3c8:	0007883a 	mov	r3,zero
 800b3cc:	003fa006 	br	800b250 <__alt_data_end+0xfc00b250>
 800b3d0:	90e4983a 	sll	r18,r18,r3
 800b3d4:	80aad83a 	srl	r21,r16,r2
 800b3d8:	80e0983a 	sll	r16,r16,r3
 800b3dc:	9028d43a 	srli	r20,r18,16
 800b3e0:	9884d83a 	srl	r2,r19,r2
 800b3e4:	a809883a 	mov	r4,r21
 800b3e8:	a00b883a 	mov	r5,r20
 800b3ec:	80acb03a 	or	r22,r16,r2
 800b3f0:	98e2983a 	sll	r17,r19,r3
 800b3f4:	800bc180 	call	800bc18 <__umodsi3>
 800b3f8:	a809883a 	mov	r4,r21
 800b3fc:	a00b883a 	mov	r5,r20
 800b400:	1021883a 	mov	r16,r2
 800b404:	800bc100 	call	800bc10 <__udivsi3>
 800b408:	957fffcc 	andi	r21,r18,65535
 800b40c:	8020943a 	slli	r16,r16,16
 800b410:	b00ad43a 	srli	r5,r22,16
 800b414:	1567383a 	mul	r19,r2,r21
 800b418:	102f883a 	mov	r23,r2
 800b41c:	8148b03a 	or	r4,r16,r5
 800b420:	24c0062e 	bgeu	r4,r19,800b43c <__udivdi3+0x498>
 800b424:	2489883a 	add	r4,r4,r18
 800b428:	10bfffc4 	addi	r2,r2,-1
 800b42c:	24804536 	bltu	r4,r18,800b544 <__udivdi3+0x5a0>
 800b430:	24c0442e 	bgeu	r4,r19,800b544 <__udivdi3+0x5a0>
 800b434:	bdffff84 	addi	r23,r23,-2
 800b438:	2489883a 	add	r4,r4,r18
 800b43c:	24e7c83a 	sub	r19,r4,r19
 800b440:	9809883a 	mov	r4,r19
 800b444:	a00b883a 	mov	r5,r20
 800b448:	800bc180 	call	800bc18 <__umodsi3>
 800b44c:	1021883a 	mov	r16,r2
 800b450:	9809883a 	mov	r4,r19
 800b454:	a00b883a 	mov	r5,r20
 800b458:	800bc100 	call	800bc10 <__udivsi3>
 800b45c:	8020943a 	slli	r16,r16,16
 800b460:	1007883a 	mov	r3,r2
 800b464:	1545383a 	mul	r2,r2,r21
 800b468:	b13fffcc 	andi	r4,r22,65535
 800b46c:	8108b03a 	or	r4,r16,r4
 800b470:	2080062e 	bgeu	r4,r2,800b48c <__udivdi3+0x4e8>
 800b474:	2489883a 	add	r4,r4,r18
 800b478:	197fffc4 	addi	r5,r3,-1
 800b47c:	24802f36 	bltu	r4,r18,800b53c <__udivdi3+0x598>
 800b480:	20802e2e 	bgeu	r4,r2,800b53c <__udivdi3+0x598>
 800b484:	18ffff84 	addi	r3,r3,-2
 800b488:	2489883a 	add	r4,r4,r18
 800b48c:	b82e943a 	slli	r23,r23,16
 800b490:	20a1c83a 	sub	r16,r4,r2
 800b494:	1dc6b03a 	or	r3,r3,r23
 800b498:	003f4006 	br	800b19c <__alt_data_end+0xfc00b19c>
 800b49c:	2005883a 	mov	r2,r4
 800b4a0:	003f6606 	br	800b23c <__alt_data_end+0xfc00b23c>
 800b4a4:	1805883a 	mov	r2,r3
 800b4a8:	003f0a06 	br	800b0d4 <__alt_data_end+0xfc00b0d4>
 800b4ac:	2006943a 	slli	r3,r4,16
 800b4b0:	9c88983a 	sll	r4,r19,r18
 800b4b4:	4a7fffcc 	andi	r9,r9,65535
 800b4b8:	1a47883a 	add	r3,r3,r9
 800b4bc:	20ffc22e 	bgeu	r4,r3,800b3c8 <__alt_data_end+0xfc00b3c8>
 800b4c0:	10bfffc4 	addi	r2,r2,-1
 800b4c4:	003fc006 	br	800b3c8 <__alt_data_end+0xfc00b3c8>
 800b4c8:	00c00404 	movi	r3,16
 800b4cc:	180b883a 	mov	r5,r3
 800b4d0:	003f0c06 	br	800b104 <__alt_data_end+0xfc00b104>
 800b4d4:	0007883a 	mov	r3,zero
 800b4d8:	000b883a 	mov	r5,zero
 800b4dc:	003f0906 	br	800b104 <__alt_data_end+0xfc00b104>
 800b4e0:	00800404 	movi	r2,16
 800b4e4:	1007883a 	mov	r3,r2
 800b4e8:	003ec606 	br	800b004 <__alt_data_end+0xfc00b004>
 800b4ec:	00800404 	movi	r2,16
 800b4f0:	1007883a 	mov	r3,r2
 800b4f4:	003f1c06 	br	800b168 <__alt_data_end+0xfc00b168>
 800b4f8:	0005883a 	mov	r2,zero
 800b4fc:	0007883a 	mov	r3,zero
 800b500:	003f1906 	br	800b168 <__alt_data_end+0xfc00b168>
 800b504:	0005883a 	mov	r2,zero
 800b508:	0007883a 	mov	r3,zero
 800b50c:	003ebd06 	br	800b004 <__alt_data_end+0xfc00b004>
 800b510:	0007883a 	mov	r3,zero
 800b514:	00800044 	movi	r2,1
 800b518:	003f4d06 	br	800b250 <__alt_data_end+0xfc00b250>
 800b51c:	197f942e 	bgeu	r3,r5,800b370 <__alt_data_end+0xfc00b370>
 800b520:	10bfff84 	addi	r2,r2,-2
 800b524:	1dc7883a 	add	r3,r3,r23
 800b528:	003f9206 	br	800b374 <__alt_data_end+0xfc00b374>
 800b52c:	15bf7e2e 	bgeu	r2,r22,800b328 <__alt_data_end+0xfc00b328>
 800b530:	843fff84 	addi	r16,r16,-2
 800b534:	15c5883a 	add	r2,r2,r23
 800b538:	003f7c06 	br	800b32c <__alt_data_end+0xfc00b32c>
 800b53c:	2807883a 	mov	r3,r5
 800b540:	003fd206 	br	800b48c <__alt_data_end+0xfc00b48c>
 800b544:	102f883a 	mov	r23,r2
 800b548:	003fbc06 	br	800b43c <__alt_data_end+0xfc00b43c>
 800b54c:	843fff84 	addi	r16,r16,-2
 800b550:	2489883a 	add	r4,r4,r18
 800b554:	003f2506 	br	800b1ec <__alt_data_end+0xfc00b1ec>
 800b558:	843fff84 	addi	r16,r16,-2
 800b55c:	1485883a 	add	r2,r2,r18
 800b560:	003eca06 	br	800b08c <__alt_data_end+0xfc00b08c>

0800b564 <__umoddi3>:
 800b564:	defff404 	addi	sp,sp,-48
 800b568:	ddc00915 	stw	r23,36(sp)
 800b56c:	dc400315 	stw	r17,12(sp)
 800b570:	dc000215 	stw	r16,8(sp)
 800b574:	dfc00b15 	stw	ra,44(sp)
 800b578:	df000a15 	stw	fp,40(sp)
 800b57c:	dd800815 	stw	r22,32(sp)
 800b580:	dd400715 	stw	r21,28(sp)
 800b584:	dd000615 	stw	r20,24(sp)
 800b588:	dcc00515 	stw	r19,20(sp)
 800b58c:	dc800415 	stw	r18,16(sp)
 800b590:	2021883a 	mov	r16,r4
 800b594:	2823883a 	mov	r17,r5
 800b598:	282f883a 	mov	r23,r5
 800b59c:	3800381e 	bne	r7,zero,800b680 <__umoddi3+0x11c>
 800b5a0:	3027883a 	mov	r19,r6
 800b5a4:	2029883a 	mov	r20,r4
 800b5a8:	29804e2e 	bgeu	r5,r6,800b6e4 <__umoddi3+0x180>
 800b5ac:	00bfffd4 	movui	r2,65535
 800b5b0:	11809c36 	bltu	r2,r6,800b824 <__umoddi3+0x2c0>
 800b5b4:	00803fc4 	movi	r2,255
 800b5b8:	11813b2e 	bgeu	r2,r6,800baa8 <__umoddi3+0x544>
 800b5bc:	01400204 	movi	r5,8
 800b5c0:	2805883a 	mov	r2,r5
 800b5c4:	314ad83a 	srl	r5,r6,r5
 800b5c8:	00c200b4 	movhi	r3,2050
 800b5cc:	18ee9404 	addi	r3,r3,-17840
 800b5d0:	194b883a 	add	r5,r3,r5
 800b5d4:	29000003 	ldbu	r4,0(r5)
 800b5d8:	2089883a 	add	r4,r4,r2
 800b5dc:	00800804 	movi	r2,32
 800b5e0:	1105c83a 	sub	r2,r2,r4
 800b5e4:	1000ec26 	beq	r2,zero,800b998 <__umoddi3+0x434>
 800b5e8:	88a2983a 	sll	r17,r17,r2
 800b5ec:	8108d83a 	srl	r4,r16,r4
 800b5f0:	30a6983a 	sll	r19,r6,r2
 800b5f4:	80a8983a 	sll	r20,r16,r2
 800b5f8:	1025883a 	mov	r18,r2
 800b5fc:	892eb03a 	or	r23,r17,r4
 800b600:	982cd43a 	srli	r22,r19,16
 800b604:	b809883a 	mov	r4,r23
 800b608:	9d7fffcc 	andi	r21,r19,65535
 800b60c:	b00b883a 	mov	r5,r22
 800b610:	800bc180 	call	800bc18 <__umodsi3>
 800b614:	b809883a 	mov	r4,r23
 800b618:	b00b883a 	mov	r5,r22
 800b61c:	1021883a 	mov	r16,r2
 800b620:	800bc100 	call	800bc10 <__udivsi3>
 800b624:	8020943a 	slli	r16,r16,16
 800b628:	a00cd43a 	srli	r6,r20,16
 800b62c:	1545383a 	mul	r2,r2,r21
 800b630:	8188b03a 	or	r4,r16,r6
 800b634:	2080042e 	bgeu	r4,r2,800b648 <__umoddi3+0xe4>
 800b638:	24c9883a 	add	r4,r4,r19
 800b63c:	24c00236 	bltu	r4,r19,800b648 <__umoddi3+0xe4>
 800b640:	2080012e 	bgeu	r4,r2,800b648 <__umoddi3+0xe4>
 800b644:	24c9883a 	add	r4,r4,r19
 800b648:	20a3c83a 	sub	r17,r4,r2
 800b64c:	8809883a 	mov	r4,r17
 800b650:	b00b883a 	mov	r5,r22
 800b654:	800bc180 	call	800bc18 <__umodsi3>
 800b658:	8809883a 	mov	r4,r17
 800b65c:	b00b883a 	mov	r5,r22
 800b660:	1021883a 	mov	r16,r2
 800b664:	800bc100 	call	800bc10 <__udivsi3>
 800b668:	8006943a 	slli	r3,r16,16
 800b66c:	1545383a 	mul	r2,r2,r21
 800b670:	a13fffcc 	andi	r4,r20,65535
 800b674:	1906b03a 	or	r3,r3,r4
 800b678:	1880532e 	bgeu	r3,r2,800b7c8 <__umoddi3+0x264>
 800b67c:	00004e06 	br	800b7b8 <__umoddi3+0x254>
 800b680:	29c05536 	bltu	r5,r7,800b7d8 <__umoddi3+0x274>
 800b684:	00bfffd4 	movui	r2,65535
 800b688:	11c0612e 	bgeu	r2,r7,800b810 <__umoddi3+0x2ac>
 800b68c:	00804034 	movhi	r2,256
 800b690:	10bfffc4 	addi	r2,r2,-1
 800b694:	11c0f82e 	bgeu	r2,r7,800ba78 <__umoddi3+0x514>
 800b698:	01400604 	movi	r5,24
 800b69c:	282b883a 	mov	r21,r5
 800b6a0:	394ad83a 	srl	r5,r7,r5
 800b6a4:	00c200b4 	movhi	r3,2050
 800b6a8:	18ee9404 	addi	r3,r3,-17840
 800b6ac:	194b883a 	add	r5,r3,r5
 800b6b0:	28800003 	ldbu	r2,0(r5)
 800b6b4:	00c00804 	movi	r3,32
 800b6b8:	156b883a 	add	r21,r2,r21
 800b6bc:	1d69c83a 	sub	r20,r3,r21
 800b6c0:	a000631e 	bne	r20,zero,800b850 <__umoddi3+0x2ec>
 800b6c4:	3c400136 	bltu	r7,r17,800b6cc <__umoddi3+0x168>
 800b6c8:	81810436 	bltu	r16,r6,800badc <__umoddi3+0x578>
 800b6cc:	8185c83a 	sub	r2,r16,r6
 800b6d0:	89e3c83a 	sub	r17,r17,r7
 800b6d4:	8087803a 	cmpltu	r3,r16,r2
 800b6d8:	88efc83a 	sub	r23,r17,r3
 800b6dc:	b807883a 	mov	r3,r23
 800b6e0:	00003f06 	br	800b7e0 <__umoddi3+0x27c>
 800b6e4:	3000041e 	bne	r6,zero,800b6f8 <__umoddi3+0x194>
 800b6e8:	01000044 	movi	r4,1
 800b6ec:	000b883a 	mov	r5,zero
 800b6f0:	800bc100 	call	800bc10 <__udivsi3>
 800b6f4:	1027883a 	mov	r19,r2
 800b6f8:	00bfffd4 	movui	r2,65535
 800b6fc:	14c04f2e 	bgeu	r2,r19,800b83c <__umoddi3+0x2d8>
 800b700:	00804034 	movhi	r2,256
 800b704:	10bfffc4 	addi	r2,r2,-1
 800b708:	14c0e42e 	bgeu	r2,r19,800ba9c <__umoddi3+0x538>
 800b70c:	00800604 	movi	r2,24
 800b710:	1007883a 	mov	r3,r2
 800b714:	9884d83a 	srl	r2,r19,r2
 800b718:	010200b4 	movhi	r4,2050
 800b71c:	212e9404 	addi	r4,r4,-17840
 800b720:	2085883a 	add	r2,r4,r2
 800b724:	11000003 	ldbu	r4,0(r2)
 800b728:	00800804 	movi	r2,32
 800b72c:	20c7883a 	add	r3,r4,r3
 800b730:	10c5c83a 	sub	r2,r2,r3
 800b734:	10009a1e 	bne	r2,zero,800b9a0 <__umoddi3+0x43c>
 800b738:	982cd43a 	srli	r22,r19,16
 800b73c:	8ce3c83a 	sub	r17,r17,r19
 800b740:	9c3fffcc 	andi	r16,r19,65535
 800b744:	0025883a 	mov	r18,zero
 800b748:	8809883a 	mov	r4,r17
 800b74c:	b00b883a 	mov	r5,r22
 800b750:	800bc180 	call	800bc18 <__umodsi3>
 800b754:	8809883a 	mov	r4,r17
 800b758:	b00b883a 	mov	r5,r22
 800b75c:	102b883a 	mov	r21,r2
 800b760:	800bc100 	call	800bc10 <__udivsi3>
 800b764:	a806943a 	slli	r3,r21,16
 800b768:	a008d43a 	srli	r4,r20,16
 800b76c:	1405383a 	mul	r2,r2,r16
 800b770:	190cb03a 	or	r6,r3,r4
 800b774:	3080032e 	bgeu	r6,r2,800b784 <__umoddi3+0x220>
 800b778:	34cd883a 	add	r6,r6,r19
 800b77c:	34c00136 	bltu	r6,r19,800b784 <__umoddi3+0x220>
 800b780:	3080d436 	bltu	r6,r2,800bad4 <__umoddi3+0x570>
 800b784:	30abc83a 	sub	r21,r6,r2
 800b788:	a809883a 	mov	r4,r21
 800b78c:	b00b883a 	mov	r5,r22
 800b790:	800bc180 	call	800bc18 <__umodsi3>
 800b794:	1023883a 	mov	r17,r2
 800b798:	a809883a 	mov	r4,r21
 800b79c:	b00b883a 	mov	r5,r22
 800b7a0:	800bc100 	call	800bc10 <__udivsi3>
 800b7a4:	8822943a 	slli	r17,r17,16
 800b7a8:	1405383a 	mul	r2,r2,r16
 800b7ac:	a13fffcc 	andi	r4,r20,65535
 800b7b0:	8906b03a 	or	r3,r17,r4
 800b7b4:	1880042e 	bgeu	r3,r2,800b7c8 <__umoddi3+0x264>
 800b7b8:	1cc7883a 	add	r3,r3,r19
 800b7bc:	1cc00236 	bltu	r3,r19,800b7c8 <__umoddi3+0x264>
 800b7c0:	1880012e 	bgeu	r3,r2,800b7c8 <__umoddi3+0x264>
 800b7c4:	1cc7883a 	add	r3,r3,r19
 800b7c8:	1887c83a 	sub	r3,r3,r2
 800b7cc:	1c84d83a 	srl	r2,r3,r18
 800b7d0:	0007883a 	mov	r3,zero
 800b7d4:	00000206 	br	800b7e0 <__umoddi3+0x27c>
 800b7d8:	2005883a 	mov	r2,r4
 800b7dc:	2807883a 	mov	r3,r5
 800b7e0:	dfc00b17 	ldw	ra,44(sp)
 800b7e4:	df000a17 	ldw	fp,40(sp)
 800b7e8:	ddc00917 	ldw	r23,36(sp)
 800b7ec:	dd800817 	ldw	r22,32(sp)
 800b7f0:	dd400717 	ldw	r21,28(sp)
 800b7f4:	dd000617 	ldw	r20,24(sp)
 800b7f8:	dcc00517 	ldw	r19,20(sp)
 800b7fc:	dc800417 	ldw	r18,16(sp)
 800b800:	dc400317 	ldw	r17,12(sp)
 800b804:	dc000217 	ldw	r16,8(sp)
 800b808:	dec00c04 	addi	sp,sp,48
 800b80c:	f800283a 	ret
 800b810:	00803fc4 	movi	r2,255
 800b814:	11c0952e 	bgeu	r2,r7,800ba6c <__umoddi3+0x508>
 800b818:	01400204 	movi	r5,8
 800b81c:	282b883a 	mov	r21,r5
 800b820:	003f9f06 	br	800b6a0 <__alt_data_end+0xfc00b6a0>
 800b824:	00804034 	movhi	r2,256
 800b828:	10bfffc4 	addi	r2,r2,-1
 800b82c:	1180952e 	bgeu	r2,r6,800ba84 <__umoddi3+0x520>
 800b830:	01400604 	movi	r5,24
 800b834:	2805883a 	mov	r2,r5
 800b838:	003f6206 	br	800b5c4 <__alt_data_end+0xfc00b5c4>
 800b83c:	00803fc4 	movi	r2,255
 800b840:	14c0932e 	bgeu	r2,r19,800ba90 <__umoddi3+0x52c>
 800b844:	00800204 	movi	r2,8
 800b848:	1007883a 	mov	r3,r2
 800b84c:	003fb106 	br	800b714 <__alt_data_end+0xfc00b714>
 800b850:	3548d83a 	srl	r4,r6,r21
 800b854:	3d0e983a 	sll	r7,r7,r20
 800b858:	8d10983a 	sll	r8,r17,r20
 800b85c:	8d6cd83a 	srl	r22,r17,r21
 800b860:	3922b03a 	or	r17,r7,r4
 800b864:	882ed43a 	srli	r23,r17,16
 800b868:	8564d83a 	srl	r18,r16,r21
 800b86c:	b009883a 	mov	r4,r22
 800b870:	b80b883a 	mov	r5,r23
 800b874:	44a4b03a 	or	r18,r8,r18
 800b878:	3526983a 	sll	r19,r6,r20
 800b87c:	800bc180 	call	800bc18 <__umodsi3>
 800b880:	b009883a 	mov	r4,r22
 800b884:	b80b883a 	mov	r5,r23
 800b888:	1039883a 	mov	fp,r2
 800b88c:	800bc100 	call	800bc10 <__udivsi3>
 800b890:	102d883a 	mov	r22,r2
 800b894:	8a3fffcc 	andi	r8,r17,65535
 800b898:	e004943a 	slli	r2,fp,16
 800b89c:	900cd43a 	srli	r6,r18,16
 800b8a0:	b239383a 	mul	fp,r22,r8
 800b8a4:	8520983a 	sll	r16,r16,r20
 800b8a8:	118ab03a 	or	r5,r2,r6
 800b8ac:	2f00042e 	bgeu	r5,fp,800b8c0 <__umoddi3+0x35c>
 800b8b0:	2c4b883a 	add	r5,r5,r17
 800b8b4:	b0bfffc4 	addi	r2,r22,-1
 800b8b8:	2c40822e 	bgeu	r5,r17,800bac4 <__umoddi3+0x560>
 800b8bc:	102d883a 	mov	r22,r2
 800b8c0:	2f39c83a 	sub	fp,r5,fp
 800b8c4:	e009883a 	mov	r4,fp
 800b8c8:	b80b883a 	mov	r5,r23
 800b8cc:	da000115 	stw	r8,4(sp)
 800b8d0:	800bc180 	call	800bc18 <__umodsi3>
 800b8d4:	e009883a 	mov	r4,fp
 800b8d8:	b80b883a 	mov	r5,r23
 800b8dc:	d8800015 	stw	r2,0(sp)
 800b8e0:	800bc100 	call	800bc10 <__udivsi3>
 800b8e4:	d9800017 	ldw	r6,0(sp)
 800b8e8:	da000117 	ldw	r8,4(sp)
 800b8ec:	94bfffcc 	andi	r18,r18,65535
 800b8f0:	300c943a 	slli	r6,r6,16
 800b8f4:	1209383a 	mul	r4,r2,r8
 800b8f8:	3490b03a 	or	r8,r6,r18
 800b8fc:	4100042e 	bgeu	r8,r4,800b910 <__umoddi3+0x3ac>
 800b900:	4451883a 	add	r8,r8,r17
 800b904:	10ffffc4 	addi	r3,r2,-1
 800b908:	44406a2e 	bgeu	r8,r17,800bab4 <__umoddi3+0x550>
 800b90c:	1805883a 	mov	r2,r3
 800b910:	b012943a 	slli	r9,r22,16
 800b914:	9abfffcc 	andi	r10,r19,65535
 800b918:	980ed43a 	srli	r7,r19,16
 800b91c:	124ab03a 	or	r5,r2,r9
 800b920:	2a7fffcc 	andi	r9,r5,65535
 800b924:	280ad43a 	srli	r5,r5,16
 800b928:	4a8d383a 	mul	r6,r9,r10
 800b92c:	49d3383a 	mul	r9,r9,r7
 800b930:	2a95383a 	mul	r10,r5,r10
 800b934:	3004d43a 	srli	r2,r6,16
 800b938:	4111c83a 	sub	r8,r8,r4
 800b93c:	5253883a 	add	r9,r10,r9
 800b940:	4893883a 	add	r9,r9,r2
 800b944:	29cb383a 	mul	r5,r5,r7
 800b948:	4a80022e 	bgeu	r9,r10,800b954 <__umoddi3+0x3f0>
 800b94c:	00800074 	movhi	r2,1
 800b950:	288b883a 	add	r5,r5,r2
 800b954:	4808d43a 	srli	r4,r9,16
 800b958:	4812943a 	slli	r9,r9,16
 800b95c:	31bfffcc 	andi	r6,r6,65535
 800b960:	290b883a 	add	r5,r5,r4
 800b964:	498d883a 	add	r6,r9,r6
 800b968:	41403a36 	bltu	r8,r5,800ba54 <__umoddi3+0x4f0>
 800b96c:	41405d26 	beq	r8,r5,800bae4 <__umoddi3+0x580>
 800b970:	4149c83a 	sub	r4,r8,r5
 800b974:	300f883a 	mov	r7,r6
 800b978:	81cfc83a 	sub	r7,r16,r7
 800b97c:	81c7803a 	cmpltu	r3,r16,r7
 800b980:	20c7c83a 	sub	r3,r4,r3
 800b984:	1d44983a 	sll	r2,r3,r21
 800b988:	3d0ed83a 	srl	r7,r7,r20
 800b98c:	1d06d83a 	srl	r3,r3,r20
 800b990:	11c4b03a 	or	r2,r2,r7
 800b994:	003f9206 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800b998:	0025883a 	mov	r18,zero
 800b99c:	003f1806 	br	800b600 <__alt_data_end+0xfc00b600>
 800b9a0:	98a6983a 	sll	r19,r19,r2
 800b9a4:	88e8d83a 	srl	r20,r17,r3
 800b9a8:	80c6d83a 	srl	r3,r16,r3
 800b9ac:	982cd43a 	srli	r22,r19,16
 800b9b0:	88a2983a 	sll	r17,r17,r2
 800b9b4:	a009883a 	mov	r4,r20
 800b9b8:	b00b883a 	mov	r5,r22
 800b9bc:	88eab03a 	or	r21,r17,r3
 800b9c0:	1025883a 	mov	r18,r2
 800b9c4:	800bc180 	call	800bc18 <__umodsi3>
 800b9c8:	a009883a 	mov	r4,r20
 800b9cc:	b00b883a 	mov	r5,r22
 800b9d0:	1023883a 	mov	r17,r2
 800b9d4:	800bc100 	call	800bc10 <__udivsi3>
 800b9d8:	9f3fffcc 	andi	fp,r19,65535
 800b9dc:	8822943a 	slli	r17,r17,16
 800b9e0:	a80ad43a 	srli	r5,r21,16
 800b9e4:	1705383a 	mul	r2,r2,fp
 800b9e8:	84a8983a 	sll	r20,r16,r18
 800b9ec:	8948b03a 	or	r4,r17,r5
 800b9f0:	2080042e 	bgeu	r4,r2,800ba04 <__umoddi3+0x4a0>
 800b9f4:	24c9883a 	add	r4,r4,r19
 800b9f8:	24c00236 	bltu	r4,r19,800ba04 <__umoddi3+0x4a0>
 800b9fc:	2080012e 	bgeu	r4,r2,800ba04 <__umoddi3+0x4a0>
 800ba00:	24c9883a 	add	r4,r4,r19
 800ba04:	20afc83a 	sub	r23,r4,r2
 800ba08:	b809883a 	mov	r4,r23
 800ba0c:	b00b883a 	mov	r5,r22
 800ba10:	800bc180 	call	800bc18 <__umodsi3>
 800ba14:	1023883a 	mov	r17,r2
 800ba18:	b809883a 	mov	r4,r23
 800ba1c:	b00b883a 	mov	r5,r22
 800ba20:	800bc100 	call	800bc10 <__udivsi3>
 800ba24:	8822943a 	slli	r17,r17,16
 800ba28:	1705383a 	mul	r2,r2,fp
 800ba2c:	a93fffcc 	andi	r4,r21,65535
 800ba30:	8908b03a 	or	r4,r17,r4
 800ba34:	2080042e 	bgeu	r4,r2,800ba48 <__umoddi3+0x4e4>
 800ba38:	24c9883a 	add	r4,r4,r19
 800ba3c:	24c00236 	bltu	r4,r19,800ba48 <__umoddi3+0x4e4>
 800ba40:	2080012e 	bgeu	r4,r2,800ba48 <__umoddi3+0x4e4>
 800ba44:	24c9883a 	add	r4,r4,r19
 800ba48:	20a3c83a 	sub	r17,r4,r2
 800ba4c:	e021883a 	mov	r16,fp
 800ba50:	003f3d06 	br	800b748 <__alt_data_end+0xfc00b748>
 800ba54:	34cfc83a 	sub	r7,r6,r19
 800ba58:	2c4bc83a 	sub	r5,r5,r17
 800ba5c:	31cd803a 	cmpltu	r6,r6,r7
 800ba60:	298dc83a 	sub	r6,r5,r6
 800ba64:	4189c83a 	sub	r4,r8,r6
 800ba68:	003fc306 	br	800b978 <__alt_data_end+0xfc00b978>
 800ba6c:	000b883a 	mov	r5,zero
 800ba70:	002b883a 	mov	r21,zero
 800ba74:	003f0a06 	br	800b6a0 <__alt_data_end+0xfc00b6a0>
 800ba78:	01400404 	movi	r5,16
 800ba7c:	282b883a 	mov	r21,r5
 800ba80:	003f0706 	br	800b6a0 <__alt_data_end+0xfc00b6a0>
 800ba84:	01400404 	movi	r5,16
 800ba88:	2805883a 	mov	r2,r5
 800ba8c:	003ecd06 	br	800b5c4 <__alt_data_end+0xfc00b5c4>
 800ba90:	0005883a 	mov	r2,zero
 800ba94:	0007883a 	mov	r3,zero
 800ba98:	003f1e06 	br	800b714 <__alt_data_end+0xfc00b714>
 800ba9c:	00800404 	movi	r2,16
 800baa0:	1007883a 	mov	r3,r2
 800baa4:	003f1b06 	br	800b714 <__alt_data_end+0xfc00b714>
 800baa8:	000b883a 	mov	r5,zero
 800baac:	0005883a 	mov	r2,zero
 800bab0:	003ec406 	br	800b5c4 <__alt_data_end+0xfc00b5c4>
 800bab4:	413f952e 	bgeu	r8,r4,800b90c <__alt_data_end+0xfc00b90c>
 800bab8:	10bfff84 	addi	r2,r2,-2
 800babc:	4451883a 	add	r8,r8,r17
 800bac0:	003f9306 	br	800b910 <__alt_data_end+0xfc00b910>
 800bac4:	2f3f7d2e 	bgeu	r5,fp,800b8bc <__alt_data_end+0xfc00b8bc>
 800bac8:	b5bfff84 	addi	r22,r22,-2
 800bacc:	2c4b883a 	add	r5,r5,r17
 800bad0:	003f7b06 	br	800b8c0 <__alt_data_end+0xfc00b8c0>
 800bad4:	34cd883a 	add	r6,r6,r19
 800bad8:	003f2a06 	br	800b784 <__alt_data_end+0xfc00b784>
 800badc:	8005883a 	mov	r2,r16
 800bae0:	003efe06 	br	800b6dc <__alt_data_end+0xfc00b6dc>
 800bae4:	81bfdb36 	bltu	r16,r6,800ba54 <__alt_data_end+0xfc00ba54>
 800bae8:	300f883a 	mov	r7,r6
 800baec:	0009883a 	mov	r4,zero
 800baf0:	003fa106 	br	800b978 <__alt_data_end+0xfc00b978>

0800baf4 <udivmodsi4>:
 800baf4:	2900182e 	bgeu	r5,r4,800bb58 <udivmodsi4+0x64>
 800baf8:	28001716 	blt	r5,zero,800bb58 <udivmodsi4+0x64>
 800bafc:	00800804 	movi	r2,32
 800bb00:	00c00044 	movi	r3,1
 800bb04:	00000206 	br	800bb10 <udivmodsi4+0x1c>
 800bb08:	10001126 	beq	r2,zero,800bb50 <udivmodsi4+0x5c>
 800bb0c:	28000516 	blt	r5,zero,800bb24 <udivmodsi4+0x30>
 800bb10:	294b883a 	add	r5,r5,r5
 800bb14:	10bfffc4 	addi	r2,r2,-1
 800bb18:	18c7883a 	add	r3,r3,r3
 800bb1c:	293ffa36 	bltu	r5,r4,800bb08 <__alt_data_end+0xfc00bb08>
 800bb20:	18000b26 	beq	r3,zero,800bb50 <udivmodsi4+0x5c>
 800bb24:	0005883a 	mov	r2,zero
 800bb28:	21400236 	bltu	r4,r5,800bb34 <udivmodsi4+0x40>
 800bb2c:	2149c83a 	sub	r4,r4,r5
 800bb30:	10c4b03a 	or	r2,r2,r3
 800bb34:	1806d07a 	srli	r3,r3,1
 800bb38:	280ad07a 	srli	r5,r5,1
 800bb3c:	183ffa1e 	bne	r3,zero,800bb28 <__alt_data_end+0xfc00bb28>
 800bb40:	3000011e 	bne	r6,zero,800bb48 <udivmodsi4+0x54>
 800bb44:	f800283a 	ret
 800bb48:	2005883a 	mov	r2,r4
 800bb4c:	f800283a 	ret
 800bb50:	0005883a 	mov	r2,zero
 800bb54:	003ffa06 	br	800bb40 <__alt_data_end+0xfc00bb40>
 800bb58:	00c00044 	movi	r3,1
 800bb5c:	003ff106 	br	800bb24 <__alt_data_end+0xfc00bb24>

0800bb60 <__divsi3>:
 800bb60:	defffe04 	addi	sp,sp,-8
 800bb64:	dfc00115 	stw	ra,4(sp)
 800bb68:	dc000015 	stw	r16,0(sp)
 800bb6c:	20000b16 	blt	r4,zero,800bb9c <__divsi3+0x3c>
 800bb70:	0021883a 	mov	r16,zero
 800bb74:	28000c16 	blt	r5,zero,800bba8 <__divsi3+0x48>
 800bb78:	000d883a 	mov	r6,zero
 800bb7c:	800baf40 	call	800baf4 <udivmodsi4>
 800bb80:	0407c83a 	sub	r3,zero,r16
 800bb84:	1884f03a 	xor	r2,r3,r2
 800bb88:	1405883a 	add	r2,r2,r16
 800bb8c:	dfc00117 	ldw	ra,4(sp)
 800bb90:	dc000017 	ldw	r16,0(sp)
 800bb94:	dec00204 	addi	sp,sp,8
 800bb98:	f800283a 	ret
 800bb9c:	0109c83a 	sub	r4,zero,r4
 800bba0:	04000044 	movi	r16,1
 800bba4:	283ff40e 	bge	r5,zero,800bb78 <__alt_data_end+0xfc00bb78>
 800bba8:	014bc83a 	sub	r5,zero,r5
 800bbac:	8400005c 	xori	r16,r16,1
 800bbb0:	003ff106 	br	800bb78 <__alt_data_end+0xfc00bb78>

0800bbb4 <__modsi3>:
 800bbb4:	defffd04 	addi	sp,sp,-12
 800bbb8:	dfc00215 	stw	ra,8(sp)
 800bbbc:	dc400115 	stw	r17,4(sp)
 800bbc0:	dc000015 	stw	r16,0(sp)
 800bbc4:	20000c16 	blt	r4,zero,800bbf8 <__modsi3+0x44>
 800bbc8:	0023883a 	mov	r17,zero
 800bbcc:	0021883a 	mov	r16,zero
 800bbd0:	28000d16 	blt	r5,zero,800bc08 <__modsi3+0x54>
 800bbd4:	01800044 	movi	r6,1
 800bbd8:	800baf40 	call	800baf4 <udivmodsi4>
 800bbdc:	1404f03a 	xor	r2,r2,r16
 800bbe0:	8885883a 	add	r2,r17,r2
 800bbe4:	dfc00217 	ldw	ra,8(sp)
 800bbe8:	dc400117 	ldw	r17,4(sp)
 800bbec:	dc000017 	ldw	r16,0(sp)
 800bbf0:	dec00304 	addi	sp,sp,12
 800bbf4:	f800283a 	ret
 800bbf8:	0109c83a 	sub	r4,zero,r4
 800bbfc:	04400044 	movi	r17,1
 800bc00:	043fffc4 	movi	r16,-1
 800bc04:	283ff30e 	bge	r5,zero,800bbd4 <__alt_data_end+0xfc00bbd4>
 800bc08:	014bc83a 	sub	r5,zero,r5
 800bc0c:	003ff106 	br	800bbd4 <__alt_data_end+0xfc00bbd4>

0800bc10 <__udivsi3>:
 800bc10:	000d883a 	mov	r6,zero
 800bc14:	800baf41 	jmpi	800baf4 <udivmodsi4>

0800bc18 <__umodsi3>:
 800bc18:	01800044 	movi	r6,1
 800bc1c:	800baf41 	jmpi	800baf4 <udivmodsi4>

0800bc20 <__adddf3>:
 800bc20:	02000434 	movhi	r8,16
 800bc24:	423fffc4 	addi	r8,r8,-1
 800bc28:	defffb04 	addi	sp,sp,-20
 800bc2c:	2a12703a 	and	r9,r5,r8
 800bc30:	2806d7fa 	srli	r3,r5,31
 800bc34:	3a10703a 	and	r8,r7,r8
 800bc38:	3804d53a 	srli	r2,r7,20
 800bc3c:	3014d77a 	srli	r10,r6,29
 800bc40:	dc000015 	stw	r16,0(sp)
 800bc44:	481290fa 	slli	r9,r9,3
 800bc48:	2820d53a 	srli	r16,r5,20
 800bc4c:	401090fa 	slli	r8,r8,3
 800bc50:	200ad77a 	srli	r5,r4,29
 800bc54:	380ed7fa 	srli	r7,r7,31
 800bc58:	dc800215 	stw	r18,8(sp)
 800bc5c:	dc400115 	stw	r17,4(sp)
 800bc60:	dfc00415 	stw	ra,16(sp)
 800bc64:	dcc00315 	stw	r19,12(sp)
 800bc68:	1c803fcc 	andi	r18,r3,255
 800bc6c:	8401ffcc 	andi	r16,r16,2047
 800bc70:	494ab03a 	or	r5,r9,r5
 800bc74:	202290fa 	slli	r17,r4,3
 800bc78:	1081ffcc 	andi	r2,r2,2047
 800bc7c:	4290b03a 	or	r8,r8,r10
 800bc80:	300c90fa 	slli	r6,r6,3
 800bc84:	91c07026 	beq	r18,r7,800be48 <__adddf3+0x228>
 800bc88:	8087c83a 	sub	r3,r16,r2
 800bc8c:	00c0b30e 	bge	zero,r3,800bf5c <__adddf3+0x33c>
 800bc90:	10002a1e 	bne	r2,zero,800bd3c <__adddf3+0x11c>
 800bc94:	4184b03a 	or	r2,r8,r6
 800bc98:	1000991e 	bne	r2,zero,800bf00 <__adddf3+0x2e0>
 800bc9c:	888001cc 	andi	r2,r17,7
 800bca0:	10005b26 	beq	r2,zero,800be10 <__adddf3+0x1f0>
 800bca4:	88c003cc 	andi	r3,r17,15
 800bca8:	00800104 	movi	r2,4
 800bcac:	18805826 	beq	r3,r2,800be10 <__adddf3+0x1f0>
 800bcb0:	89800104 	addi	r6,r17,4
 800bcb4:	3463803a 	cmpltu	r17,r6,r17
 800bcb8:	2c4b883a 	add	r5,r5,r17
 800bcbc:	2880202c 	andhi	r2,r5,128
 800bcc0:	9007883a 	mov	r3,r18
 800bcc4:	3023883a 	mov	r17,r6
 800bcc8:	10005426 	beq	r2,zero,800be1c <__adddf3+0x1fc>
 800bccc:	84000044 	addi	r16,r16,1
 800bcd0:	0081ffc4 	movi	r2,2047
 800bcd4:	8080c126 	beq	r16,r2,800bfdc <__adddf3+0x3bc>
 800bcd8:	013fe034 	movhi	r4,65408
 800bcdc:	213fffc4 	addi	r4,r4,-1
 800bce0:	290a703a 	and	r5,r5,r4
 800bce4:	2804977a 	slli	r2,r5,29
 800bce8:	280a927a 	slli	r5,r5,9
 800bcec:	8822d0fa 	srli	r17,r17,3
 800bcf0:	8401ffcc 	andi	r16,r16,2047
 800bcf4:	2808d33a 	srli	r4,r5,12
 800bcf8:	1444b03a 	or	r2,r2,r17
 800bcfc:	8401ffcc 	andi	r16,r16,2047
 800bd00:	800a953a 	slli	r5,r16,20
 800bd04:	18c03fcc 	andi	r3,r3,255
 800bd08:	04000434 	movhi	r16,16
 800bd0c:	180697fa 	slli	r3,r3,31
 800bd10:	843fffc4 	addi	r16,r16,-1
 800bd14:	2420703a 	and	r16,r4,r16
 800bd18:	8160b03a 	or	r16,r16,r5
 800bd1c:	80c6b03a 	or	r3,r16,r3
 800bd20:	dfc00417 	ldw	ra,16(sp)
 800bd24:	dcc00317 	ldw	r19,12(sp)
 800bd28:	dc800217 	ldw	r18,8(sp)
 800bd2c:	dc400117 	ldw	r17,4(sp)
 800bd30:	dc000017 	ldw	r16,0(sp)
 800bd34:	dec00504 	addi	sp,sp,20
 800bd38:	f800283a 	ret
 800bd3c:	0081ffc4 	movi	r2,2047
 800bd40:	80bfd626 	beq	r16,r2,800bc9c <__alt_data_end+0xfc00bc9c>
 800bd44:	42002034 	orhi	r8,r8,128
 800bd48:	00800e04 	movi	r2,56
 800bd4c:	10c0a616 	blt	r2,r3,800bfe8 <__adddf3+0x3c8>
 800bd50:	008007c4 	movi	r2,31
 800bd54:	10c0c916 	blt	r2,r3,800c07c <__adddf3+0x45c>
 800bd58:	00800804 	movi	r2,32
 800bd5c:	10c5c83a 	sub	r2,r2,r3
 800bd60:	408e983a 	sll	r7,r8,r2
 800bd64:	30c8d83a 	srl	r4,r6,r3
 800bd68:	3084983a 	sll	r2,r6,r2
 800bd6c:	40c6d83a 	srl	r3,r8,r3
 800bd70:	390cb03a 	or	r6,r7,r4
 800bd74:	1004c03a 	cmpne	r2,r2,zero
 800bd78:	308cb03a 	or	r6,r6,r2
 800bd7c:	898dc83a 	sub	r6,r17,r6
 800bd80:	89a3803a 	cmpltu	r17,r17,r6
 800bd84:	28cbc83a 	sub	r5,r5,r3
 800bd88:	2c4bc83a 	sub	r5,r5,r17
 800bd8c:	3023883a 	mov	r17,r6
 800bd90:	2880202c 	andhi	r2,r5,128
 800bd94:	10006d26 	beq	r2,zero,800bf4c <__adddf3+0x32c>
 800bd98:	04c02034 	movhi	r19,128
 800bd9c:	9cffffc4 	addi	r19,r19,-1
 800bda0:	2ce6703a 	and	r19,r5,r19
 800bda4:	98007e26 	beq	r19,zero,800bfa0 <__adddf3+0x380>
 800bda8:	9809883a 	mov	r4,r19
 800bdac:	800e1bc0 	call	800e1bc <__clzsi2>
 800bdb0:	10fffe04 	addi	r3,r2,-8
 800bdb4:	010007c4 	movi	r4,31
 800bdb8:	20c07f16 	blt	r4,r3,800bfb8 <__adddf3+0x398>
 800bdbc:	01400a04 	movi	r5,40
 800bdc0:	2885c83a 	sub	r2,r5,r2
 800bdc4:	888ad83a 	srl	r5,r17,r2
 800bdc8:	98e6983a 	sll	r19,r19,r3
 800bdcc:	88e2983a 	sll	r17,r17,r3
 800bdd0:	2ce6b03a 	or	r19,r5,r19
 800bdd4:	1c007c16 	blt	r3,r16,800bfc8 <__adddf3+0x3a8>
 800bdd8:	1c21c83a 	sub	r16,r3,r16
 800bddc:	81400044 	addi	r5,r16,1
 800bde0:	00c007c4 	movi	r3,31
 800bde4:	19409816 	blt	r3,r5,800c048 <__adddf3+0x428>
 800bde8:	1c21c83a 	sub	r16,r3,r16
 800bdec:	8c08983a 	sll	r4,r17,r16
 800bdf0:	8946d83a 	srl	r3,r17,r5
 800bdf4:	9c20983a 	sll	r16,r19,r16
 800bdf8:	2008c03a 	cmpne	r4,r4,zero
 800bdfc:	994ad83a 	srl	r5,r19,r5
 800be00:	1c06b03a 	or	r3,r3,r16
 800be04:	1922b03a 	or	r17,r3,r4
 800be08:	0021883a 	mov	r16,zero
 800be0c:	003fa306 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800be10:	2880202c 	andhi	r2,r5,128
 800be14:	9007883a 	mov	r3,r18
 800be18:	103fac1e 	bne	r2,zero,800bccc <__alt_data_end+0xfc00bccc>
 800be1c:	2804977a 	slli	r2,r5,29
 800be20:	8822d0fa 	srli	r17,r17,3
 800be24:	0101ffc4 	movi	r4,2047
 800be28:	280ad0fa 	srli	r5,r5,3
 800be2c:	1444b03a 	or	r2,r2,r17
 800be30:	81002c26 	beq	r16,r4,800bee4 <__adddf3+0x2c4>
 800be34:	8120703a 	and	r16,r16,r4
 800be38:	01000434 	movhi	r4,16
 800be3c:	213fffc4 	addi	r4,r4,-1
 800be40:	2908703a 	and	r4,r5,r4
 800be44:	003fad06 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800be48:	8089c83a 	sub	r4,r16,r2
 800be4c:	01006a0e 	bge	zero,r4,800bff8 <__adddf3+0x3d8>
 800be50:	10003326 	beq	r2,zero,800bf20 <__adddf3+0x300>
 800be54:	0081ffc4 	movi	r2,2047
 800be58:	80bf9026 	beq	r16,r2,800bc9c <__alt_data_end+0xfc00bc9c>
 800be5c:	42002034 	orhi	r8,r8,128
 800be60:	00800e04 	movi	r2,56
 800be64:	1100b116 	blt	r2,r4,800c12c <__adddf3+0x50c>
 800be68:	008007c4 	movi	r2,31
 800be6c:	1100e216 	blt	r2,r4,800c1f8 <__adddf3+0x5d8>
 800be70:	00800804 	movi	r2,32
 800be74:	1105c83a 	sub	r2,r2,r4
 800be78:	4092983a 	sll	r9,r8,r2
 800be7c:	310ed83a 	srl	r7,r6,r4
 800be80:	3084983a 	sll	r2,r6,r2
 800be84:	4110d83a 	srl	r8,r8,r4
 800be88:	49ccb03a 	or	r6,r9,r7
 800be8c:	1004c03a 	cmpne	r2,r2,zero
 800be90:	308cb03a 	or	r6,r6,r2
 800be94:	344d883a 	add	r6,r6,r17
 800be98:	3463803a 	cmpltu	r17,r6,r17
 800be9c:	414b883a 	add	r5,r8,r5
 800bea0:	2c4b883a 	add	r5,r5,r17
 800bea4:	3023883a 	mov	r17,r6
 800bea8:	2880202c 	andhi	r2,r5,128
 800beac:	10002726 	beq	r2,zero,800bf4c <__adddf3+0x32c>
 800beb0:	84000044 	addi	r16,r16,1
 800beb4:	0081ffc4 	movi	r2,2047
 800beb8:	8080ae26 	beq	r16,r2,800c174 <__adddf3+0x554>
 800bebc:	00bfe034 	movhi	r2,65408
 800bec0:	10bfffc4 	addi	r2,r2,-1
 800bec4:	288a703a 	and	r5,r5,r2
 800bec8:	880cd07a 	srli	r6,r17,1
 800becc:	280897fa 	slli	r4,r5,31
 800bed0:	88c0004c 	andi	r3,r17,1
 800bed4:	30e2b03a 	or	r17,r6,r3
 800bed8:	280ad07a 	srli	r5,r5,1
 800bedc:	8922b03a 	or	r17,r17,r4
 800bee0:	003f6e06 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800bee4:	1148b03a 	or	r4,r2,r5
 800bee8:	20003c26 	beq	r4,zero,800bfdc <__adddf3+0x3bc>
 800beec:	29000234 	orhi	r4,r5,8
 800bef0:	01400434 	movhi	r5,16
 800bef4:	297fffc4 	addi	r5,r5,-1
 800bef8:	2148703a 	and	r4,r4,r5
 800befc:	003f7f06 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800bf00:	18ffffc4 	addi	r3,r3,-1
 800bf04:	18004d1e 	bne	r3,zero,800c03c <__adddf3+0x41c>
 800bf08:	898dc83a 	sub	r6,r17,r6
 800bf0c:	89a3803a 	cmpltu	r17,r17,r6
 800bf10:	2a0bc83a 	sub	r5,r5,r8
 800bf14:	2c4bc83a 	sub	r5,r5,r17
 800bf18:	3023883a 	mov	r17,r6
 800bf1c:	003f9c06 	br	800bd90 <__alt_data_end+0xfc00bd90>
 800bf20:	4184b03a 	or	r2,r8,r6
 800bf24:	103f5d26 	beq	r2,zero,800bc9c <__alt_data_end+0xfc00bc9c>
 800bf28:	213fffc4 	addi	r4,r4,-1
 800bf2c:	203fd926 	beq	r4,zero,800be94 <__alt_data_end+0xfc00be94>
 800bf30:	0081ffc4 	movi	r2,2047
 800bf34:	80bfca1e 	bne	r16,r2,800be60 <__alt_data_end+0xfc00be60>
 800bf38:	003f5806 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800bf3c:	10c8b03a 	or	r4,r2,r3
 800bf40:	20008b26 	beq	r4,zero,800c170 <__adddf3+0x550>
 800bf44:	100b883a 	mov	r5,r2
 800bf48:	1823883a 	mov	r17,r3
 800bf4c:	888001cc 	andi	r2,r17,7
 800bf50:	103f541e 	bne	r2,zero,800bca4 <__alt_data_end+0xfc00bca4>
 800bf54:	9007883a 	mov	r3,r18
 800bf58:	003fb006 	br	800be1c <__alt_data_end+0xfc00be1c>
 800bf5c:	1800531e 	bne	r3,zero,800c0ac <__adddf3+0x48c>
 800bf60:	80800044 	addi	r2,r16,1
 800bf64:	1081ffcc 	andi	r2,r2,2047
 800bf68:	00c00044 	movi	r3,1
 800bf6c:	1880990e 	bge	r3,r2,800c1d4 <__adddf3+0x5b4>
 800bf70:	8985c83a 	sub	r2,r17,r6
 800bf74:	8887803a 	cmpltu	r3,r17,r2
 800bf78:	2a27c83a 	sub	r19,r5,r8
 800bf7c:	98e7c83a 	sub	r19,r19,r3
 800bf80:	98c0202c 	andhi	r3,r19,128
 800bf84:	18006226 	beq	r3,zero,800c110 <__adddf3+0x4f0>
 800bf88:	3463c83a 	sub	r17,r6,r17
 800bf8c:	4151c83a 	sub	r8,r8,r5
 800bf90:	344d803a 	cmpltu	r6,r6,r17
 800bf94:	41a7c83a 	sub	r19,r8,r6
 800bf98:	3825883a 	mov	r18,r7
 800bf9c:	983f821e 	bne	r19,zero,800bda8 <__alt_data_end+0xfc00bda8>
 800bfa0:	8809883a 	mov	r4,r17
 800bfa4:	800e1bc0 	call	800e1bc <__clzsi2>
 800bfa8:	10800804 	addi	r2,r2,32
 800bfac:	10fffe04 	addi	r3,r2,-8
 800bfb0:	010007c4 	movi	r4,31
 800bfb4:	20ff810e 	bge	r4,r3,800bdbc <__alt_data_end+0xfc00bdbc>
 800bfb8:	14fff604 	addi	r19,r2,-40
 800bfbc:	8ce6983a 	sll	r19,r17,r19
 800bfc0:	0023883a 	mov	r17,zero
 800bfc4:	1c3f840e 	bge	r3,r16,800bdd8 <__alt_data_end+0xfc00bdd8>
 800bfc8:	017fe034 	movhi	r5,65408
 800bfcc:	297fffc4 	addi	r5,r5,-1
 800bfd0:	80e1c83a 	sub	r16,r16,r3
 800bfd4:	994a703a 	and	r5,r19,r5
 800bfd8:	003f3006 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800bfdc:	0009883a 	mov	r4,zero
 800bfe0:	0005883a 	mov	r2,zero
 800bfe4:	003f4506 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800bfe8:	418cb03a 	or	r6,r8,r6
 800bfec:	300cc03a 	cmpne	r6,r6,zero
 800bff0:	0007883a 	mov	r3,zero
 800bff4:	003f6106 	br	800bd7c <__alt_data_end+0xfc00bd7c>
 800bff8:	2000921e 	bne	r4,zero,800c244 <__adddf3+0x624>
 800bffc:	80800044 	addi	r2,r16,1
 800c000:	11c1ffcc 	andi	r7,r2,2047
 800c004:	01000044 	movi	r4,1
 800c008:	21c0610e 	bge	r4,r7,800c190 <__adddf3+0x570>
 800c00c:	0101ffc4 	movi	r4,2047
 800c010:	1100a326 	beq	r2,r4,800c2a0 <__adddf3+0x680>
 800c014:	344d883a 	add	r6,r6,r17
 800c018:	3463803a 	cmpltu	r17,r6,r17
 800c01c:	414b883a 	add	r5,r8,r5
 800c020:	2c4b883a 	add	r5,r5,r17
 800c024:	282297fa 	slli	r17,r5,31
 800c028:	300cd07a 	srli	r6,r6,1
 800c02c:	280ad07a 	srli	r5,r5,1
 800c030:	1021883a 	mov	r16,r2
 800c034:	89a2b03a 	or	r17,r17,r6
 800c038:	003f1806 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c03c:	0081ffc4 	movi	r2,2047
 800c040:	80bf411e 	bne	r16,r2,800bd48 <__alt_data_end+0xfc00bd48>
 800c044:	003f1506 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c048:	80bff844 	addi	r2,r16,-31
 800c04c:	00c00804 	movi	r3,32
 800c050:	9884d83a 	srl	r2,r19,r2
 800c054:	28c04a26 	beq	r5,r3,800c180 <__adddf3+0x560>
 800c058:	00c00fc4 	movi	r3,63
 800c05c:	1c21c83a 	sub	r16,r3,r16
 800c060:	9c26983a 	sll	r19,r19,r16
 800c064:	9c62b03a 	or	r17,r19,r17
 800c068:	8822c03a 	cmpne	r17,r17,zero
 800c06c:	88a2b03a 	or	r17,r17,r2
 800c070:	000b883a 	mov	r5,zero
 800c074:	0021883a 	mov	r16,zero
 800c078:	003fb406 	br	800bf4c <__alt_data_end+0xfc00bf4c>
 800c07c:	18bff804 	addi	r2,r3,-32
 800c080:	01000804 	movi	r4,32
 800c084:	4084d83a 	srl	r2,r8,r2
 800c088:	19003f26 	beq	r3,r4,800c188 <__adddf3+0x568>
 800c08c:	01001004 	movi	r4,64
 800c090:	20c7c83a 	sub	r3,r4,r3
 800c094:	40d0983a 	sll	r8,r8,r3
 800c098:	418cb03a 	or	r6,r8,r6
 800c09c:	300cc03a 	cmpne	r6,r6,zero
 800c0a0:	308cb03a 	or	r6,r6,r2
 800c0a4:	0007883a 	mov	r3,zero
 800c0a8:	003f3406 	br	800bd7c <__alt_data_end+0xfc00bd7c>
 800c0ac:	80002326 	beq	r16,zero,800c13c <__adddf3+0x51c>
 800c0b0:	0101ffc4 	movi	r4,2047
 800c0b4:	11005e26 	beq	r2,r4,800c230 <__adddf3+0x610>
 800c0b8:	00c7c83a 	sub	r3,zero,r3
 800c0bc:	29402034 	orhi	r5,r5,128
 800c0c0:	01000e04 	movi	r4,56
 800c0c4:	20c07216 	blt	r4,r3,800c290 <__adddf3+0x670>
 800c0c8:	010007c4 	movi	r4,31
 800c0cc:	20c0ce16 	blt	r4,r3,800c408 <__adddf3+0x7e8>
 800c0d0:	01000804 	movi	r4,32
 800c0d4:	20c9c83a 	sub	r4,r4,r3
 800c0d8:	2914983a 	sll	r10,r5,r4
 800c0dc:	88d2d83a 	srl	r9,r17,r3
 800c0e0:	8908983a 	sll	r4,r17,r4
 800c0e4:	28c6d83a 	srl	r3,r5,r3
 800c0e8:	5262b03a 	or	r17,r10,r9
 800c0ec:	2008c03a 	cmpne	r4,r4,zero
 800c0f0:	8922b03a 	or	r17,r17,r4
 800c0f4:	3463c83a 	sub	r17,r6,r17
 800c0f8:	40c7c83a 	sub	r3,r8,r3
 800c0fc:	344d803a 	cmpltu	r6,r6,r17
 800c100:	198bc83a 	sub	r5,r3,r6
 800c104:	1021883a 	mov	r16,r2
 800c108:	3825883a 	mov	r18,r7
 800c10c:	003f2006 	br	800bd90 <__alt_data_end+0xfc00bd90>
 800c110:	9886b03a 	or	r3,r19,r2
 800c114:	1800141e 	bne	r3,zero,800c168 <__adddf3+0x548>
 800c118:	0007883a 	mov	r3,zero
 800c11c:	000b883a 	mov	r5,zero
 800c120:	0023883a 	mov	r17,zero
 800c124:	0021883a 	mov	r16,zero
 800c128:	003f3c06 	br	800be1c <__alt_data_end+0xfc00be1c>
 800c12c:	418cb03a 	or	r6,r8,r6
 800c130:	300cc03a 	cmpne	r6,r6,zero
 800c134:	0011883a 	mov	r8,zero
 800c138:	003f5606 	br	800be94 <__alt_data_end+0xfc00be94>
 800c13c:	2c48b03a 	or	r4,r5,r17
 800c140:	20003b26 	beq	r4,zero,800c230 <__adddf3+0x610>
 800c144:	00c6303a 	nor	r3,zero,r3
 800c148:	1800371e 	bne	r3,zero,800c228 <__adddf3+0x608>
 800c14c:	3463c83a 	sub	r17,r6,r17
 800c150:	414bc83a 	sub	r5,r8,r5
 800c154:	344d803a 	cmpltu	r6,r6,r17
 800c158:	298bc83a 	sub	r5,r5,r6
 800c15c:	1021883a 	mov	r16,r2
 800c160:	3825883a 	mov	r18,r7
 800c164:	003f0a06 	br	800bd90 <__alt_data_end+0xfc00bd90>
 800c168:	1023883a 	mov	r17,r2
 800c16c:	003f0d06 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800c170:	0007883a 	mov	r3,zero
 800c174:	000b883a 	mov	r5,zero
 800c178:	0023883a 	mov	r17,zero
 800c17c:	003f2706 	br	800be1c <__alt_data_end+0xfc00be1c>
 800c180:	0027883a 	mov	r19,zero
 800c184:	003fb706 	br	800c064 <__alt_data_end+0xfc00c064>
 800c188:	0011883a 	mov	r8,zero
 800c18c:	003fc206 	br	800c098 <__alt_data_end+0xfc00c098>
 800c190:	2c44b03a 	or	r2,r5,r17
 800c194:	8000871e 	bne	r16,zero,800c3b4 <__adddf3+0x794>
 800c198:	1000b126 	beq	r2,zero,800c460 <__adddf3+0x840>
 800c19c:	4184b03a 	or	r2,r8,r6
 800c1a0:	103ebe26 	beq	r2,zero,800bc9c <__alt_data_end+0xfc00bc9c>
 800c1a4:	3445883a 	add	r2,r6,r17
 800c1a8:	1463803a 	cmpltu	r17,r2,r17
 800c1ac:	414b883a 	add	r5,r8,r5
 800c1b0:	2c4b883a 	add	r5,r5,r17
 800c1b4:	28c0202c 	andhi	r3,r5,128
 800c1b8:	1023883a 	mov	r17,r2
 800c1bc:	183f6326 	beq	r3,zero,800bf4c <__alt_data_end+0xfc00bf4c>
 800c1c0:	00bfe034 	movhi	r2,65408
 800c1c4:	10bfffc4 	addi	r2,r2,-1
 800c1c8:	2021883a 	mov	r16,r4
 800c1cc:	288a703a 	and	r5,r5,r2
 800c1d0:	003eb206 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c1d4:	2c44b03a 	or	r2,r5,r17
 800c1d8:	8000251e 	bne	r16,zero,800c270 <__adddf3+0x650>
 800c1dc:	10004b1e 	bne	r2,zero,800c30c <__adddf3+0x6ec>
 800c1e0:	4184b03a 	or	r2,r8,r6
 800c1e4:	103fe226 	beq	r2,zero,800c170 <__alt_data_end+0xfc00c170>
 800c1e8:	400b883a 	mov	r5,r8
 800c1ec:	3023883a 	mov	r17,r6
 800c1f0:	3825883a 	mov	r18,r7
 800c1f4:	003ea906 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c1f8:	20bff804 	addi	r2,r4,-32
 800c1fc:	01c00804 	movi	r7,32
 800c200:	4084d83a 	srl	r2,r8,r2
 800c204:	21c07e26 	beq	r4,r7,800c400 <__adddf3+0x7e0>
 800c208:	01c01004 	movi	r7,64
 800c20c:	3909c83a 	sub	r4,r7,r4
 800c210:	4110983a 	sll	r8,r8,r4
 800c214:	418cb03a 	or	r6,r8,r6
 800c218:	300cc03a 	cmpne	r6,r6,zero
 800c21c:	308cb03a 	or	r6,r6,r2
 800c220:	0011883a 	mov	r8,zero
 800c224:	003f1b06 	br	800be94 <__alt_data_end+0xfc00be94>
 800c228:	0101ffc4 	movi	r4,2047
 800c22c:	113fa41e 	bne	r2,r4,800c0c0 <__alt_data_end+0xfc00c0c0>
 800c230:	400b883a 	mov	r5,r8
 800c234:	3023883a 	mov	r17,r6
 800c238:	1021883a 	mov	r16,r2
 800c23c:	3825883a 	mov	r18,r7
 800c240:	003e9606 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c244:	80001a1e 	bne	r16,zero,800c2b0 <__adddf3+0x690>
 800c248:	2c4eb03a 	or	r7,r5,r17
 800c24c:	38005526 	beq	r7,zero,800c3a4 <__adddf3+0x784>
 800c250:	0108303a 	nor	r4,zero,r4
 800c254:	2000511e 	bne	r4,zero,800c39c <__adddf3+0x77c>
 800c258:	89a3883a 	add	r17,r17,r6
 800c25c:	414b883a 	add	r5,r8,r5
 800c260:	898d803a 	cmpltu	r6,r17,r6
 800c264:	298b883a 	add	r5,r5,r6
 800c268:	1021883a 	mov	r16,r2
 800c26c:	003f0e06 	br	800bea8 <__alt_data_end+0xfc00bea8>
 800c270:	1000341e 	bne	r2,zero,800c344 <__adddf3+0x724>
 800c274:	4184b03a 	or	r2,r8,r6
 800c278:	10006f26 	beq	r2,zero,800c438 <__adddf3+0x818>
 800c27c:	400b883a 	mov	r5,r8
 800c280:	3023883a 	mov	r17,r6
 800c284:	3825883a 	mov	r18,r7
 800c288:	0401ffc4 	movi	r16,2047
 800c28c:	003e8306 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c290:	2c62b03a 	or	r17,r5,r17
 800c294:	8822c03a 	cmpne	r17,r17,zero
 800c298:	0007883a 	mov	r3,zero
 800c29c:	003f9506 	br	800c0f4 <__alt_data_end+0xfc00c0f4>
 800c2a0:	1021883a 	mov	r16,r2
 800c2a4:	000b883a 	mov	r5,zero
 800c2a8:	0023883a 	mov	r17,zero
 800c2ac:	003edb06 	br	800be1c <__alt_data_end+0xfc00be1c>
 800c2b0:	01c1ffc4 	movi	r7,2047
 800c2b4:	11c03b26 	beq	r2,r7,800c3a4 <__adddf3+0x784>
 800c2b8:	0109c83a 	sub	r4,zero,r4
 800c2bc:	29402034 	orhi	r5,r5,128
 800c2c0:	01c00e04 	movi	r7,56
 800c2c4:	39006216 	blt	r7,r4,800c450 <__adddf3+0x830>
 800c2c8:	01c007c4 	movi	r7,31
 800c2cc:	39006b16 	blt	r7,r4,800c47c <__adddf3+0x85c>
 800c2d0:	01c00804 	movi	r7,32
 800c2d4:	390fc83a 	sub	r7,r7,r4
 800c2d8:	29d4983a 	sll	r10,r5,r7
 800c2dc:	8912d83a 	srl	r9,r17,r4
 800c2e0:	89ce983a 	sll	r7,r17,r7
 800c2e4:	2908d83a 	srl	r4,r5,r4
 800c2e8:	5262b03a 	or	r17,r10,r9
 800c2ec:	380ac03a 	cmpne	r5,r7,zero
 800c2f0:	8962b03a 	or	r17,r17,r5
 800c2f4:	89a3883a 	add	r17,r17,r6
 800c2f8:	2211883a 	add	r8,r4,r8
 800c2fc:	898d803a 	cmpltu	r6,r17,r6
 800c300:	418b883a 	add	r5,r8,r6
 800c304:	1021883a 	mov	r16,r2
 800c308:	003ee706 	br	800bea8 <__alt_data_end+0xfc00bea8>
 800c30c:	4184b03a 	or	r2,r8,r6
 800c310:	103e6226 	beq	r2,zero,800bc9c <__alt_data_end+0xfc00bc9c>
 800c314:	8987c83a 	sub	r3,r17,r6
 800c318:	88c9803a 	cmpltu	r4,r17,r3
 800c31c:	2a05c83a 	sub	r2,r5,r8
 800c320:	1105c83a 	sub	r2,r2,r4
 800c324:	1100202c 	andhi	r4,r2,128
 800c328:	203f0426 	beq	r4,zero,800bf3c <__alt_data_end+0xfc00bf3c>
 800c32c:	3463c83a 	sub	r17,r6,r17
 800c330:	414bc83a 	sub	r5,r8,r5
 800c334:	344d803a 	cmpltu	r6,r6,r17
 800c338:	298bc83a 	sub	r5,r5,r6
 800c33c:	3825883a 	mov	r18,r7
 800c340:	003e5606 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c344:	4184b03a 	or	r2,r8,r6
 800c348:	10002b26 	beq	r2,zero,800c3f8 <__adddf3+0x7d8>
 800c34c:	2804d0fa 	srli	r2,r5,3
 800c350:	8822d0fa 	srli	r17,r17,3
 800c354:	280a977a 	slli	r5,r5,29
 800c358:	10c0022c 	andhi	r3,r2,8
 800c35c:	2c62b03a 	or	r17,r5,r17
 800c360:	18000826 	beq	r3,zero,800c384 <__adddf3+0x764>
 800c364:	4008d0fa 	srli	r4,r8,3
 800c368:	20c0022c 	andhi	r3,r4,8
 800c36c:	1800051e 	bne	r3,zero,800c384 <__adddf3+0x764>
 800c370:	300cd0fa 	srli	r6,r6,3
 800c374:	4010977a 	slli	r8,r8,29
 800c378:	2005883a 	mov	r2,r4
 800c37c:	3825883a 	mov	r18,r7
 800c380:	41a2b03a 	or	r17,r8,r6
 800c384:	880ad77a 	srli	r5,r17,29
 800c388:	100490fa 	slli	r2,r2,3
 800c38c:	882290fa 	slli	r17,r17,3
 800c390:	0401ffc4 	movi	r16,2047
 800c394:	288ab03a 	or	r5,r5,r2
 800c398:	003e4006 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c39c:	01c1ffc4 	movi	r7,2047
 800c3a0:	11ffc71e 	bne	r2,r7,800c2c0 <__alt_data_end+0xfc00c2c0>
 800c3a4:	400b883a 	mov	r5,r8
 800c3a8:	3023883a 	mov	r17,r6
 800c3ac:	1021883a 	mov	r16,r2
 800c3b0:	003e3a06 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c3b4:	10002d26 	beq	r2,zero,800c46c <__adddf3+0x84c>
 800c3b8:	4184b03a 	or	r2,r8,r6
 800c3bc:	10000e26 	beq	r2,zero,800c3f8 <__adddf3+0x7d8>
 800c3c0:	2804d0fa 	srli	r2,r5,3
 800c3c4:	8822d0fa 	srli	r17,r17,3
 800c3c8:	280a977a 	slli	r5,r5,29
 800c3cc:	10c0022c 	andhi	r3,r2,8
 800c3d0:	2c62b03a 	or	r17,r5,r17
 800c3d4:	183feb26 	beq	r3,zero,800c384 <__alt_data_end+0xfc00c384>
 800c3d8:	4008d0fa 	srli	r4,r8,3
 800c3dc:	20c0022c 	andhi	r3,r4,8
 800c3e0:	183fe81e 	bne	r3,zero,800c384 <__alt_data_end+0xfc00c384>
 800c3e4:	300cd0fa 	srli	r6,r6,3
 800c3e8:	4010977a 	slli	r8,r8,29
 800c3ec:	2005883a 	mov	r2,r4
 800c3f0:	41a2b03a 	or	r17,r8,r6
 800c3f4:	003fe306 	br	800c384 <__alt_data_end+0xfc00c384>
 800c3f8:	0401ffc4 	movi	r16,2047
 800c3fc:	003e2706 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c400:	0011883a 	mov	r8,zero
 800c404:	003f8306 	br	800c214 <__alt_data_end+0xfc00c214>
 800c408:	193ff804 	addi	r4,r3,-32
 800c40c:	02400804 	movi	r9,32
 800c410:	2908d83a 	srl	r4,r5,r4
 800c414:	1a402526 	beq	r3,r9,800c4ac <__adddf3+0x88c>
 800c418:	02401004 	movi	r9,64
 800c41c:	48c7c83a 	sub	r3,r9,r3
 800c420:	28ca983a 	sll	r5,r5,r3
 800c424:	2c62b03a 	or	r17,r5,r17
 800c428:	8822c03a 	cmpne	r17,r17,zero
 800c42c:	8922b03a 	or	r17,r17,r4
 800c430:	0007883a 	mov	r3,zero
 800c434:	003f2f06 	br	800c0f4 <__alt_data_end+0xfc00c0f4>
 800c438:	01402034 	movhi	r5,128
 800c43c:	0007883a 	mov	r3,zero
 800c440:	297fffc4 	addi	r5,r5,-1
 800c444:	047ffe04 	movi	r17,-8
 800c448:	0401ffc4 	movi	r16,2047
 800c44c:	003e7306 	br	800be1c <__alt_data_end+0xfc00be1c>
 800c450:	2c62b03a 	or	r17,r5,r17
 800c454:	8822c03a 	cmpne	r17,r17,zero
 800c458:	0009883a 	mov	r4,zero
 800c45c:	003fa506 	br	800c2f4 <__alt_data_end+0xfc00c2f4>
 800c460:	400b883a 	mov	r5,r8
 800c464:	3023883a 	mov	r17,r6
 800c468:	003e0c06 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c46c:	400b883a 	mov	r5,r8
 800c470:	3023883a 	mov	r17,r6
 800c474:	0401ffc4 	movi	r16,2047
 800c478:	003e0806 	br	800bc9c <__alt_data_end+0xfc00bc9c>
 800c47c:	21fff804 	addi	r7,r4,-32
 800c480:	02400804 	movi	r9,32
 800c484:	29ced83a 	srl	r7,r5,r7
 800c488:	22400a26 	beq	r4,r9,800c4b4 <__adddf3+0x894>
 800c48c:	02401004 	movi	r9,64
 800c490:	4909c83a 	sub	r4,r9,r4
 800c494:	290a983a 	sll	r5,r5,r4
 800c498:	2c62b03a 	or	r17,r5,r17
 800c49c:	8822c03a 	cmpne	r17,r17,zero
 800c4a0:	89e2b03a 	or	r17,r17,r7
 800c4a4:	0009883a 	mov	r4,zero
 800c4a8:	003f9206 	br	800c2f4 <__alt_data_end+0xfc00c2f4>
 800c4ac:	000b883a 	mov	r5,zero
 800c4b0:	003fdc06 	br	800c424 <__alt_data_end+0xfc00c424>
 800c4b4:	000b883a 	mov	r5,zero
 800c4b8:	003ff706 	br	800c498 <__alt_data_end+0xfc00c498>

0800c4bc <__divdf3>:
 800c4bc:	defff204 	addi	sp,sp,-56
 800c4c0:	dd000815 	stw	r20,32(sp)
 800c4c4:	2828d53a 	srli	r20,r5,20
 800c4c8:	dd800a15 	stw	r22,40(sp)
 800c4cc:	282cd7fa 	srli	r22,r5,31
 800c4d0:	dc000415 	stw	r16,16(sp)
 800c4d4:	04000434 	movhi	r16,16
 800c4d8:	df000c15 	stw	fp,48(sp)
 800c4dc:	dcc00715 	stw	r19,28(sp)
 800c4e0:	dc800615 	stw	r18,24(sp)
 800c4e4:	dc400515 	stw	r17,20(sp)
 800c4e8:	843fffc4 	addi	r16,r16,-1
 800c4ec:	dfc00d15 	stw	ra,52(sp)
 800c4f0:	ddc00b15 	stw	r23,44(sp)
 800c4f4:	dd400915 	stw	r21,36(sp)
 800c4f8:	a501ffcc 	andi	r20,r20,2047
 800c4fc:	2025883a 	mov	r18,r4
 800c500:	2027883a 	mov	r19,r4
 800c504:	2c22703a 	and	r17,r5,r16
 800c508:	b7003fcc 	andi	fp,r22,255
 800c50c:	a0005e26 	beq	r20,zero,800c688 <__divdf3+0x1cc>
 800c510:	0081ffc4 	movi	r2,2047
 800c514:	a0803526 	beq	r20,r2,800c5ec <__divdf3+0x130>
 800c518:	8c000434 	orhi	r16,r17,16
 800c51c:	2004d77a 	srli	r2,r4,29
 800c520:	802090fa 	slli	r16,r16,3
 800c524:	202690fa 	slli	r19,r4,3
 800c528:	a53f0044 	addi	r20,r20,-1023
 800c52c:	80a2b03a 	or	r17,r16,r2
 800c530:	0025883a 	mov	r18,zero
 800c534:	0011883a 	mov	r8,zero
 800c538:	380ad53a 	srli	r5,r7,20
 800c53c:	382ed7fa 	srli	r23,r7,31
 800c540:	04000434 	movhi	r16,16
 800c544:	843fffc4 	addi	r16,r16,-1
 800c548:	2941ffcc 	andi	r5,r5,2047
 800c54c:	302b883a 	mov	r21,r6
 800c550:	3c20703a 	and	r16,r7,r16
 800c554:	ba403fcc 	andi	r9,r23,255
 800c558:	28006726 	beq	r5,zero,800c6f8 <__divdf3+0x23c>
 800c55c:	0081ffc4 	movi	r2,2047
 800c560:	28805f26 	beq	r5,r2,800c6e0 <__divdf3+0x224>
 800c564:	84000434 	orhi	r16,r16,16
 800c568:	3004d77a 	srli	r2,r6,29
 800c56c:	802090fa 	slli	r16,r16,3
 800c570:	302a90fa 	slli	r21,r6,3
 800c574:	297f0044 	addi	r5,r5,-1023
 800c578:	80a0b03a 	or	r16,r16,r2
 800c57c:	000f883a 	mov	r7,zero
 800c580:	3c86b03a 	or	r3,r7,r18
 800c584:	180690ba 	slli	r3,r3,2
 800c588:	00820074 	movhi	r2,2049
 800c58c:	10b16b04 	addi	r2,r2,-14932
 800c590:	1887883a 	add	r3,r3,r2
 800c594:	18c00017 	ldw	r3,0(r3)
 800c598:	b5c8f03a 	xor	r4,r22,r23
 800c59c:	200d883a 	mov	r6,r4
 800c5a0:	24803fcc 	andi	r18,r4,255
 800c5a4:	a169c83a 	sub	r20,r20,r5
 800c5a8:	1800683a 	jmp	r3
 800c5ac:	0800c7f4 	orhi	zero,at,799
 800c5b0:	0800c624 	muli	zero,at,792
 800c5b4:	0800c7b8 	rdprs	zero,at,798
 800c5b8:	0800c608 	cmpgei	zero,at,792
 800c5bc:	0800c7b8 	rdprs	zero,at,798
 800c5c0:	0800c78c 	andi	zero,at,798
 800c5c4:	0800c7b8 	rdprs	zero,at,798
 800c5c8:	0800c608 	cmpgei	zero,at,792
 800c5cc:	0800c624 	muli	zero,at,792
 800c5d0:	0800c624 	muli	zero,at,792
 800c5d4:	0800c78c 	andi	zero,at,798
 800c5d8:	0800c608 	cmpgei	zero,at,792
 800c5dc:	0800c618 	cmpnei	zero,at,792
 800c5e0:	0800c618 	cmpnei	zero,at,792
 800c5e4:	0800c618 	cmpnei	zero,at,792
 800c5e8:	0800c7c8 	cmpgei	zero,at,799
 800c5ec:	8904b03a 	or	r2,r17,r4
 800c5f0:	1000631e 	bne	r2,zero,800c780 <__divdf3+0x2c4>
 800c5f4:	04800204 	movi	r18,8
 800c5f8:	0023883a 	mov	r17,zero
 800c5fc:	0027883a 	mov	r19,zero
 800c600:	02000084 	movi	r8,2
 800c604:	003fcc06 	br	800c538 <__alt_data_end+0xfc00c538>
 800c608:	8023883a 	mov	r17,r16
 800c60c:	a827883a 	mov	r19,r21
 800c610:	4839883a 	mov	fp,r9
 800c614:	3811883a 	mov	r8,r7
 800c618:	00800084 	movi	r2,2
 800c61c:	40812a1e 	bne	r8,r2,800cac8 <__divdf3+0x60c>
 800c620:	e025883a 	mov	r18,fp
 800c624:	9180004c 	andi	r6,r18,1
 800c628:	0101ffc4 	movi	r4,2047
 800c62c:	000b883a 	mov	r5,zero
 800c630:	0027883a 	mov	r19,zero
 800c634:	2008953a 	slli	r4,r4,20
 800c638:	30c03fcc 	andi	r3,r6,255
 800c63c:	04000434 	movhi	r16,16
 800c640:	180697fa 	slli	r3,r3,31
 800c644:	843fffc4 	addi	r16,r16,-1
 800c648:	2c20703a 	and	r16,r5,r16
 800c64c:	8120b03a 	or	r16,r16,r4
 800c650:	80c6b03a 	or	r3,r16,r3
 800c654:	9805883a 	mov	r2,r19
 800c658:	dfc00d17 	ldw	ra,52(sp)
 800c65c:	df000c17 	ldw	fp,48(sp)
 800c660:	ddc00b17 	ldw	r23,44(sp)
 800c664:	dd800a17 	ldw	r22,40(sp)
 800c668:	dd400917 	ldw	r21,36(sp)
 800c66c:	dd000817 	ldw	r20,32(sp)
 800c670:	dcc00717 	ldw	r19,28(sp)
 800c674:	dc800617 	ldw	r18,24(sp)
 800c678:	dc400517 	ldw	r17,20(sp)
 800c67c:	dc000417 	ldw	r16,16(sp)
 800c680:	dec00e04 	addi	sp,sp,56
 800c684:	f800283a 	ret
 800c688:	8904b03a 	or	r2,r17,r4
 800c68c:	10003726 	beq	r2,zero,800c76c <__divdf3+0x2b0>
 800c690:	88011c26 	beq	r17,zero,800cb04 <__divdf3+0x648>
 800c694:	8809883a 	mov	r4,r17
 800c698:	d9800315 	stw	r6,12(sp)
 800c69c:	d9c00115 	stw	r7,4(sp)
 800c6a0:	800e1bc0 	call	800e1bc <__clzsi2>
 800c6a4:	d9800317 	ldw	r6,12(sp)
 800c6a8:	d9c00117 	ldw	r7,4(sp)
 800c6ac:	1007883a 	mov	r3,r2
 800c6b0:	01000a04 	movi	r4,40
 800c6b4:	1cfffe04 	addi	r19,r3,-8
 800c6b8:	20c9c83a 	sub	r4,r4,r3
 800c6bc:	8cca983a 	sll	r5,r17,r19
 800c6c0:	9108d83a 	srl	r4,r18,r4
 800c6c4:	94e6983a 	sll	r19,r18,r19
 800c6c8:	2162b03a 	or	r17,r4,r5
 800c6cc:	053f0344 	movi	r20,-1011
 800c6d0:	a0e9c83a 	sub	r20,r20,r3
 800c6d4:	0025883a 	mov	r18,zero
 800c6d8:	0011883a 	mov	r8,zero
 800c6dc:	003f9606 	br	800c538 <__alt_data_end+0xfc00c538>
 800c6e0:	8184b03a 	or	r2,r16,r6
 800c6e4:	10001f1e 	bne	r2,zero,800c764 <__divdf3+0x2a8>
 800c6e8:	0021883a 	mov	r16,zero
 800c6ec:	002b883a 	mov	r21,zero
 800c6f0:	01c00084 	movi	r7,2
 800c6f4:	003fa206 	br	800c580 <__alt_data_end+0xfc00c580>
 800c6f8:	8184b03a 	or	r2,r16,r6
 800c6fc:	10001526 	beq	r2,zero,800c754 <__divdf3+0x298>
 800c700:	80010c26 	beq	r16,zero,800cb34 <__divdf3+0x678>
 800c704:	8009883a 	mov	r4,r16
 800c708:	d9800315 	stw	r6,12(sp)
 800c70c:	da000215 	stw	r8,8(sp)
 800c710:	da400015 	stw	r9,0(sp)
 800c714:	800e1bc0 	call	800e1bc <__clzsi2>
 800c718:	d9800317 	ldw	r6,12(sp)
 800c71c:	da000217 	ldw	r8,8(sp)
 800c720:	da400017 	ldw	r9,0(sp)
 800c724:	1007883a 	mov	r3,r2
 800c728:	01000a04 	movi	r4,40
 800c72c:	1d7ffe04 	addi	r21,r3,-8
 800c730:	20c9c83a 	sub	r4,r4,r3
 800c734:	8560983a 	sll	r16,r16,r21
 800c738:	3108d83a 	srl	r4,r6,r4
 800c73c:	356a983a 	sll	r21,r6,r21
 800c740:	2420b03a 	or	r16,r4,r16
 800c744:	017f0344 	movi	r5,-1011
 800c748:	28cbc83a 	sub	r5,r5,r3
 800c74c:	000f883a 	mov	r7,zero
 800c750:	003f8b06 	br	800c580 <__alt_data_end+0xfc00c580>
 800c754:	0021883a 	mov	r16,zero
 800c758:	002b883a 	mov	r21,zero
 800c75c:	01c00044 	movi	r7,1
 800c760:	003f8706 	br	800c580 <__alt_data_end+0xfc00c580>
 800c764:	01c000c4 	movi	r7,3
 800c768:	003f8506 	br	800c580 <__alt_data_end+0xfc00c580>
 800c76c:	04800104 	movi	r18,4
 800c770:	0023883a 	mov	r17,zero
 800c774:	0027883a 	mov	r19,zero
 800c778:	02000044 	movi	r8,1
 800c77c:	003f6e06 	br	800c538 <__alt_data_end+0xfc00c538>
 800c780:	04800304 	movi	r18,12
 800c784:	020000c4 	movi	r8,3
 800c788:	003f6b06 	br	800c538 <__alt_data_end+0xfc00c538>
 800c78c:	01400434 	movhi	r5,16
 800c790:	000d883a 	mov	r6,zero
 800c794:	297fffc4 	addi	r5,r5,-1
 800c798:	04ffffc4 	movi	r19,-1
 800c79c:	0101ffc4 	movi	r4,2047
 800c7a0:	003fa406 	br	800c634 <__alt_data_end+0xfc00c634>
 800c7a4:	043f0084 	movi	r16,-1022
 800c7a8:	8521c83a 	sub	r16,r16,r20
 800c7ac:	00800e04 	movi	r2,56
 800c7b0:	1401200e 	bge	r2,r16,800cc34 <__divdf3+0x778>
 800c7b4:	9180004c 	andi	r6,r18,1
 800c7b8:	0009883a 	mov	r4,zero
 800c7bc:	000b883a 	mov	r5,zero
 800c7c0:	0027883a 	mov	r19,zero
 800c7c4:	003f9b06 	br	800c634 <__alt_data_end+0xfc00c634>
 800c7c8:	8880022c 	andhi	r2,r17,8
 800c7cc:	1000c726 	beq	r2,zero,800caec <__divdf3+0x630>
 800c7d0:	8080022c 	andhi	r2,r16,8
 800c7d4:	1000c51e 	bne	r2,zero,800caec <__divdf3+0x630>
 800c7d8:	00800434 	movhi	r2,16
 800c7dc:	81400234 	orhi	r5,r16,8
 800c7e0:	10bfffc4 	addi	r2,r2,-1
 800c7e4:	b80d883a 	mov	r6,r23
 800c7e8:	288a703a 	and	r5,r5,r2
 800c7ec:	a827883a 	mov	r19,r21
 800c7f0:	003fea06 	br	800c79c <__alt_data_end+0xfc00c79c>
 800c7f4:	8440ea36 	bltu	r16,r17,800cba0 <__divdf3+0x6e4>
 800c7f8:	8c00e826 	beq	r17,r16,800cb9c <__divdf3+0x6e0>
 800c7fc:	a53fffc4 	addi	r20,r20,-1
 800c800:	882d883a 	mov	r22,r17
 800c804:	000d883a 	mov	r6,zero
 800c808:	a804d63a 	srli	r2,r21,24
 800c80c:	8020923a 	slli	r16,r16,8
 800c810:	b009883a 	mov	r4,r22
 800c814:	d9800315 	stw	r6,12(sp)
 800c818:	1420b03a 	or	r16,r2,r16
 800c81c:	802ed43a 	srli	r23,r16,16
 800c820:	873fffcc 	andi	fp,r16,65535
 800c824:	a82a923a 	slli	r21,r21,8
 800c828:	b80b883a 	mov	r5,r23
 800c82c:	800bc100 	call	800bc10 <__udivsi3>
 800c830:	b009883a 	mov	r4,r22
 800c834:	b80b883a 	mov	r5,r23
 800c838:	1023883a 	mov	r17,r2
 800c83c:	800bc180 	call	800bc18 <__umodsi3>
 800c840:	1004943a 	slli	r2,r2,16
 800c844:	9808d43a 	srli	r4,r19,16
 800c848:	8f2d383a 	mul	r22,r17,fp
 800c84c:	d9800317 	ldw	r6,12(sp)
 800c850:	1106b03a 	or	r3,r2,r4
 800c854:	1d80062e 	bgeu	r3,r22,800c870 <__divdf3+0x3b4>
 800c858:	1c07883a 	add	r3,r3,r16
 800c85c:	88bfffc4 	addi	r2,r17,-1
 800c860:	1c00dc36 	bltu	r3,r16,800cbd4 <__divdf3+0x718>
 800c864:	1d80db2e 	bgeu	r3,r22,800cbd4 <__divdf3+0x718>
 800c868:	8c7fff84 	addi	r17,r17,-2
 800c86c:	1c07883a 	add	r3,r3,r16
 800c870:	1dadc83a 	sub	r22,r3,r22
 800c874:	b009883a 	mov	r4,r22
 800c878:	b80b883a 	mov	r5,r23
 800c87c:	d9800315 	stw	r6,12(sp)
 800c880:	800bc100 	call	800bc10 <__udivsi3>
 800c884:	b009883a 	mov	r4,r22
 800c888:	b80b883a 	mov	r5,r23
 800c88c:	d8800015 	stw	r2,0(sp)
 800c890:	800bc180 	call	800bc18 <__umodsi3>
 800c894:	da400017 	ldw	r9,0(sp)
 800c898:	1004943a 	slli	r2,r2,16
 800c89c:	9cffffcc 	andi	r19,r19,65535
 800c8a0:	4f07383a 	mul	r3,r9,fp
 800c8a4:	14c8b03a 	or	r4,r2,r19
 800c8a8:	d9800317 	ldw	r6,12(sp)
 800c8ac:	20c0062e 	bgeu	r4,r3,800c8c8 <__divdf3+0x40c>
 800c8b0:	2409883a 	add	r4,r4,r16
 800c8b4:	48bfffc4 	addi	r2,r9,-1
 800c8b8:	2400c436 	bltu	r4,r16,800cbcc <__divdf3+0x710>
 800c8bc:	20c0c32e 	bgeu	r4,r3,800cbcc <__divdf3+0x710>
 800c8c0:	4a7fff84 	addi	r9,r9,-2
 800c8c4:	2409883a 	add	r4,r4,r16
 800c8c8:	8822943a 	slli	r17,r17,16
 800c8cc:	a80ed43a 	srli	r7,r21,16
 800c8d0:	aa3fffcc 	andi	r8,r21,65535
 800c8d4:	4c62b03a 	or	r17,r9,r17
 800c8d8:	8816d43a 	srli	r11,r17,16
 800c8dc:	897fffcc 	andi	r5,r17,65535
 800c8e0:	2a15383a 	mul	r10,r5,r8
 800c8e4:	5a19383a 	mul	r12,r11,r8
 800c8e8:	29cb383a 	mul	r5,r5,r7
 800c8ec:	5012d43a 	srli	r9,r10,16
 800c8f0:	20c5c83a 	sub	r2,r4,r3
 800c8f4:	614b883a 	add	r5,r12,r5
 800c8f8:	2a4b883a 	add	r5,r5,r9
 800c8fc:	59c7383a 	mul	r3,r11,r7
 800c900:	2b00022e 	bgeu	r5,r12,800c90c <__divdf3+0x450>
 800c904:	01000074 	movhi	r4,1
 800c908:	1907883a 	add	r3,r3,r4
 800c90c:	2808d43a 	srli	r4,r5,16
 800c910:	280a943a 	slli	r5,r5,16
 800c914:	54ffffcc 	andi	r19,r10,65535
 800c918:	1907883a 	add	r3,r3,r4
 800c91c:	2ccb883a 	add	r5,r5,r19
 800c920:	10c09336 	bltu	r2,r3,800cb70 <__divdf3+0x6b4>
 800c924:	10c0ad26 	beq	r2,r3,800cbdc <__divdf3+0x720>
 800c928:	10c7c83a 	sub	r3,r2,r3
 800c92c:	3167c83a 	sub	r19,r6,r5
 800c930:	34ed803a 	cmpltu	r22,r6,r19
 800c934:	1dadc83a 	sub	r22,r3,r22
 800c938:	b400b226 	beq	r22,r16,800cc04 <__divdf3+0x748>
 800c93c:	b009883a 	mov	r4,r22
 800c940:	b80b883a 	mov	r5,r23
 800c944:	d9c00115 	stw	r7,4(sp)
 800c948:	da000215 	stw	r8,8(sp)
 800c94c:	800bc100 	call	800bc10 <__udivsi3>
 800c950:	b009883a 	mov	r4,r22
 800c954:	b80b883a 	mov	r5,r23
 800c958:	d8800315 	stw	r2,12(sp)
 800c95c:	800bc180 	call	800bc18 <__umodsi3>
 800c960:	d9800317 	ldw	r6,12(sp)
 800c964:	1004943a 	slli	r2,r2,16
 800c968:	9808d43a 	srli	r4,r19,16
 800c96c:	372d383a 	mul	r22,r6,fp
 800c970:	d9c00117 	ldw	r7,4(sp)
 800c974:	1106b03a 	or	r3,r2,r4
 800c978:	da000217 	ldw	r8,8(sp)
 800c97c:	1d80062e 	bgeu	r3,r22,800c998 <__divdf3+0x4dc>
 800c980:	1c07883a 	add	r3,r3,r16
 800c984:	30bfffc4 	addi	r2,r6,-1
 800c988:	1c00a036 	bltu	r3,r16,800cc0c <__divdf3+0x750>
 800c98c:	1d809f2e 	bgeu	r3,r22,800cc0c <__divdf3+0x750>
 800c990:	31bfff84 	addi	r6,r6,-2
 800c994:	1c07883a 	add	r3,r3,r16
 800c998:	1dadc83a 	sub	r22,r3,r22
 800c99c:	b009883a 	mov	r4,r22
 800c9a0:	b80b883a 	mov	r5,r23
 800c9a4:	d9800315 	stw	r6,12(sp)
 800c9a8:	d9c00115 	stw	r7,4(sp)
 800c9ac:	da000215 	stw	r8,8(sp)
 800c9b0:	800bc100 	call	800bc10 <__udivsi3>
 800c9b4:	b009883a 	mov	r4,r22
 800c9b8:	b80b883a 	mov	r5,r23
 800c9bc:	d8800015 	stw	r2,0(sp)
 800c9c0:	800bc180 	call	800bc18 <__umodsi3>
 800c9c4:	da400017 	ldw	r9,0(sp)
 800c9c8:	1004943a 	slli	r2,r2,16
 800c9cc:	993fffcc 	andi	r4,r19,65535
 800c9d0:	4f39383a 	mul	fp,r9,fp
 800c9d4:	1106b03a 	or	r3,r2,r4
 800c9d8:	d9800317 	ldw	r6,12(sp)
 800c9dc:	d9c00117 	ldw	r7,4(sp)
 800c9e0:	da000217 	ldw	r8,8(sp)
 800c9e4:	1f00062e 	bgeu	r3,fp,800ca00 <__divdf3+0x544>
 800c9e8:	1c07883a 	add	r3,r3,r16
 800c9ec:	48bfffc4 	addi	r2,r9,-1
 800c9f0:	1c008836 	bltu	r3,r16,800cc14 <__divdf3+0x758>
 800c9f4:	1f00872e 	bgeu	r3,fp,800cc14 <__divdf3+0x758>
 800c9f8:	4a7fff84 	addi	r9,r9,-2
 800c9fc:	1c07883a 	add	r3,r3,r16
 800ca00:	3008943a 	slli	r4,r6,16
 800ca04:	1f07c83a 	sub	r3,r3,fp
 800ca08:	4926b03a 	or	r19,r9,r4
 800ca0c:	993fffcc 	andi	r4,r19,65535
 800ca10:	980cd43a 	srli	r6,r19,16
 800ca14:	220b383a 	mul	r5,r4,r8
 800ca18:	21c5383a 	mul	r2,r4,r7
 800ca1c:	3211383a 	mul	r8,r6,r8
 800ca20:	2808d43a 	srli	r4,r5,16
 800ca24:	31cf383a 	mul	r7,r6,r7
 800ca28:	4085883a 	add	r2,r8,r2
 800ca2c:	1105883a 	add	r2,r2,r4
 800ca30:	1200022e 	bgeu	r2,r8,800ca3c <__divdf3+0x580>
 800ca34:	01000074 	movhi	r4,1
 800ca38:	390f883a 	add	r7,r7,r4
 800ca3c:	1008d43a 	srli	r4,r2,16
 800ca40:	1004943a 	slli	r2,r2,16
 800ca44:	297fffcc 	andi	r5,r5,65535
 800ca48:	390f883a 	add	r7,r7,r4
 800ca4c:	1145883a 	add	r2,r2,r5
 800ca50:	19c06536 	bltu	r3,r7,800cbe8 <__divdf3+0x72c>
 800ca54:	19c09f26 	beq	r3,r7,800ccd4 <__divdf3+0x818>
 800ca58:	9cc00054 	ori	r19,r19,1
 800ca5c:	a100ffc4 	addi	r4,r20,1023
 800ca60:	013f500e 	bge	zero,r4,800c7a4 <__alt_data_end+0xfc00c7a4>
 800ca64:	988001cc 	andi	r2,r19,7
 800ca68:	10000726 	beq	r2,zero,800ca88 <__divdf3+0x5cc>
 800ca6c:	98c003cc 	andi	r3,r19,15
 800ca70:	00800104 	movi	r2,4
 800ca74:	18800426 	beq	r3,r2,800ca88 <__divdf3+0x5cc>
 800ca78:	9885883a 	add	r2,r19,r2
 800ca7c:	14e1803a 	cmpltu	r16,r2,r19
 800ca80:	8c23883a 	add	r17,r17,r16
 800ca84:	1027883a 	mov	r19,r2
 800ca88:	8880402c 	andhi	r2,r17,256
 800ca8c:	10000426 	beq	r2,zero,800caa0 <__divdf3+0x5e4>
 800ca90:	00bfc034 	movhi	r2,65280
 800ca94:	10bfffc4 	addi	r2,r2,-1
 800ca98:	a1010004 	addi	r4,r20,1024
 800ca9c:	88a2703a 	and	r17,r17,r2
 800caa0:	0081ff84 	movi	r2,2046
 800caa4:	113edf16 	blt	r2,r4,800c624 <__alt_data_end+0xfc00c624>
 800caa8:	9826d0fa 	srli	r19,r19,3
 800caac:	8804977a 	slli	r2,r17,29
 800cab0:	8820927a 	slli	r16,r17,9
 800cab4:	2101ffcc 	andi	r4,r4,2047
 800cab8:	14e6b03a 	or	r19,r2,r19
 800cabc:	800ad33a 	srli	r5,r16,12
 800cac0:	9180004c 	andi	r6,r18,1
 800cac4:	003edb06 	br	800c634 <__alt_data_end+0xfc00c634>
 800cac8:	008000c4 	movi	r2,3
 800cacc:	4080a826 	beq	r8,r2,800cd70 <__divdf3+0x8b4>
 800cad0:	00800044 	movi	r2,1
 800cad4:	4080551e 	bne	r8,r2,800cc2c <__divdf3+0x770>
 800cad8:	e00d883a 	mov	r6,fp
 800cadc:	0009883a 	mov	r4,zero
 800cae0:	000b883a 	mov	r5,zero
 800cae4:	0027883a 	mov	r19,zero
 800cae8:	003ed206 	br	800c634 <__alt_data_end+0xfc00c634>
 800caec:	00800434 	movhi	r2,16
 800caf0:	89400234 	orhi	r5,r17,8
 800caf4:	10bfffc4 	addi	r2,r2,-1
 800caf8:	b00d883a 	mov	r6,r22
 800cafc:	288a703a 	and	r5,r5,r2
 800cb00:	003f2606 	br	800c79c <__alt_data_end+0xfc00c79c>
 800cb04:	d9800315 	stw	r6,12(sp)
 800cb08:	d9c00115 	stw	r7,4(sp)
 800cb0c:	800e1bc0 	call	800e1bc <__clzsi2>
 800cb10:	10c00804 	addi	r3,r2,32
 800cb14:	010009c4 	movi	r4,39
 800cb18:	d9800317 	ldw	r6,12(sp)
 800cb1c:	d9c00117 	ldw	r7,4(sp)
 800cb20:	20fee30e 	bge	r4,r3,800c6b0 <__alt_data_end+0xfc00c6b0>
 800cb24:	117ffe04 	addi	r5,r2,-8
 800cb28:	9162983a 	sll	r17,r18,r5
 800cb2c:	0027883a 	mov	r19,zero
 800cb30:	003ee606 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800cb34:	3009883a 	mov	r4,r6
 800cb38:	d9800315 	stw	r6,12(sp)
 800cb3c:	da000215 	stw	r8,8(sp)
 800cb40:	da400015 	stw	r9,0(sp)
 800cb44:	800e1bc0 	call	800e1bc <__clzsi2>
 800cb48:	10c00804 	addi	r3,r2,32
 800cb4c:	010009c4 	movi	r4,39
 800cb50:	d9800317 	ldw	r6,12(sp)
 800cb54:	da000217 	ldw	r8,8(sp)
 800cb58:	da400017 	ldw	r9,0(sp)
 800cb5c:	20fef20e 	bge	r4,r3,800c728 <__alt_data_end+0xfc00c728>
 800cb60:	10bffe04 	addi	r2,r2,-8
 800cb64:	a8a0983a 	sll	r16,r21,r2
 800cb68:	002b883a 	mov	r21,zero
 800cb6c:	003ef506 	br	800c744 <__alt_data_end+0xfc00c744>
 800cb70:	354d883a 	add	r6,r6,r21
 800cb74:	3549803a 	cmpltu	r4,r6,r21
 800cb78:	2409883a 	add	r4,r4,r16
 800cb7c:	2089883a 	add	r4,r4,r2
 800cb80:	88bfffc4 	addi	r2,r17,-1
 800cb84:	81000c2e 	bgeu	r16,r4,800cbb8 <__divdf3+0x6fc>
 800cb88:	20c04436 	bltu	r4,r3,800cc9c <__divdf3+0x7e0>
 800cb8c:	19006f26 	beq	r3,r4,800cd4c <__divdf3+0x890>
 800cb90:	20c7c83a 	sub	r3,r4,r3
 800cb94:	1023883a 	mov	r17,r2
 800cb98:	003f6406 	br	800c92c <__alt_data_end+0xfc00c92c>
 800cb9c:	9d7f1736 	bltu	r19,r21,800c7fc <__alt_data_end+0xfc00c7fc>
 800cba0:	9806d07a 	srli	r3,r19,1
 800cba4:	880497fa 	slli	r2,r17,31
 800cba8:	980c97fa 	slli	r6,r19,31
 800cbac:	882cd07a 	srli	r22,r17,1
 800cbb0:	18a6b03a 	or	r19,r3,r2
 800cbb4:	003f1406 	br	800c808 <__alt_data_end+0xfc00c808>
 800cbb8:	243ff51e 	bne	r4,r16,800cb90 <__alt_data_end+0xfc00cb90>
 800cbbc:	357ff22e 	bgeu	r6,r21,800cb88 <__alt_data_end+0xfc00cb88>
 800cbc0:	80c7c83a 	sub	r3,r16,r3
 800cbc4:	1023883a 	mov	r17,r2
 800cbc8:	003f5806 	br	800c92c <__alt_data_end+0xfc00c92c>
 800cbcc:	1013883a 	mov	r9,r2
 800cbd0:	003f3d06 	br	800c8c8 <__alt_data_end+0xfc00c8c8>
 800cbd4:	1023883a 	mov	r17,r2
 800cbd8:	003f2506 	br	800c870 <__alt_data_end+0xfc00c870>
 800cbdc:	317fe436 	bltu	r6,r5,800cb70 <__alt_data_end+0xfc00cb70>
 800cbe0:	0007883a 	mov	r3,zero
 800cbe4:	003f5106 	br	800c92c <__alt_data_end+0xfc00c92c>
 800cbe8:	1c07883a 	add	r3,r3,r16
 800cbec:	993fffc4 	addi	r4,r19,-1
 800cbf0:	1c000a2e 	bgeu	r3,r16,800cc1c <__divdf3+0x760>
 800cbf4:	2027883a 	mov	r19,r4
 800cbf8:	19ff971e 	bne	r3,r7,800ca58 <__alt_data_end+0xfc00ca58>
 800cbfc:	a8bf961e 	bne	r21,r2,800ca58 <__alt_data_end+0xfc00ca58>
 800cc00:	003f9606 	br	800ca5c <__alt_data_end+0xfc00ca5c>
 800cc04:	04ffffc4 	movi	r19,-1
 800cc08:	003f9406 	br	800ca5c <__alt_data_end+0xfc00ca5c>
 800cc0c:	100d883a 	mov	r6,r2
 800cc10:	003f6106 	br	800c998 <__alt_data_end+0xfc00c998>
 800cc14:	1013883a 	mov	r9,r2
 800cc18:	003f7906 	br	800ca00 <__alt_data_end+0xfc00ca00>
 800cc1c:	19c02636 	bltu	r3,r7,800ccb8 <__divdf3+0x7fc>
 800cc20:	38c04d26 	beq	r7,r3,800cd58 <__divdf3+0x89c>
 800cc24:	2027883a 	mov	r19,r4
 800cc28:	003f8b06 	br	800ca58 <__alt_data_end+0xfc00ca58>
 800cc2c:	e025883a 	mov	r18,fp
 800cc30:	003f8a06 	br	800ca5c <__alt_data_end+0xfc00ca5c>
 800cc34:	008007c4 	movi	r2,31
 800cc38:	14002a16 	blt	r2,r16,800cce4 <__divdf3+0x828>
 800cc3c:	a5010784 	addi	r20,r20,1054
 800cc40:	8d04983a 	sll	r2,r17,r20
 800cc44:	9c06d83a 	srl	r3,r19,r16
 800cc48:	9d28983a 	sll	r20,r19,r20
 800cc4c:	8c20d83a 	srl	r16,r17,r16
 800cc50:	1886b03a 	or	r3,r3,r2
 800cc54:	a004c03a 	cmpne	r2,r20,zero
 800cc58:	1884b03a 	or	r2,r3,r2
 800cc5c:	10c001cc 	andi	r3,r2,7
 800cc60:	18000726 	beq	r3,zero,800cc80 <__divdf3+0x7c4>
 800cc64:	110003cc 	andi	r4,r2,15
 800cc68:	00c00104 	movi	r3,4
 800cc6c:	20c00426 	beq	r4,r3,800cc80 <__divdf3+0x7c4>
 800cc70:	10c00104 	addi	r3,r2,4
 800cc74:	1885803a 	cmpltu	r2,r3,r2
 800cc78:	80a1883a 	add	r16,r16,r2
 800cc7c:	1805883a 	mov	r2,r3
 800cc80:	80c0202c 	andhi	r3,r16,128
 800cc84:	18002d26 	beq	r3,zero,800cd3c <__divdf3+0x880>
 800cc88:	9180004c 	andi	r6,r18,1
 800cc8c:	01000044 	movi	r4,1
 800cc90:	000b883a 	mov	r5,zero
 800cc94:	0027883a 	mov	r19,zero
 800cc98:	003e6606 	br	800c634 <__alt_data_end+0xfc00c634>
 800cc9c:	354d883a 	add	r6,r6,r21
 800cca0:	356d803a 	cmpltu	r22,r6,r21
 800cca4:	b42d883a 	add	r22,r22,r16
 800cca8:	b12d883a 	add	r22,r22,r4
 800ccac:	8c7fff84 	addi	r17,r17,-2
 800ccb0:	b0c7c83a 	sub	r3,r22,r3
 800ccb4:	003f1d06 	br	800c92c <__alt_data_end+0xfc00c92c>
 800ccb8:	ad4b883a 	add	r5,r21,r21
 800ccbc:	2d6b803a 	cmpltu	r21,r5,r21
 800ccc0:	ac2b883a 	add	r21,r21,r16
 800ccc4:	1d47883a 	add	r3,r3,r21
 800ccc8:	993fff84 	addi	r4,r19,-2
 800cccc:	282b883a 	mov	r21,r5
 800ccd0:	003fc806 	br	800cbf4 <__alt_data_end+0xfc00cbf4>
 800ccd4:	103fc41e 	bne	r2,zero,800cbe8 <__alt_data_end+0xfc00cbe8>
 800ccd8:	002b883a 	mov	r21,zero
 800ccdc:	a8bf5e1e 	bne	r21,r2,800ca58 <__alt_data_end+0xfc00ca58>
 800cce0:	003f5e06 	br	800ca5c <__alt_data_end+0xfc00ca5c>
 800cce4:	00bef884 	movi	r2,-1054
 800cce8:	1505c83a 	sub	r2,r2,r20
 800ccec:	00c00804 	movi	r3,32
 800ccf0:	8884d83a 	srl	r2,r17,r2
 800ccf4:	80c01c26 	beq	r16,r3,800cd68 <__divdf3+0x8ac>
 800ccf8:	a0c10f84 	addi	r3,r20,1086
 800ccfc:	88c6983a 	sll	r3,r17,r3
 800cd00:	1cc6b03a 	or	r3,r3,r19
 800cd04:	1806c03a 	cmpne	r3,r3,zero
 800cd08:	1884b03a 	or	r2,r3,r2
 800cd0c:	140001cc 	andi	r16,r2,7
 800cd10:	8000061e 	bne	r16,zero,800cd2c <__divdf3+0x870>
 800cd14:	000b883a 	mov	r5,zero
 800cd18:	1004d0fa 	srli	r2,r2,3
 800cd1c:	9180004c 	andi	r6,r18,1
 800cd20:	0009883a 	mov	r4,zero
 800cd24:	1426b03a 	or	r19,r2,r16
 800cd28:	003e4206 	br	800c634 <__alt_data_end+0xfc00c634>
 800cd2c:	110003cc 	andi	r4,r2,15
 800cd30:	00c00104 	movi	r3,4
 800cd34:	0021883a 	mov	r16,zero
 800cd38:	20ffcd1e 	bne	r4,r3,800cc70 <__alt_data_end+0xfc00cc70>
 800cd3c:	800a927a 	slli	r5,r16,9
 800cd40:	8020977a 	slli	r16,r16,29
 800cd44:	280ad33a 	srli	r5,r5,12
 800cd48:	003ff306 	br	800cd18 <__alt_data_end+0xfc00cd18>
 800cd4c:	317fd336 	bltu	r6,r5,800cc9c <__alt_data_end+0xfc00cc9c>
 800cd50:	1023883a 	mov	r17,r2
 800cd54:	003fa206 	br	800cbe0 <__alt_data_end+0xfc00cbe0>
 800cd58:	a8bfd736 	bltu	r21,r2,800ccb8 <__alt_data_end+0xfc00ccb8>
 800cd5c:	2027883a 	mov	r19,r4
 800cd60:	a8bf3d1e 	bne	r21,r2,800ca58 <__alt_data_end+0xfc00ca58>
 800cd64:	003f3d06 	br	800ca5c <__alt_data_end+0xfc00ca5c>
 800cd68:	0007883a 	mov	r3,zero
 800cd6c:	003fe406 	br	800cd00 <__alt_data_end+0xfc00cd00>
 800cd70:	00800434 	movhi	r2,16
 800cd74:	89400234 	orhi	r5,r17,8
 800cd78:	10bfffc4 	addi	r2,r2,-1
 800cd7c:	e00d883a 	mov	r6,fp
 800cd80:	288a703a 	and	r5,r5,r2
 800cd84:	003e8506 	br	800c79c <__alt_data_end+0xfc00c79c>

0800cd88 <__eqdf2>:
 800cd88:	2804d53a 	srli	r2,r5,20
 800cd8c:	3806d53a 	srli	r3,r7,20
 800cd90:	02000434 	movhi	r8,16
 800cd94:	423fffc4 	addi	r8,r8,-1
 800cd98:	1081ffcc 	andi	r2,r2,2047
 800cd9c:	0241ffc4 	movi	r9,2047
 800cda0:	2a14703a 	and	r10,r5,r8
 800cda4:	18c1ffcc 	andi	r3,r3,2047
 800cda8:	3a10703a 	and	r8,r7,r8
 800cdac:	280ad7fa 	srli	r5,r5,31
 800cdb0:	380ed7fa 	srli	r7,r7,31
 800cdb4:	12400f26 	beq	r2,r9,800cdf4 <__eqdf2+0x6c>
 800cdb8:	0241ffc4 	movi	r9,2047
 800cdbc:	1a400326 	beq	r3,r9,800cdcc <__eqdf2+0x44>
 800cdc0:	10c00526 	beq	r2,r3,800cdd8 <__eqdf2+0x50>
 800cdc4:	00800044 	movi	r2,1
 800cdc8:	f800283a 	ret
 800cdcc:	4192b03a 	or	r9,r8,r6
 800cdd0:	483ffc1e 	bne	r9,zero,800cdc4 <__alt_data_end+0xfc00cdc4>
 800cdd4:	10fffb1e 	bne	r2,r3,800cdc4 <__alt_data_end+0xfc00cdc4>
 800cdd8:	523ffa1e 	bne	r10,r8,800cdc4 <__alt_data_end+0xfc00cdc4>
 800cddc:	21bff91e 	bne	r4,r6,800cdc4 <__alt_data_end+0xfc00cdc4>
 800cde0:	29c00826 	beq	r5,r7,800ce04 <__eqdf2+0x7c>
 800cde4:	103ff71e 	bne	r2,zero,800cdc4 <__alt_data_end+0xfc00cdc4>
 800cde8:	5104b03a 	or	r2,r10,r4
 800cdec:	1004c03a 	cmpne	r2,r2,zero
 800cdf0:	f800283a 	ret
 800cdf4:	5112b03a 	or	r9,r10,r4
 800cdf8:	483fef26 	beq	r9,zero,800cdb8 <__alt_data_end+0xfc00cdb8>
 800cdfc:	00800044 	movi	r2,1
 800ce00:	f800283a 	ret
 800ce04:	0005883a 	mov	r2,zero
 800ce08:	f800283a 	ret

0800ce0c <__gedf2>:
 800ce0c:	2804d53a 	srli	r2,r5,20
 800ce10:	3806d53a 	srli	r3,r7,20
 800ce14:	02000434 	movhi	r8,16
 800ce18:	423fffc4 	addi	r8,r8,-1
 800ce1c:	0241ffc4 	movi	r9,2047
 800ce20:	1081ffcc 	andi	r2,r2,2047
 800ce24:	2a14703a 	and	r10,r5,r8
 800ce28:	1a46703a 	and	r3,r3,r9
 800ce2c:	3a10703a 	and	r8,r7,r8
 800ce30:	280ad7fa 	srli	r5,r5,31
 800ce34:	380ed7fa 	srli	r7,r7,31
 800ce38:	12400b26 	beq	r2,r9,800ce68 <__gedf2+0x5c>
 800ce3c:	1a401626 	beq	r3,r9,800ce98 <__gedf2+0x8c>
 800ce40:	10000c1e 	bne	r2,zero,800ce74 <__gedf2+0x68>
 800ce44:	5112b03a 	or	r9,r10,r4
 800ce48:	4813003a 	cmpeq	r9,r9,zero
 800ce4c:	4817883a 	mov	r11,r9
 800ce50:	18000c1e 	bne	r3,zero,800ce84 <__gedf2+0x78>
 800ce54:	4198b03a 	or	r12,r8,r6
 800ce58:	60000a1e 	bne	r12,zero,800ce84 <__gedf2+0x78>
 800ce5c:	48001326 	beq	r9,zero,800ceac <__gedf2+0xa0>
 800ce60:	0005883a 	mov	r2,zero
 800ce64:	f800283a 	ret
 800ce68:	5112b03a 	or	r9,r10,r4
 800ce6c:	4800191e 	bne	r9,zero,800ced4 <__gedf2+0xc8>
 800ce70:	18800926 	beq	r3,r2,800ce98 <__gedf2+0x8c>
 800ce74:	18000b1e 	bne	r3,zero,800cea4 <__gedf2+0x98>
 800ce78:	4192b03a 	or	r9,r8,r6
 800ce7c:	0017883a 	mov	r11,zero
 800ce80:	48000a26 	beq	r9,zero,800ceac <__gedf2+0xa0>
 800ce84:	39c03fcc 	andi	r7,r7,255
 800ce88:	58000726 	beq	r11,zero,800cea8 <__gedf2+0x9c>
 800ce8c:	3800081e 	bne	r7,zero,800ceb0 <__gedf2+0xa4>
 800ce90:	00bfffc4 	movi	r2,-1
 800ce94:	f800283a 	ret
 800ce98:	4192b03a 	or	r9,r8,r6
 800ce9c:	48000d1e 	bne	r9,zero,800ced4 <__gedf2+0xc8>
 800cea0:	103fe826 	beq	r2,zero,800ce44 <__alt_data_end+0xfc00ce44>
 800cea4:	39c03fcc 	andi	r7,r7,255
 800cea8:	29c00326 	beq	r5,r7,800ceb8 <__gedf2+0xac>
 800ceac:	283ff81e 	bne	r5,zero,800ce90 <__alt_data_end+0xfc00ce90>
 800ceb0:	00800044 	movi	r2,1
 800ceb4:	f800283a 	ret
 800ceb8:	18bffc16 	blt	r3,r2,800ceac <__alt_data_end+0xfc00ceac>
 800cebc:	10c00316 	blt	r2,r3,800cecc <__gedf2+0xc0>
 800cec0:	42bffa36 	bltu	r8,r10,800ceac <__alt_data_end+0xfc00ceac>
 800cec4:	52000526 	beq	r10,r8,800cedc <__gedf2+0xd0>
 800cec8:	523fe52e 	bgeu	r10,r8,800ce60 <__alt_data_end+0xfc00ce60>
 800cecc:	283ff026 	beq	r5,zero,800ce90 <__alt_data_end+0xfc00ce90>
 800ced0:	003ff706 	br	800ceb0 <__alt_data_end+0xfc00ceb0>
 800ced4:	00bfff84 	movi	r2,-2
 800ced8:	f800283a 	ret
 800cedc:	313ff336 	bltu	r6,r4,800ceac <__alt_data_end+0xfc00ceac>
 800cee0:	21bfdf2e 	bgeu	r4,r6,800ce60 <__alt_data_end+0xfc00ce60>
 800cee4:	283fea26 	beq	r5,zero,800ce90 <__alt_data_end+0xfc00ce90>
 800cee8:	003ff106 	br	800ceb0 <__alt_data_end+0xfc00ceb0>

0800ceec <__ledf2>:
 800ceec:	2804d53a 	srli	r2,r5,20
 800cef0:	3810d53a 	srli	r8,r7,20
 800cef4:	00c00434 	movhi	r3,16
 800cef8:	18ffffc4 	addi	r3,r3,-1
 800cefc:	0241ffc4 	movi	r9,2047
 800cf00:	1081ffcc 	andi	r2,r2,2047
 800cf04:	28d4703a 	and	r10,r5,r3
 800cf08:	4250703a 	and	r8,r8,r9
 800cf0c:	38c6703a 	and	r3,r7,r3
 800cf10:	280ad7fa 	srli	r5,r5,31
 800cf14:	380ed7fa 	srli	r7,r7,31
 800cf18:	12400b26 	beq	r2,r9,800cf48 <__ledf2+0x5c>
 800cf1c:	42401926 	beq	r8,r9,800cf84 <__ledf2+0x98>
 800cf20:	10000c1e 	bne	r2,zero,800cf54 <__ledf2+0x68>
 800cf24:	5112b03a 	or	r9,r10,r4
 800cf28:	4813003a 	cmpeq	r9,r9,zero
 800cf2c:	4817883a 	mov	r11,r9
 800cf30:	40000f26 	beq	r8,zero,800cf70 <__ledf2+0x84>
 800cf34:	39c03fcc 	andi	r7,r7,255
 800cf38:	58001826 	beq	r11,zero,800cf9c <__ledf2+0xb0>
 800cf3c:	38000a1e 	bne	r7,zero,800cf68 <__ledf2+0x7c>
 800cf40:	00bfffc4 	movi	r2,-1
 800cf44:	f800283a 	ret
 800cf48:	5112b03a 	or	r9,r10,r4
 800cf4c:	48000f1e 	bne	r9,zero,800cf8c <__ledf2+0xa0>
 800cf50:	40800c26 	beq	r8,r2,800cf84 <__ledf2+0x98>
 800cf54:	4000101e 	bne	r8,zero,800cf98 <__ledf2+0xac>
 800cf58:	1992b03a 	or	r9,r3,r6
 800cf5c:	0017883a 	mov	r11,zero
 800cf60:	483ff41e 	bne	r9,zero,800cf34 <__alt_data_end+0xfc00cf34>
 800cf64:	283ff61e 	bne	r5,zero,800cf40 <__alt_data_end+0xfc00cf40>
 800cf68:	00800044 	movi	r2,1
 800cf6c:	f800283a 	ret
 800cf70:	1998b03a 	or	r12,r3,r6
 800cf74:	603fef1e 	bne	r12,zero,800cf34 <__alt_data_end+0xfc00cf34>
 800cf78:	483ffa26 	beq	r9,zero,800cf64 <__alt_data_end+0xfc00cf64>
 800cf7c:	0005883a 	mov	r2,zero
 800cf80:	f800283a 	ret
 800cf84:	1992b03a 	or	r9,r3,r6
 800cf88:	48000226 	beq	r9,zero,800cf94 <__ledf2+0xa8>
 800cf8c:	00800084 	movi	r2,2
 800cf90:	f800283a 	ret
 800cf94:	103fe326 	beq	r2,zero,800cf24 <__alt_data_end+0xfc00cf24>
 800cf98:	39c03fcc 	andi	r7,r7,255
 800cf9c:	29fff11e 	bne	r5,r7,800cf64 <__alt_data_end+0xfc00cf64>
 800cfa0:	40bff016 	blt	r8,r2,800cf64 <__alt_data_end+0xfc00cf64>
 800cfa4:	12000316 	blt	r2,r8,800cfb4 <__ledf2+0xc8>
 800cfa8:	1abfee36 	bltu	r3,r10,800cf64 <__alt_data_end+0xfc00cf64>
 800cfac:	50c00326 	beq	r10,r3,800cfbc <__ledf2+0xd0>
 800cfb0:	50fff22e 	bgeu	r10,r3,800cf7c <__alt_data_end+0xfc00cf7c>
 800cfb4:	283fe226 	beq	r5,zero,800cf40 <__alt_data_end+0xfc00cf40>
 800cfb8:	003feb06 	br	800cf68 <__alt_data_end+0xfc00cf68>
 800cfbc:	313fe936 	bltu	r6,r4,800cf64 <__alt_data_end+0xfc00cf64>
 800cfc0:	21bfee2e 	bgeu	r4,r6,800cf7c <__alt_data_end+0xfc00cf7c>
 800cfc4:	283fde26 	beq	r5,zero,800cf40 <__alt_data_end+0xfc00cf40>
 800cfc8:	003fe706 	br	800cf68 <__alt_data_end+0xfc00cf68>

0800cfcc <__muldf3>:
 800cfcc:	defff204 	addi	sp,sp,-56
 800cfd0:	2804d53a 	srli	r2,r5,20
 800cfd4:	dd800a15 	stw	r22,40(sp)
 800cfd8:	282cd7fa 	srli	r22,r5,31
 800cfdc:	dc000415 	stw	r16,16(sp)
 800cfe0:	04000434 	movhi	r16,16
 800cfe4:	df000c15 	stw	fp,48(sp)
 800cfe8:	dd000815 	stw	r20,32(sp)
 800cfec:	dcc00715 	stw	r19,28(sp)
 800cff0:	dc800615 	stw	r18,24(sp)
 800cff4:	dc400515 	stw	r17,20(sp)
 800cff8:	843fffc4 	addi	r16,r16,-1
 800cffc:	dfc00d15 	stw	ra,52(sp)
 800d000:	ddc00b15 	stw	r23,44(sp)
 800d004:	dd400915 	stw	r21,36(sp)
 800d008:	1501ffcc 	andi	r20,r2,2047
 800d00c:	2023883a 	mov	r17,r4
 800d010:	2025883a 	mov	r18,r4
 800d014:	2c20703a 	and	r16,r5,r16
 800d018:	b027883a 	mov	r19,r22
 800d01c:	b7003fcc 	andi	fp,r22,255
 800d020:	a0005926 	beq	r20,zero,800d188 <__muldf3+0x1bc>
 800d024:	0081ffc4 	movi	r2,2047
 800d028:	a0803426 	beq	r20,r2,800d0fc <__muldf3+0x130>
 800d02c:	84000434 	orhi	r16,r16,16
 800d030:	2004d77a 	srli	r2,r4,29
 800d034:	802090fa 	slli	r16,r16,3
 800d038:	202490fa 	slli	r18,r4,3
 800d03c:	a53f0044 	addi	r20,r20,-1023
 800d040:	80a0b03a 	or	r16,r16,r2
 800d044:	002b883a 	mov	r21,zero
 800d048:	0015883a 	mov	r10,zero
 800d04c:	3812d53a 	srli	r9,r7,20
 800d050:	3806d7fa 	srli	r3,r7,31
 800d054:	02000434 	movhi	r8,16
 800d058:	423fffc4 	addi	r8,r8,-1
 800d05c:	4941ffcc 	andi	r5,r9,2047
 800d060:	302f883a 	mov	r23,r6
 800d064:	3a22703a 	and	r17,r7,r8
 800d068:	1ac03fcc 	andi	r11,r3,255
 800d06c:	28006226 	beq	r5,zero,800d1f8 <__muldf3+0x22c>
 800d070:	0081ffc4 	movi	r2,2047
 800d074:	28805a26 	beq	r5,r2,800d1e0 <__muldf3+0x214>
 800d078:	8a000434 	orhi	r8,r17,16
 800d07c:	3004d77a 	srli	r2,r6,29
 800d080:	401090fa 	slli	r8,r8,3
 800d084:	302e90fa 	slli	r23,r6,3
 800d088:	297f0044 	addi	r5,r5,-1023
 800d08c:	40a2b03a 	or	r17,r8,r2
 800d090:	0013883a 	mov	r9,zero
 800d094:	4d4cb03a 	or	r6,r9,r21
 800d098:	300c90ba 	slli	r6,r6,2
 800d09c:	02020074 	movhi	r8,2049
 800d0a0:	42342f04 	addi	r8,r8,-12100
 800d0a4:	320d883a 	add	r6,r6,r8
 800d0a8:	31800017 	ldw	r6,0(r6)
 800d0ac:	a14b883a 	add	r5,r20,r5
 800d0b0:	1dacf03a 	xor	r22,r3,r22
 800d0b4:	2b000044 	addi	r12,r5,1
 800d0b8:	3000683a 	jmp	r6
 800d0bc:	0800d2f8 	rdprs	zero,at,843
 800d0c0:	0800d2e4 	muli	zero,at,843
 800d0c4:	0800d2e4 	muli	zero,at,843
 800d0c8:	0800d2d0 	cmplti	zero,at,843
 800d0cc:	0800d118 	cmpnei	zero,at,836
 800d0d0:	0800d118 	cmpnei	zero,at,836
 800d0d4:	0800d2b8 	rdprs	zero,at,842
 800d0d8:	0800d2d0 	cmplti	zero,at,843
 800d0dc:	0800d118 	cmpnei	zero,at,836
 800d0e0:	0800d2b8 	rdprs	zero,at,842
 800d0e4:	0800d118 	cmpnei	zero,at,836
 800d0e8:	0800d2d0 	cmplti	zero,at,843
 800d0ec:	0800d11c 	xori	zero,at,836
 800d0f0:	0800d11c 	xori	zero,at,836
 800d0f4:	0800d11c 	xori	zero,at,836
 800d0f8:	0800d4f4 	orhi	zero,at,851
 800d0fc:	8104b03a 	or	r2,r16,r4
 800d100:	10006a1e 	bne	r2,zero,800d2ac <__muldf3+0x2e0>
 800d104:	05400204 	movi	r21,8
 800d108:	0021883a 	mov	r16,zero
 800d10c:	0025883a 	mov	r18,zero
 800d110:	02800084 	movi	r10,2
 800d114:	003fcd06 	br	800d04c <__alt_data_end+0xfc00d04c>
 800d118:	b039883a 	mov	fp,r22
 800d11c:	00800084 	movi	r2,2
 800d120:	50804e1e 	bne	r10,r2,800d25c <__muldf3+0x290>
 800d124:	e4c0004c 	andi	r19,fp,1
 800d128:	0101ffc4 	movi	r4,2047
 800d12c:	0021883a 	mov	r16,zero
 800d130:	0025883a 	mov	r18,zero
 800d134:	2008953a 	slli	r4,r4,20
 800d138:	98c03fcc 	andi	r3,r19,255
 800d13c:	01400434 	movhi	r5,16
 800d140:	297fffc4 	addi	r5,r5,-1
 800d144:	180697fa 	slli	r3,r3,31
 800d148:	8160703a 	and	r16,r16,r5
 800d14c:	8120b03a 	or	r16,r16,r4
 800d150:	80c6b03a 	or	r3,r16,r3
 800d154:	9005883a 	mov	r2,r18
 800d158:	dfc00d17 	ldw	ra,52(sp)
 800d15c:	df000c17 	ldw	fp,48(sp)
 800d160:	ddc00b17 	ldw	r23,44(sp)
 800d164:	dd800a17 	ldw	r22,40(sp)
 800d168:	dd400917 	ldw	r21,36(sp)
 800d16c:	dd000817 	ldw	r20,32(sp)
 800d170:	dcc00717 	ldw	r19,28(sp)
 800d174:	dc800617 	ldw	r18,24(sp)
 800d178:	dc400517 	ldw	r17,20(sp)
 800d17c:	dc000417 	ldw	r16,16(sp)
 800d180:	dec00e04 	addi	sp,sp,56
 800d184:	f800283a 	ret
 800d188:	8104b03a 	or	r2,r16,r4
 800d18c:	10004226 	beq	r2,zero,800d298 <__muldf3+0x2cc>
 800d190:	8000f926 	beq	r16,zero,800d578 <__muldf3+0x5ac>
 800d194:	8009883a 	mov	r4,r16
 800d198:	d9800315 	stw	r6,12(sp)
 800d19c:	d9c00015 	stw	r7,0(sp)
 800d1a0:	800e1bc0 	call	800e1bc <__clzsi2>
 800d1a4:	d9800317 	ldw	r6,12(sp)
 800d1a8:	d9c00017 	ldw	r7,0(sp)
 800d1ac:	1007883a 	mov	r3,r2
 800d1b0:	01000a04 	movi	r4,40
 800d1b4:	18bffe04 	addi	r2,r3,-8
 800d1b8:	20c9c83a 	sub	r4,r4,r3
 800d1bc:	80a0983a 	sll	r16,r16,r2
 800d1c0:	8908d83a 	srl	r4,r17,r4
 800d1c4:	88a4983a 	sll	r18,r17,r2
 800d1c8:	2420b03a 	or	r16,r4,r16
 800d1cc:	017f0344 	movi	r5,-1011
 800d1d0:	28e9c83a 	sub	r20,r5,r3
 800d1d4:	002b883a 	mov	r21,zero
 800d1d8:	0015883a 	mov	r10,zero
 800d1dc:	003f9b06 	br	800d04c <__alt_data_end+0xfc00d04c>
 800d1e0:	8984b03a 	or	r2,r17,r6
 800d1e4:	10002a1e 	bne	r2,zero,800d290 <__muldf3+0x2c4>
 800d1e8:	0023883a 	mov	r17,zero
 800d1ec:	002f883a 	mov	r23,zero
 800d1f0:	02400084 	movi	r9,2
 800d1f4:	003fa706 	br	800d094 <__alt_data_end+0xfc00d094>
 800d1f8:	8984b03a 	or	r2,r17,r6
 800d1fc:	10002026 	beq	r2,zero,800d280 <__muldf3+0x2b4>
 800d200:	8800cc26 	beq	r17,zero,800d534 <__muldf3+0x568>
 800d204:	8809883a 	mov	r4,r17
 800d208:	d8c00215 	stw	r3,8(sp)
 800d20c:	d9800315 	stw	r6,12(sp)
 800d210:	da800015 	stw	r10,0(sp)
 800d214:	dac00115 	stw	r11,4(sp)
 800d218:	800e1bc0 	call	800e1bc <__clzsi2>
 800d21c:	d8c00217 	ldw	r3,8(sp)
 800d220:	d9800317 	ldw	r6,12(sp)
 800d224:	da800017 	ldw	r10,0(sp)
 800d228:	dac00117 	ldw	r11,4(sp)
 800d22c:	1009883a 	mov	r4,r2
 800d230:	01400a04 	movi	r5,40
 800d234:	25fffe04 	addi	r23,r4,-8
 800d238:	290bc83a 	sub	r5,r5,r4
 800d23c:	8dd0983a 	sll	r8,r17,r23
 800d240:	314ad83a 	srl	r5,r6,r5
 800d244:	35ee983a 	sll	r23,r6,r23
 800d248:	2a22b03a 	or	r17,r5,r8
 800d24c:	017f0344 	movi	r5,-1011
 800d250:	290bc83a 	sub	r5,r5,r4
 800d254:	0013883a 	mov	r9,zero
 800d258:	003f8e06 	br	800d094 <__alt_data_end+0xfc00d094>
 800d25c:	008000c4 	movi	r2,3
 800d260:	50811d26 	beq	r10,r2,800d6d8 <__muldf3+0x70c>
 800d264:	00800044 	movi	r2,1
 800d268:	5080e01e 	bne	r10,r2,800d5ec <__muldf3+0x620>
 800d26c:	e0a6703a 	and	r19,fp,r2
 800d270:	0009883a 	mov	r4,zero
 800d274:	0021883a 	mov	r16,zero
 800d278:	0025883a 	mov	r18,zero
 800d27c:	003fad06 	br	800d134 <__alt_data_end+0xfc00d134>
 800d280:	0023883a 	mov	r17,zero
 800d284:	002f883a 	mov	r23,zero
 800d288:	02400044 	movi	r9,1
 800d28c:	003f8106 	br	800d094 <__alt_data_end+0xfc00d094>
 800d290:	024000c4 	movi	r9,3
 800d294:	003f7f06 	br	800d094 <__alt_data_end+0xfc00d094>
 800d298:	05400104 	movi	r21,4
 800d29c:	0021883a 	mov	r16,zero
 800d2a0:	0025883a 	mov	r18,zero
 800d2a4:	02800044 	movi	r10,1
 800d2a8:	003f6806 	br	800d04c <__alt_data_end+0xfc00d04c>
 800d2ac:	05400304 	movi	r21,12
 800d2b0:	028000c4 	movi	r10,3
 800d2b4:	003f6506 	br	800d04c <__alt_data_end+0xfc00d04c>
 800d2b8:	04000434 	movhi	r16,16
 800d2bc:	0027883a 	mov	r19,zero
 800d2c0:	843fffc4 	addi	r16,r16,-1
 800d2c4:	04bfffc4 	movi	r18,-1
 800d2c8:	0101ffc4 	movi	r4,2047
 800d2cc:	003f9906 	br	800d134 <__alt_data_end+0xfc00d134>
 800d2d0:	8821883a 	mov	r16,r17
 800d2d4:	b825883a 	mov	r18,r23
 800d2d8:	5839883a 	mov	fp,r11
 800d2dc:	4815883a 	mov	r10,r9
 800d2e0:	003f8e06 	br	800d11c <__alt_data_end+0xfc00d11c>
 800d2e4:	8821883a 	mov	r16,r17
 800d2e8:	b825883a 	mov	r18,r23
 800d2ec:	b039883a 	mov	fp,r22
 800d2f0:	4815883a 	mov	r10,r9
 800d2f4:	003f8906 	br	800d11c <__alt_data_end+0xfc00d11c>
 800d2f8:	b80cd43a 	srli	r6,r23,16
 800d2fc:	9006d43a 	srli	r3,r18,16
 800d300:	90bfffcc 	andi	r2,r18,65535
 800d304:	bdffffcc 	andi	r23,r23,65535
 800d308:	b891383a 	mul	r8,r23,r2
 800d30c:	b8c9383a 	mul	r4,r23,r3
 800d310:	309b383a 	mul	r13,r6,r2
 800d314:	400ed43a 	srli	r7,r8,16
 800d318:	30df383a 	mul	r15,r6,r3
 800d31c:	235b883a 	add	r13,r4,r13
 800d320:	69db883a 	add	r13,r13,r7
 800d324:	6900022e 	bgeu	r13,r4,800d330 <__muldf3+0x364>
 800d328:	01000074 	movhi	r4,1
 800d32c:	791f883a 	add	r15,r15,r4
 800d330:	8828d43a 	srli	r20,r17,16
 800d334:	8c7fffcc 	andi	r17,r17,65535
 800d338:	888f383a 	mul	r7,r17,r2
 800d33c:	88d3383a 	mul	r9,r17,r3
 800d340:	a0a5383a 	mul	r18,r20,r2
 800d344:	3816d43a 	srli	r11,r7,16
 800d348:	6814943a 	slli	r10,r13,16
 800d34c:	4ca5883a 	add	r18,r9,r18
 800d350:	423fffcc 	andi	r8,r8,65535
 800d354:	92e5883a 	add	r18,r18,r11
 800d358:	6808d43a 	srli	r4,r13,16
 800d35c:	5215883a 	add	r10,r10,r8
 800d360:	a0c7383a 	mul	r3,r20,r3
 800d364:	9240022e 	bgeu	r18,r9,800d370 <__muldf3+0x3a4>
 800d368:	00800074 	movhi	r2,1
 800d36c:	1887883a 	add	r3,r3,r2
 800d370:	802ad43a 	srli	r21,r16,16
 800d374:	80bfffcc 	andi	r2,r16,65535
 800d378:	b893383a 	mul	r9,r23,r2
 800d37c:	3091383a 	mul	r8,r6,r2
 800d380:	bd6f383a 	mul	r23,r23,r21
 800d384:	9026943a 	slli	r19,r18,16
 800d388:	481ad43a 	srli	r13,r9,16
 800d38c:	9024d43a 	srli	r18,r18,16
 800d390:	39ffffcc 	andi	r7,r7,65535
 800d394:	ba11883a 	add	r8,r23,r8
 800d398:	99e7883a 	add	r19,r19,r7
 800d39c:	4351883a 	add	r8,r8,r13
 800d3a0:	1c97883a 	add	r11,r3,r18
 800d3a4:	354d383a 	mul	r6,r6,r21
 800d3a8:	9925883a 	add	r18,r19,r4
 800d3ac:	45c0022e 	bgeu	r8,r23,800d3b8 <__muldf3+0x3ec>
 800d3b0:	00c00074 	movhi	r3,1
 800d3b4:	30cd883a 	add	r6,r6,r3
 800d3b8:	8889383a 	mul	r4,r17,r2
 800d3bc:	8d63383a 	mul	r17,r17,r21
 800d3c0:	a085383a 	mul	r2,r20,r2
 800d3c4:	200ed43a 	srli	r7,r4,16
 800d3c8:	401cd43a 	srli	r14,r8,16
 800d3cc:	401a943a 	slli	r13,r8,16
 800d3d0:	8885883a 	add	r2,r17,r2
 800d3d4:	4a3fffcc 	andi	r8,r9,65535
 800d3d8:	11c5883a 	add	r2,r2,r7
 800d3dc:	339d883a 	add	r14,r6,r14
 800d3e0:	6a11883a 	add	r8,r13,r8
 800d3e4:	a561383a 	mul	r16,r20,r21
 800d3e8:	1440022e 	bgeu	r2,r17,800d3f4 <__muldf3+0x428>
 800d3ec:	00c00074 	movhi	r3,1
 800d3f0:	80e1883a 	add	r16,r16,r3
 800d3f4:	1006943a 	slli	r3,r2,16
 800d3f8:	213fffcc 	andi	r4,r4,65535
 800d3fc:	93db883a 	add	r13,r18,r15
 800d400:	1909883a 	add	r4,r3,r4
 800d404:	22c7883a 	add	r3,r4,r11
 800d408:	6cd3803a 	cmpltu	r9,r13,r19
 800d40c:	6a09883a 	add	r4,r13,r8
 800d410:	1a5b883a 	add	r13,r3,r9
 800d414:	2211803a 	cmpltu	r8,r4,r8
 800d418:	734d883a 	add	r6,r14,r13
 800d41c:	100ed43a 	srli	r7,r2,16
 800d420:	6a53803a 	cmpltu	r9,r13,r9
 800d424:	3205883a 	add	r2,r6,r8
 800d428:	1ac7803a 	cmpltu	r3,r3,r11
 800d42c:	1211803a 	cmpltu	r8,r2,r8
 800d430:	48c6b03a 	or	r3,r9,r3
 800d434:	338d803a 	cmpltu	r6,r6,r14
 800d438:	19c7883a 	add	r3,r3,r7
 800d43c:	418cb03a 	or	r6,r8,r6
 800d440:	1987883a 	add	r3,r3,r6
 800d444:	2024927a 	slli	r18,r4,9
 800d448:	1c07883a 	add	r3,r3,r16
 800d44c:	1806927a 	slli	r3,r3,9
 800d450:	1020d5fa 	srli	r16,r2,23
 800d454:	2008d5fa 	srli	r4,r4,23
 800d458:	9294b03a 	or	r10,r18,r10
 800d45c:	1004927a 	slli	r2,r2,9
 800d460:	5024c03a 	cmpne	r18,r10,zero
 800d464:	1c20b03a 	or	r16,r3,r16
 800d468:	9108b03a 	or	r4,r18,r4
 800d46c:	80c0402c 	andhi	r3,r16,256
 800d470:	20a4b03a 	or	r18,r4,r2
 800d474:	18000726 	beq	r3,zero,800d494 <__muldf3+0x4c8>
 800d478:	9006d07a 	srli	r3,r18,1
 800d47c:	800897fa 	slli	r4,r16,31
 800d480:	9080004c 	andi	r2,r18,1
 800d484:	8020d07a 	srli	r16,r16,1
 800d488:	10c4b03a 	or	r2,r2,r3
 800d48c:	1124b03a 	or	r18,r2,r4
 800d490:	600b883a 	mov	r5,r12
 800d494:	2900ffc4 	addi	r4,r5,1023
 800d498:	01004b0e 	bge	zero,r4,800d5c8 <__muldf3+0x5fc>
 800d49c:	908001cc 	andi	r2,r18,7
 800d4a0:	10000726 	beq	r2,zero,800d4c0 <__muldf3+0x4f4>
 800d4a4:	90c003cc 	andi	r3,r18,15
 800d4a8:	00800104 	movi	r2,4
 800d4ac:	18800426 	beq	r3,r2,800d4c0 <__muldf3+0x4f4>
 800d4b0:	9087883a 	add	r3,r18,r2
 800d4b4:	1c85803a 	cmpltu	r2,r3,r18
 800d4b8:	80a1883a 	add	r16,r16,r2
 800d4bc:	1825883a 	mov	r18,r3
 800d4c0:	8080402c 	andhi	r2,r16,256
 800d4c4:	10000426 	beq	r2,zero,800d4d8 <__muldf3+0x50c>
 800d4c8:	00bfc034 	movhi	r2,65280
 800d4cc:	10bfffc4 	addi	r2,r2,-1
 800d4d0:	29010004 	addi	r4,r5,1024
 800d4d4:	80a0703a 	and	r16,r16,r2
 800d4d8:	0081ff84 	movi	r2,2046
 800d4dc:	1100320e 	bge	r2,r4,800d5a8 <__muldf3+0x5dc>
 800d4e0:	b4c0004c 	andi	r19,r22,1
 800d4e4:	0101ffc4 	movi	r4,2047
 800d4e8:	0021883a 	mov	r16,zero
 800d4ec:	0025883a 	mov	r18,zero
 800d4f0:	003f1006 	br	800d134 <__alt_data_end+0xfc00d134>
 800d4f4:	8080022c 	andhi	r2,r16,8
 800d4f8:	10000926 	beq	r2,zero,800d520 <__muldf3+0x554>
 800d4fc:	8880022c 	andhi	r2,r17,8
 800d500:	1000071e 	bne	r2,zero,800d520 <__muldf3+0x554>
 800d504:	00800434 	movhi	r2,16
 800d508:	8c000234 	orhi	r16,r17,8
 800d50c:	10bfffc4 	addi	r2,r2,-1
 800d510:	1827883a 	mov	r19,r3
 800d514:	80a0703a 	and	r16,r16,r2
 800d518:	b825883a 	mov	r18,r23
 800d51c:	003f6a06 	br	800d2c8 <__alt_data_end+0xfc00d2c8>
 800d520:	00800434 	movhi	r2,16
 800d524:	84000234 	orhi	r16,r16,8
 800d528:	10bfffc4 	addi	r2,r2,-1
 800d52c:	80a0703a 	and	r16,r16,r2
 800d530:	003f6506 	br	800d2c8 <__alt_data_end+0xfc00d2c8>
 800d534:	3009883a 	mov	r4,r6
 800d538:	d8c00215 	stw	r3,8(sp)
 800d53c:	d9800315 	stw	r6,12(sp)
 800d540:	da800015 	stw	r10,0(sp)
 800d544:	dac00115 	stw	r11,4(sp)
 800d548:	800e1bc0 	call	800e1bc <__clzsi2>
 800d54c:	11000804 	addi	r4,r2,32
 800d550:	014009c4 	movi	r5,39
 800d554:	d8c00217 	ldw	r3,8(sp)
 800d558:	d9800317 	ldw	r6,12(sp)
 800d55c:	da800017 	ldw	r10,0(sp)
 800d560:	dac00117 	ldw	r11,4(sp)
 800d564:	293f320e 	bge	r5,r4,800d230 <__alt_data_end+0xfc00d230>
 800d568:	10bffe04 	addi	r2,r2,-8
 800d56c:	b8a2983a 	sll	r17,r23,r2
 800d570:	002f883a 	mov	r23,zero
 800d574:	003f3506 	br	800d24c <__alt_data_end+0xfc00d24c>
 800d578:	d9800315 	stw	r6,12(sp)
 800d57c:	d9c00015 	stw	r7,0(sp)
 800d580:	800e1bc0 	call	800e1bc <__clzsi2>
 800d584:	10c00804 	addi	r3,r2,32
 800d588:	010009c4 	movi	r4,39
 800d58c:	d9800317 	ldw	r6,12(sp)
 800d590:	d9c00017 	ldw	r7,0(sp)
 800d594:	20ff060e 	bge	r4,r3,800d1b0 <__alt_data_end+0xfc00d1b0>
 800d598:	10bffe04 	addi	r2,r2,-8
 800d59c:	88a0983a 	sll	r16,r17,r2
 800d5a0:	0025883a 	mov	r18,zero
 800d5a4:	003f0906 	br	800d1cc <__alt_data_end+0xfc00d1cc>
 800d5a8:	9004d0fa 	srli	r2,r18,3
 800d5ac:	8024977a 	slli	r18,r16,29
 800d5b0:	8020927a 	slli	r16,r16,9
 800d5b4:	2101ffcc 	andi	r4,r4,2047
 800d5b8:	90a4b03a 	or	r18,r18,r2
 800d5bc:	8020d33a 	srli	r16,r16,12
 800d5c0:	b4c0004c 	andi	r19,r22,1
 800d5c4:	003edb06 	br	800d134 <__alt_data_end+0xfc00d134>
 800d5c8:	00ff0084 	movi	r3,-1022
 800d5cc:	1947c83a 	sub	r3,r3,r5
 800d5d0:	00800e04 	movi	r2,56
 800d5d4:	10c0080e 	bge	r2,r3,800d5f8 <__muldf3+0x62c>
 800d5d8:	b4c0004c 	andi	r19,r22,1
 800d5dc:	0009883a 	mov	r4,zero
 800d5e0:	0021883a 	mov	r16,zero
 800d5e4:	0025883a 	mov	r18,zero
 800d5e8:	003ed206 	br	800d134 <__alt_data_end+0xfc00d134>
 800d5ec:	600b883a 	mov	r5,r12
 800d5f0:	e02d883a 	mov	r22,fp
 800d5f4:	003fa706 	br	800d494 <__alt_data_end+0xfc00d494>
 800d5f8:	008007c4 	movi	r2,31
 800d5fc:	10c01816 	blt	r2,r3,800d660 <__muldf3+0x694>
 800d600:	29410784 	addi	r5,r5,1054
 800d604:	8144983a 	sll	r2,r16,r5
 800d608:	90c8d83a 	srl	r4,r18,r3
 800d60c:	914a983a 	sll	r5,r18,r5
 800d610:	80c6d83a 	srl	r3,r16,r3
 800d614:	2088b03a 	or	r4,r4,r2
 800d618:	2804c03a 	cmpne	r2,r5,zero
 800d61c:	2084b03a 	or	r2,r4,r2
 800d620:	110001cc 	andi	r4,r2,7
 800d624:	20000726 	beq	r4,zero,800d644 <__muldf3+0x678>
 800d628:	114003cc 	andi	r5,r2,15
 800d62c:	01000104 	movi	r4,4
 800d630:	29000426 	beq	r5,r4,800d644 <__muldf3+0x678>
 800d634:	11000104 	addi	r4,r2,4
 800d638:	2085803a 	cmpltu	r2,r4,r2
 800d63c:	1887883a 	add	r3,r3,r2
 800d640:	2005883a 	mov	r2,r4
 800d644:	1900202c 	andhi	r4,r3,128
 800d648:	20001826 	beq	r4,zero,800d6ac <__muldf3+0x6e0>
 800d64c:	b4c0004c 	andi	r19,r22,1
 800d650:	01000044 	movi	r4,1
 800d654:	0021883a 	mov	r16,zero
 800d658:	0025883a 	mov	r18,zero
 800d65c:	003eb506 	br	800d134 <__alt_data_end+0xfc00d134>
 800d660:	00bef884 	movi	r2,-1054
 800d664:	1145c83a 	sub	r2,r2,r5
 800d668:	8088d83a 	srl	r4,r16,r2
 800d66c:	00800804 	movi	r2,32
 800d670:	18801726 	beq	r3,r2,800d6d0 <__muldf3+0x704>
 800d674:	28810f84 	addi	r2,r5,1086
 800d678:	8084983a 	sll	r2,r16,r2
 800d67c:	1484b03a 	or	r2,r2,r18
 800d680:	1004c03a 	cmpne	r2,r2,zero
 800d684:	1104b03a 	or	r2,r2,r4
 800d688:	10c001cc 	andi	r3,r2,7
 800d68c:	18000b1e 	bne	r3,zero,800d6bc <__muldf3+0x6f0>
 800d690:	0021883a 	mov	r16,zero
 800d694:	1004d0fa 	srli	r2,r2,3
 800d698:	b4c0004c 	andi	r19,r22,1
 800d69c:	0009883a 	mov	r4,zero
 800d6a0:	10e4b03a 	or	r18,r2,r3
 800d6a4:	003ea306 	br	800d134 <__alt_data_end+0xfc00d134>
 800d6a8:	0007883a 	mov	r3,zero
 800d6ac:	1820927a 	slli	r16,r3,9
 800d6b0:	1806977a 	slli	r3,r3,29
 800d6b4:	8020d33a 	srli	r16,r16,12
 800d6b8:	003ff606 	br	800d694 <__alt_data_end+0xfc00d694>
 800d6bc:	110003cc 	andi	r4,r2,15
 800d6c0:	00c00104 	movi	r3,4
 800d6c4:	20fff826 	beq	r4,r3,800d6a8 <__alt_data_end+0xfc00d6a8>
 800d6c8:	0007883a 	mov	r3,zero
 800d6cc:	003fd906 	br	800d634 <__alt_data_end+0xfc00d634>
 800d6d0:	0005883a 	mov	r2,zero
 800d6d4:	003fe906 	br	800d67c <__alt_data_end+0xfc00d67c>
 800d6d8:	00800434 	movhi	r2,16
 800d6dc:	84000234 	orhi	r16,r16,8
 800d6e0:	10bfffc4 	addi	r2,r2,-1
 800d6e4:	e4c0004c 	andi	r19,fp,1
 800d6e8:	80a0703a 	and	r16,r16,r2
 800d6ec:	003ef606 	br	800d2c8 <__alt_data_end+0xfc00d2c8>

0800d6f0 <__subdf3>:
 800d6f0:	00c00434 	movhi	r3,16
 800d6f4:	18ffffc4 	addi	r3,r3,-1
 800d6f8:	defffb04 	addi	sp,sp,-20
 800d6fc:	28d2703a 	and	r9,r5,r3
 800d700:	3814d53a 	srli	r10,r7,20
 800d704:	38c6703a 	and	r3,r7,r3
 800d708:	3004d77a 	srli	r2,r6,29
 800d70c:	dc800215 	stw	r18,8(sp)
 800d710:	dc000015 	stw	r16,0(sp)
 800d714:	2824d7fa 	srli	r18,r5,31
 800d718:	2820d53a 	srli	r16,r5,20
 800d71c:	481290fa 	slli	r9,r9,3
 800d720:	200ad77a 	srli	r5,r4,29
 800d724:	180690fa 	slli	r3,r3,3
 800d728:	dc400115 	stw	r17,4(sp)
 800d72c:	dfc00415 	stw	ra,16(sp)
 800d730:	202290fa 	slli	r17,r4,3
 800d734:	dcc00315 	stw	r19,12(sp)
 800d738:	5281ffcc 	andi	r10,r10,2047
 800d73c:	0101ffc4 	movi	r4,2047
 800d740:	9011883a 	mov	r8,r18
 800d744:	8401ffcc 	andi	r16,r16,2047
 800d748:	94803fcc 	andi	r18,r18,255
 800d74c:	494ab03a 	or	r5,r9,r5
 800d750:	380ed7fa 	srli	r7,r7,31
 800d754:	1886b03a 	or	r3,r3,r2
 800d758:	300c90fa 	slli	r6,r6,3
 800d75c:	51009026 	beq	r10,r4,800d9a0 <__subdf3+0x2b0>
 800d760:	39c0005c 	xori	r7,r7,1
 800d764:	8285c83a 	sub	r2,r16,r10
 800d768:	91c06f26 	beq	r18,r7,800d928 <__subdf3+0x238>
 800d76c:	0080b10e 	bge	zero,r2,800da34 <__subdf3+0x344>
 800d770:	50002a1e 	bne	r10,zero,800d81c <__subdf3+0x12c>
 800d774:	1988b03a 	or	r4,r3,r6
 800d778:	2000941e 	bne	r4,zero,800d9cc <__subdf3+0x2dc>
 800d77c:	888001cc 	andi	r2,r17,7
 800d780:	10005b26 	beq	r2,zero,800d8f0 <__subdf3+0x200>
 800d784:	88c003cc 	andi	r3,r17,15
 800d788:	00800104 	movi	r2,4
 800d78c:	18805826 	beq	r3,r2,800d8f0 <__subdf3+0x200>
 800d790:	88c00104 	addi	r3,r17,4
 800d794:	1c63803a 	cmpltu	r17,r3,r17
 800d798:	2c4b883a 	add	r5,r5,r17
 800d79c:	2880202c 	andhi	r2,r5,128
 800d7a0:	9200004c 	andi	r8,r18,1
 800d7a4:	1823883a 	mov	r17,r3
 800d7a8:	10005426 	beq	r2,zero,800d8fc <__subdf3+0x20c>
 800d7ac:	84000044 	addi	r16,r16,1
 800d7b0:	0081ffc4 	movi	r2,2047
 800d7b4:	8080bf26 	beq	r16,r2,800dab4 <__subdf3+0x3c4>
 800d7b8:	013fe034 	movhi	r4,65408
 800d7bc:	213fffc4 	addi	r4,r4,-1
 800d7c0:	290a703a 	and	r5,r5,r4
 800d7c4:	2804977a 	slli	r2,r5,29
 800d7c8:	280a927a 	slli	r5,r5,9
 800d7cc:	8822d0fa 	srli	r17,r17,3
 800d7d0:	8401ffcc 	andi	r16,r16,2047
 800d7d4:	2808d33a 	srli	r4,r5,12
 800d7d8:	1444b03a 	or	r2,r2,r17
 800d7dc:	8401ffcc 	andi	r16,r16,2047
 800d7e0:	800a953a 	slli	r5,r16,20
 800d7e4:	40c03fcc 	andi	r3,r8,255
 800d7e8:	04000434 	movhi	r16,16
 800d7ec:	180697fa 	slli	r3,r3,31
 800d7f0:	843fffc4 	addi	r16,r16,-1
 800d7f4:	2420703a 	and	r16,r4,r16
 800d7f8:	8160b03a 	or	r16,r16,r5
 800d7fc:	80c6b03a 	or	r3,r16,r3
 800d800:	dfc00417 	ldw	ra,16(sp)
 800d804:	dcc00317 	ldw	r19,12(sp)
 800d808:	dc800217 	ldw	r18,8(sp)
 800d80c:	dc400117 	ldw	r17,4(sp)
 800d810:	dc000017 	ldw	r16,0(sp)
 800d814:	dec00504 	addi	sp,sp,20
 800d818:	f800283a 	ret
 800d81c:	0101ffc4 	movi	r4,2047
 800d820:	813fd626 	beq	r16,r4,800d77c <__alt_data_end+0xfc00d77c>
 800d824:	18c02034 	orhi	r3,r3,128
 800d828:	01000e04 	movi	r4,56
 800d82c:	2080a416 	blt	r4,r2,800dac0 <__subdf3+0x3d0>
 800d830:	010007c4 	movi	r4,31
 800d834:	2080c716 	blt	r4,r2,800db54 <__subdf3+0x464>
 800d838:	01000804 	movi	r4,32
 800d83c:	2089c83a 	sub	r4,r4,r2
 800d840:	1910983a 	sll	r8,r3,r4
 800d844:	308ed83a 	srl	r7,r6,r2
 800d848:	3108983a 	sll	r4,r6,r4
 800d84c:	1884d83a 	srl	r2,r3,r2
 800d850:	41ccb03a 	or	r6,r8,r7
 800d854:	2008c03a 	cmpne	r4,r4,zero
 800d858:	310cb03a 	or	r6,r6,r4
 800d85c:	898dc83a 	sub	r6,r17,r6
 800d860:	89a3803a 	cmpltu	r17,r17,r6
 800d864:	288bc83a 	sub	r5,r5,r2
 800d868:	2c4bc83a 	sub	r5,r5,r17
 800d86c:	3023883a 	mov	r17,r6
 800d870:	2880202c 	andhi	r2,r5,128
 800d874:	10006b26 	beq	r2,zero,800da24 <__subdf3+0x334>
 800d878:	04c02034 	movhi	r19,128
 800d87c:	9cffffc4 	addi	r19,r19,-1
 800d880:	2ce6703a 	and	r19,r5,r19
 800d884:	98007c26 	beq	r19,zero,800da78 <__subdf3+0x388>
 800d888:	9809883a 	mov	r4,r19
 800d88c:	800e1bc0 	call	800e1bc <__clzsi2>
 800d890:	10fffe04 	addi	r3,r2,-8
 800d894:	010007c4 	movi	r4,31
 800d898:	20c07d16 	blt	r4,r3,800da90 <__subdf3+0x3a0>
 800d89c:	01400a04 	movi	r5,40
 800d8a0:	2885c83a 	sub	r2,r5,r2
 800d8a4:	888ad83a 	srl	r5,r17,r2
 800d8a8:	98e6983a 	sll	r19,r19,r3
 800d8ac:	88e2983a 	sll	r17,r17,r3
 800d8b0:	2ce6b03a 	or	r19,r5,r19
 800d8b4:	1c007a16 	blt	r3,r16,800daa0 <__subdf3+0x3b0>
 800d8b8:	1c21c83a 	sub	r16,r3,r16
 800d8bc:	81400044 	addi	r5,r16,1
 800d8c0:	00c007c4 	movi	r3,31
 800d8c4:	19409616 	blt	r3,r5,800db20 <__subdf3+0x430>
 800d8c8:	1c21c83a 	sub	r16,r3,r16
 800d8cc:	8c08983a 	sll	r4,r17,r16
 800d8d0:	8946d83a 	srl	r3,r17,r5
 800d8d4:	9c20983a 	sll	r16,r19,r16
 800d8d8:	2008c03a 	cmpne	r4,r4,zero
 800d8dc:	994ad83a 	srl	r5,r19,r5
 800d8e0:	1c06b03a 	or	r3,r3,r16
 800d8e4:	1922b03a 	or	r17,r3,r4
 800d8e8:	0021883a 	mov	r16,zero
 800d8ec:	003fa306 	br	800d77c <__alt_data_end+0xfc00d77c>
 800d8f0:	2880202c 	andhi	r2,r5,128
 800d8f4:	9200004c 	andi	r8,r18,1
 800d8f8:	103fac1e 	bne	r2,zero,800d7ac <__alt_data_end+0xfc00d7ac>
 800d8fc:	2804977a 	slli	r2,r5,29
 800d900:	8822d0fa 	srli	r17,r17,3
 800d904:	00c1ffc4 	movi	r3,2047
 800d908:	280ad0fa 	srli	r5,r5,3
 800d90c:	1444b03a 	or	r2,r2,r17
 800d910:	80c02726 	beq	r16,r3,800d9b0 <__subdf3+0x2c0>
 800d914:	01000434 	movhi	r4,16
 800d918:	213fffc4 	addi	r4,r4,-1
 800d91c:	80e0703a 	and	r16,r16,r3
 800d920:	2908703a 	and	r4,r5,r4
 800d924:	003fad06 	br	800d7dc <__alt_data_end+0xfc00d7dc>
 800d928:	0080690e 	bge	zero,r2,800dad0 <__subdf3+0x3e0>
 800d92c:	50002f26 	beq	r10,zero,800d9ec <__subdf3+0x2fc>
 800d930:	0101ffc4 	movi	r4,2047
 800d934:	813f9126 	beq	r16,r4,800d77c <__alt_data_end+0xfc00d77c>
 800d938:	18c02034 	orhi	r3,r3,128
 800d93c:	01000e04 	movi	r4,56
 800d940:	2080b00e 	bge	r4,r2,800dc04 <__subdf3+0x514>
 800d944:	198cb03a 	or	r6,r3,r6
 800d948:	300ec03a 	cmpne	r7,r6,zero
 800d94c:	0005883a 	mov	r2,zero
 800d950:	3c4f883a 	add	r7,r7,r17
 800d954:	3c63803a 	cmpltu	r17,r7,r17
 800d958:	114b883a 	add	r5,r2,r5
 800d95c:	2c4b883a 	add	r5,r5,r17
 800d960:	3823883a 	mov	r17,r7
 800d964:	2880202c 	andhi	r2,r5,128
 800d968:	10002e26 	beq	r2,zero,800da24 <__subdf3+0x334>
 800d96c:	84000044 	addi	r16,r16,1
 800d970:	0081ffc4 	movi	r2,2047
 800d974:	8080de26 	beq	r16,r2,800dcf0 <__subdf3+0x600>
 800d978:	00bfe034 	movhi	r2,65408
 800d97c:	10bfffc4 	addi	r2,r2,-1
 800d980:	288a703a 	and	r5,r5,r2
 800d984:	880cd07a 	srli	r6,r17,1
 800d988:	280897fa 	slli	r4,r5,31
 800d98c:	88c0004c 	andi	r3,r17,1
 800d990:	30e2b03a 	or	r17,r6,r3
 800d994:	280ad07a 	srli	r5,r5,1
 800d998:	8922b03a 	or	r17,r17,r4
 800d99c:	003f7706 	br	800d77c <__alt_data_end+0xfc00d77c>
 800d9a0:	1984b03a 	or	r2,r3,r6
 800d9a4:	103f6e26 	beq	r2,zero,800d760 <__alt_data_end+0xfc00d760>
 800d9a8:	39c03fcc 	andi	r7,r7,255
 800d9ac:	003f6d06 	br	800d764 <__alt_data_end+0xfc00d764>
 800d9b0:	1146b03a 	or	r3,r2,r5
 800d9b4:	18003f26 	beq	r3,zero,800dab4 <__subdf3+0x3c4>
 800d9b8:	00c00434 	movhi	r3,16
 800d9bc:	29000234 	orhi	r4,r5,8
 800d9c0:	18ffffc4 	addi	r3,r3,-1
 800d9c4:	20c8703a 	and	r4,r4,r3
 800d9c8:	003f8406 	br	800d7dc <__alt_data_end+0xfc00d7dc>
 800d9cc:	10bfffc4 	addi	r2,r2,-1
 800d9d0:	1000501e 	bne	r2,zero,800db14 <__subdf3+0x424>
 800d9d4:	898fc83a 	sub	r7,r17,r6
 800d9d8:	89e3803a 	cmpltu	r17,r17,r7
 800d9dc:	28cbc83a 	sub	r5,r5,r3
 800d9e0:	2c4bc83a 	sub	r5,r5,r17
 800d9e4:	3823883a 	mov	r17,r7
 800d9e8:	003fa106 	br	800d870 <__alt_data_end+0xfc00d870>
 800d9ec:	1988b03a 	or	r4,r3,r6
 800d9f0:	203f6226 	beq	r4,zero,800d77c <__alt_data_end+0xfc00d77c>
 800d9f4:	10bfffc4 	addi	r2,r2,-1
 800d9f8:	10009b1e 	bne	r2,zero,800dc68 <__subdf3+0x578>
 800d9fc:	344d883a 	add	r6,r6,r17
 800da00:	3463803a 	cmpltu	r17,r6,r17
 800da04:	194b883a 	add	r5,r3,r5
 800da08:	2c4b883a 	add	r5,r5,r17
 800da0c:	3023883a 	mov	r17,r6
 800da10:	003fd406 	br	800d964 <__alt_data_end+0xfc00d964>
 800da14:	1106b03a 	or	r3,r2,r4
 800da18:	1800b426 	beq	r3,zero,800dcec <__subdf3+0x5fc>
 800da1c:	100b883a 	mov	r5,r2
 800da20:	2023883a 	mov	r17,r4
 800da24:	888001cc 	andi	r2,r17,7
 800da28:	103f561e 	bne	r2,zero,800d784 <__alt_data_end+0xfc00d784>
 800da2c:	9200004c 	andi	r8,r18,1
 800da30:	003fb206 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800da34:	1000531e 	bne	r2,zero,800db84 <__subdf3+0x494>
 800da38:	80800044 	addi	r2,r16,1
 800da3c:	1081ffcc 	andi	r2,r2,2047
 800da40:	01000044 	movi	r4,1
 800da44:	2080a00e 	bge	r4,r2,800dcc8 <__subdf3+0x5d8>
 800da48:	8985c83a 	sub	r2,r17,r6
 800da4c:	8889803a 	cmpltu	r4,r17,r2
 800da50:	28e7c83a 	sub	r19,r5,r3
 800da54:	9927c83a 	sub	r19,r19,r4
 800da58:	9900202c 	andhi	r4,r19,128
 800da5c:	20006226 	beq	r4,zero,800dbe8 <__subdf3+0x4f8>
 800da60:	3463c83a 	sub	r17,r6,r17
 800da64:	194bc83a 	sub	r5,r3,r5
 800da68:	344d803a 	cmpltu	r6,r6,r17
 800da6c:	29a7c83a 	sub	r19,r5,r6
 800da70:	3825883a 	mov	r18,r7
 800da74:	983f841e 	bne	r19,zero,800d888 <__alt_data_end+0xfc00d888>
 800da78:	8809883a 	mov	r4,r17
 800da7c:	800e1bc0 	call	800e1bc <__clzsi2>
 800da80:	10800804 	addi	r2,r2,32
 800da84:	10fffe04 	addi	r3,r2,-8
 800da88:	010007c4 	movi	r4,31
 800da8c:	20ff830e 	bge	r4,r3,800d89c <__alt_data_end+0xfc00d89c>
 800da90:	14fff604 	addi	r19,r2,-40
 800da94:	8ce6983a 	sll	r19,r17,r19
 800da98:	0023883a 	mov	r17,zero
 800da9c:	1c3f860e 	bge	r3,r16,800d8b8 <__alt_data_end+0xfc00d8b8>
 800daa0:	017fe034 	movhi	r5,65408
 800daa4:	297fffc4 	addi	r5,r5,-1
 800daa8:	80e1c83a 	sub	r16,r16,r3
 800daac:	994a703a 	and	r5,r19,r5
 800dab0:	003f3206 	br	800d77c <__alt_data_end+0xfc00d77c>
 800dab4:	0009883a 	mov	r4,zero
 800dab8:	0005883a 	mov	r2,zero
 800dabc:	003f4706 	br	800d7dc <__alt_data_end+0xfc00d7dc>
 800dac0:	198cb03a 	or	r6,r3,r6
 800dac4:	300cc03a 	cmpne	r6,r6,zero
 800dac8:	0005883a 	mov	r2,zero
 800dacc:	003f6306 	br	800d85c <__alt_data_end+0xfc00d85c>
 800dad0:	10009d1e 	bne	r2,zero,800dd48 <__subdf3+0x658>
 800dad4:	81c00044 	addi	r7,r16,1
 800dad8:	3881ffcc 	andi	r2,r7,2047
 800dadc:	02400044 	movi	r9,1
 800dae0:	4880680e 	bge	r9,r2,800dc84 <__subdf3+0x594>
 800dae4:	0081ffc4 	movi	r2,2047
 800dae8:	3880ae26 	beq	r7,r2,800dda4 <__subdf3+0x6b4>
 800daec:	344d883a 	add	r6,r6,r17
 800daf0:	3463803a 	cmpltu	r17,r6,r17
 800daf4:	194b883a 	add	r5,r3,r5
 800daf8:	2c4b883a 	add	r5,r5,r17
 800dafc:	282297fa 	slli	r17,r5,31
 800db00:	300cd07a 	srli	r6,r6,1
 800db04:	280ad07a 	srli	r5,r5,1
 800db08:	3821883a 	mov	r16,r7
 800db0c:	89a2b03a 	or	r17,r17,r6
 800db10:	003f1a06 	br	800d77c <__alt_data_end+0xfc00d77c>
 800db14:	0101ffc4 	movi	r4,2047
 800db18:	813f431e 	bne	r16,r4,800d828 <__alt_data_end+0xfc00d828>
 800db1c:	003f1706 	br	800d77c <__alt_data_end+0xfc00d77c>
 800db20:	80bff844 	addi	r2,r16,-31
 800db24:	00c00804 	movi	r3,32
 800db28:	9884d83a 	srl	r2,r19,r2
 800db2c:	28c05126 	beq	r5,r3,800dc74 <__subdf3+0x584>
 800db30:	00c00fc4 	movi	r3,63
 800db34:	1c21c83a 	sub	r16,r3,r16
 800db38:	9c26983a 	sll	r19,r19,r16
 800db3c:	9c62b03a 	or	r17,r19,r17
 800db40:	8822c03a 	cmpne	r17,r17,zero
 800db44:	88a2b03a 	or	r17,r17,r2
 800db48:	000b883a 	mov	r5,zero
 800db4c:	0021883a 	mov	r16,zero
 800db50:	003fb406 	br	800da24 <__alt_data_end+0xfc00da24>
 800db54:	113ff804 	addi	r4,r2,-32
 800db58:	01c00804 	movi	r7,32
 800db5c:	1908d83a 	srl	r4,r3,r4
 800db60:	11c04626 	beq	r2,r7,800dc7c <__subdf3+0x58c>
 800db64:	01c01004 	movi	r7,64
 800db68:	3885c83a 	sub	r2,r7,r2
 800db6c:	1884983a 	sll	r2,r3,r2
 800db70:	118cb03a 	or	r6,r2,r6
 800db74:	300cc03a 	cmpne	r6,r6,zero
 800db78:	310cb03a 	or	r6,r6,r4
 800db7c:	0005883a 	mov	r2,zero
 800db80:	003f3606 	br	800d85c <__alt_data_end+0xfc00d85c>
 800db84:	80002b26 	beq	r16,zero,800dc34 <__subdf3+0x544>
 800db88:	0101ffc4 	movi	r4,2047
 800db8c:	51006926 	beq	r10,r4,800dd34 <__subdf3+0x644>
 800db90:	0085c83a 	sub	r2,zero,r2
 800db94:	29402034 	orhi	r5,r5,128
 800db98:	01000e04 	movi	r4,56
 800db9c:	20807d16 	blt	r4,r2,800dd94 <__subdf3+0x6a4>
 800dba0:	010007c4 	movi	r4,31
 800dba4:	2080d916 	blt	r4,r2,800df0c <__subdf3+0x81c>
 800dba8:	01000804 	movi	r4,32
 800dbac:	2089c83a 	sub	r4,r4,r2
 800dbb0:	2912983a 	sll	r9,r5,r4
 800dbb4:	8890d83a 	srl	r8,r17,r2
 800dbb8:	8908983a 	sll	r4,r17,r4
 800dbbc:	2884d83a 	srl	r2,r5,r2
 800dbc0:	4a22b03a 	or	r17,r9,r8
 800dbc4:	2008c03a 	cmpne	r4,r4,zero
 800dbc8:	8922b03a 	or	r17,r17,r4
 800dbcc:	3463c83a 	sub	r17,r6,r17
 800dbd0:	1885c83a 	sub	r2,r3,r2
 800dbd4:	344d803a 	cmpltu	r6,r6,r17
 800dbd8:	118bc83a 	sub	r5,r2,r6
 800dbdc:	5021883a 	mov	r16,r10
 800dbe0:	3825883a 	mov	r18,r7
 800dbe4:	003f2206 	br	800d870 <__alt_data_end+0xfc00d870>
 800dbe8:	9886b03a 	or	r3,r19,r2
 800dbec:	18001c1e 	bne	r3,zero,800dc60 <__subdf3+0x570>
 800dbf0:	0011883a 	mov	r8,zero
 800dbf4:	000b883a 	mov	r5,zero
 800dbf8:	0023883a 	mov	r17,zero
 800dbfc:	0021883a 	mov	r16,zero
 800dc00:	003f3e06 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800dc04:	010007c4 	movi	r4,31
 800dc08:	20803c16 	blt	r4,r2,800dcfc <__subdf3+0x60c>
 800dc0c:	01000804 	movi	r4,32
 800dc10:	2089c83a 	sub	r4,r4,r2
 800dc14:	1912983a 	sll	r9,r3,r4
 800dc18:	308ed83a 	srl	r7,r6,r2
 800dc1c:	3108983a 	sll	r4,r6,r4
 800dc20:	1884d83a 	srl	r2,r3,r2
 800dc24:	49ceb03a 	or	r7,r9,r7
 800dc28:	2008c03a 	cmpne	r4,r4,zero
 800dc2c:	390eb03a 	or	r7,r7,r4
 800dc30:	003f4706 	br	800d950 <__alt_data_end+0xfc00d950>
 800dc34:	2c48b03a 	or	r4,r5,r17
 800dc38:	20003e26 	beq	r4,zero,800dd34 <__subdf3+0x644>
 800dc3c:	0084303a 	nor	r2,zero,r2
 800dc40:	10003a1e 	bne	r2,zero,800dd2c <__subdf3+0x63c>
 800dc44:	3463c83a 	sub	r17,r6,r17
 800dc48:	194bc83a 	sub	r5,r3,r5
 800dc4c:	344d803a 	cmpltu	r6,r6,r17
 800dc50:	298bc83a 	sub	r5,r5,r6
 800dc54:	5021883a 	mov	r16,r10
 800dc58:	3825883a 	mov	r18,r7
 800dc5c:	003f0406 	br	800d870 <__alt_data_end+0xfc00d870>
 800dc60:	1023883a 	mov	r17,r2
 800dc64:	003f0706 	br	800d884 <__alt_data_end+0xfc00d884>
 800dc68:	0101ffc4 	movi	r4,2047
 800dc6c:	813f331e 	bne	r16,r4,800d93c <__alt_data_end+0xfc00d93c>
 800dc70:	003ec206 	br	800d77c <__alt_data_end+0xfc00d77c>
 800dc74:	0027883a 	mov	r19,zero
 800dc78:	003fb006 	br	800db3c <__alt_data_end+0xfc00db3c>
 800dc7c:	0005883a 	mov	r2,zero
 800dc80:	003fbb06 	br	800db70 <__alt_data_end+0xfc00db70>
 800dc84:	2c44b03a 	or	r2,r5,r17
 800dc88:	80008b1e 	bne	r16,zero,800deb8 <__subdf3+0x7c8>
 800dc8c:	1000b526 	beq	r2,zero,800df64 <__subdf3+0x874>
 800dc90:	1984b03a 	or	r2,r3,r6
 800dc94:	103eb926 	beq	r2,zero,800d77c <__alt_data_end+0xfc00d77c>
 800dc98:	3449883a 	add	r4,r6,r17
 800dc9c:	2463803a 	cmpltu	r17,r4,r17
 800dca0:	194b883a 	add	r5,r3,r5
 800dca4:	2c4b883a 	add	r5,r5,r17
 800dca8:	2880202c 	andhi	r2,r5,128
 800dcac:	2023883a 	mov	r17,r4
 800dcb0:	103f5c26 	beq	r2,zero,800da24 <__alt_data_end+0xfc00da24>
 800dcb4:	00bfe034 	movhi	r2,65408
 800dcb8:	10bfffc4 	addi	r2,r2,-1
 800dcbc:	4821883a 	mov	r16,r9
 800dcc0:	288a703a 	and	r5,r5,r2
 800dcc4:	003ead06 	br	800d77c <__alt_data_end+0xfc00d77c>
 800dcc8:	2c44b03a 	or	r2,r5,r17
 800dccc:	8000291e 	bne	r16,zero,800dd74 <__subdf3+0x684>
 800dcd0:	10004f1e 	bne	r2,zero,800de10 <__subdf3+0x720>
 800dcd4:	1984b03a 	or	r2,r3,r6
 800dcd8:	10000426 	beq	r2,zero,800dcec <__subdf3+0x5fc>
 800dcdc:	180b883a 	mov	r5,r3
 800dce0:	3023883a 	mov	r17,r6
 800dce4:	3825883a 	mov	r18,r7
 800dce8:	003ea406 	br	800d77c <__alt_data_end+0xfc00d77c>
 800dcec:	0011883a 	mov	r8,zero
 800dcf0:	000b883a 	mov	r5,zero
 800dcf4:	0023883a 	mov	r17,zero
 800dcf8:	003f0006 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800dcfc:	11fff804 	addi	r7,r2,-32
 800dd00:	19c8d83a 	srl	r4,r3,r7
 800dd04:	01c00804 	movi	r7,32
 800dd08:	11c07e26 	beq	r2,r7,800df04 <__subdf3+0x814>
 800dd0c:	01c01004 	movi	r7,64
 800dd10:	3885c83a 	sub	r2,r7,r2
 800dd14:	1884983a 	sll	r2,r3,r2
 800dd18:	118cb03a 	or	r6,r2,r6
 800dd1c:	300ec03a 	cmpne	r7,r6,zero
 800dd20:	390eb03a 	or	r7,r7,r4
 800dd24:	0005883a 	mov	r2,zero
 800dd28:	003f0906 	br	800d950 <__alt_data_end+0xfc00d950>
 800dd2c:	0101ffc4 	movi	r4,2047
 800dd30:	513f991e 	bne	r10,r4,800db98 <__alt_data_end+0xfc00db98>
 800dd34:	180b883a 	mov	r5,r3
 800dd38:	3023883a 	mov	r17,r6
 800dd3c:	5021883a 	mov	r16,r10
 800dd40:	3825883a 	mov	r18,r7
 800dd44:	003e8d06 	br	800d77c <__alt_data_end+0xfc00d77c>
 800dd48:	80001a1e 	bne	r16,zero,800ddb4 <__subdf3+0x6c4>
 800dd4c:	2c48b03a 	or	r4,r5,r17
 800dd50:	20005526 	beq	r4,zero,800dea8 <__subdf3+0x7b8>
 800dd54:	0084303a 	nor	r2,zero,r2
 800dd58:	1000511e 	bne	r2,zero,800dea0 <__subdf3+0x7b0>
 800dd5c:	89a3883a 	add	r17,r17,r6
 800dd60:	194b883a 	add	r5,r3,r5
 800dd64:	898d803a 	cmpltu	r6,r17,r6
 800dd68:	298b883a 	add	r5,r5,r6
 800dd6c:	5021883a 	mov	r16,r10
 800dd70:	003efc06 	br	800d964 <__alt_data_end+0xfc00d964>
 800dd74:	1000341e 	bne	r2,zero,800de48 <__subdf3+0x758>
 800dd78:	1984b03a 	or	r2,r3,r6
 800dd7c:	10006f26 	beq	r2,zero,800df3c <__subdf3+0x84c>
 800dd80:	180b883a 	mov	r5,r3
 800dd84:	3023883a 	mov	r17,r6
 800dd88:	3825883a 	mov	r18,r7
 800dd8c:	0401ffc4 	movi	r16,2047
 800dd90:	003e7a06 	br	800d77c <__alt_data_end+0xfc00d77c>
 800dd94:	2c62b03a 	or	r17,r5,r17
 800dd98:	8822c03a 	cmpne	r17,r17,zero
 800dd9c:	0005883a 	mov	r2,zero
 800dda0:	003f8a06 	br	800dbcc <__alt_data_end+0xfc00dbcc>
 800dda4:	3821883a 	mov	r16,r7
 800dda8:	000b883a 	mov	r5,zero
 800ddac:	0023883a 	mov	r17,zero
 800ddb0:	003ed206 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800ddb4:	0101ffc4 	movi	r4,2047
 800ddb8:	51003b26 	beq	r10,r4,800dea8 <__subdf3+0x7b8>
 800ddbc:	0085c83a 	sub	r2,zero,r2
 800ddc0:	29402034 	orhi	r5,r5,128
 800ddc4:	01000e04 	movi	r4,56
 800ddc8:	20806216 	blt	r4,r2,800df54 <__subdf3+0x864>
 800ddcc:	010007c4 	movi	r4,31
 800ddd0:	20806b16 	blt	r4,r2,800df80 <__subdf3+0x890>
 800ddd4:	01000804 	movi	r4,32
 800ddd8:	2089c83a 	sub	r4,r4,r2
 800dddc:	2912983a 	sll	r9,r5,r4
 800dde0:	888ed83a 	srl	r7,r17,r2
 800dde4:	8908983a 	sll	r4,r17,r4
 800dde8:	2884d83a 	srl	r2,r5,r2
 800ddec:	49e2b03a 	or	r17,r9,r7
 800ddf0:	2008c03a 	cmpne	r4,r4,zero
 800ddf4:	8922b03a 	or	r17,r17,r4
 800ddf8:	89a3883a 	add	r17,r17,r6
 800ddfc:	10c5883a 	add	r2,r2,r3
 800de00:	898d803a 	cmpltu	r6,r17,r6
 800de04:	118b883a 	add	r5,r2,r6
 800de08:	5021883a 	mov	r16,r10
 800de0c:	003ed506 	br	800d964 <__alt_data_end+0xfc00d964>
 800de10:	1984b03a 	or	r2,r3,r6
 800de14:	103e5926 	beq	r2,zero,800d77c <__alt_data_end+0xfc00d77c>
 800de18:	8989c83a 	sub	r4,r17,r6
 800de1c:	8911803a 	cmpltu	r8,r17,r4
 800de20:	28c5c83a 	sub	r2,r5,r3
 800de24:	1205c83a 	sub	r2,r2,r8
 800de28:	1200202c 	andhi	r8,r2,128
 800de2c:	403ef926 	beq	r8,zero,800da14 <__alt_data_end+0xfc00da14>
 800de30:	3463c83a 	sub	r17,r6,r17
 800de34:	194bc83a 	sub	r5,r3,r5
 800de38:	344d803a 	cmpltu	r6,r6,r17
 800de3c:	298bc83a 	sub	r5,r5,r6
 800de40:	3825883a 	mov	r18,r7
 800de44:	003e4d06 	br	800d77c <__alt_data_end+0xfc00d77c>
 800de48:	1984b03a 	or	r2,r3,r6
 800de4c:	10002b26 	beq	r2,zero,800defc <__subdf3+0x80c>
 800de50:	2808d0fa 	srli	r4,r5,3
 800de54:	8822d0fa 	srli	r17,r17,3
 800de58:	280a977a 	slli	r5,r5,29
 800de5c:	2080022c 	andhi	r2,r4,8
 800de60:	2c62b03a 	or	r17,r5,r17
 800de64:	10000826 	beq	r2,zero,800de88 <__subdf3+0x798>
 800de68:	1810d0fa 	srli	r8,r3,3
 800de6c:	4080022c 	andhi	r2,r8,8
 800de70:	1000051e 	bne	r2,zero,800de88 <__subdf3+0x798>
 800de74:	300cd0fa 	srli	r6,r6,3
 800de78:	1804977a 	slli	r2,r3,29
 800de7c:	4009883a 	mov	r4,r8
 800de80:	3825883a 	mov	r18,r7
 800de84:	11a2b03a 	or	r17,r2,r6
 800de88:	880ad77a 	srli	r5,r17,29
 800de8c:	200890fa 	slli	r4,r4,3
 800de90:	882290fa 	slli	r17,r17,3
 800de94:	0401ffc4 	movi	r16,2047
 800de98:	290ab03a 	or	r5,r5,r4
 800de9c:	003e3706 	br	800d77c <__alt_data_end+0xfc00d77c>
 800dea0:	0101ffc4 	movi	r4,2047
 800dea4:	513fc71e 	bne	r10,r4,800ddc4 <__alt_data_end+0xfc00ddc4>
 800dea8:	180b883a 	mov	r5,r3
 800deac:	3023883a 	mov	r17,r6
 800deb0:	5021883a 	mov	r16,r10
 800deb4:	003e3106 	br	800d77c <__alt_data_end+0xfc00d77c>
 800deb8:	10002d26 	beq	r2,zero,800df70 <__subdf3+0x880>
 800debc:	1984b03a 	or	r2,r3,r6
 800dec0:	10000e26 	beq	r2,zero,800defc <__subdf3+0x80c>
 800dec4:	2808d0fa 	srli	r4,r5,3
 800dec8:	8822d0fa 	srli	r17,r17,3
 800decc:	280a977a 	slli	r5,r5,29
 800ded0:	2080022c 	andhi	r2,r4,8
 800ded4:	2c62b03a 	or	r17,r5,r17
 800ded8:	103feb26 	beq	r2,zero,800de88 <__alt_data_end+0xfc00de88>
 800dedc:	180ed0fa 	srli	r7,r3,3
 800dee0:	3880022c 	andhi	r2,r7,8
 800dee4:	103fe81e 	bne	r2,zero,800de88 <__alt_data_end+0xfc00de88>
 800dee8:	300cd0fa 	srli	r6,r6,3
 800deec:	1804977a 	slli	r2,r3,29
 800def0:	3809883a 	mov	r4,r7
 800def4:	11a2b03a 	or	r17,r2,r6
 800def8:	003fe306 	br	800de88 <__alt_data_end+0xfc00de88>
 800defc:	0401ffc4 	movi	r16,2047
 800df00:	003e1e06 	br	800d77c <__alt_data_end+0xfc00d77c>
 800df04:	0005883a 	mov	r2,zero
 800df08:	003f8306 	br	800dd18 <__alt_data_end+0xfc00dd18>
 800df0c:	113ff804 	addi	r4,r2,-32
 800df10:	02000804 	movi	r8,32
 800df14:	2908d83a 	srl	r4,r5,r4
 800df18:	12002526 	beq	r2,r8,800dfb0 <__subdf3+0x8c0>
 800df1c:	02001004 	movi	r8,64
 800df20:	4085c83a 	sub	r2,r8,r2
 800df24:	288a983a 	sll	r5,r5,r2
 800df28:	2c62b03a 	or	r17,r5,r17
 800df2c:	8822c03a 	cmpne	r17,r17,zero
 800df30:	8922b03a 	or	r17,r17,r4
 800df34:	0005883a 	mov	r2,zero
 800df38:	003f2406 	br	800dbcc <__alt_data_end+0xfc00dbcc>
 800df3c:	01402034 	movhi	r5,128
 800df40:	0011883a 	mov	r8,zero
 800df44:	297fffc4 	addi	r5,r5,-1
 800df48:	047ffe04 	movi	r17,-8
 800df4c:	0401ffc4 	movi	r16,2047
 800df50:	003e6a06 	br	800d8fc <__alt_data_end+0xfc00d8fc>
 800df54:	2c62b03a 	or	r17,r5,r17
 800df58:	8822c03a 	cmpne	r17,r17,zero
 800df5c:	0005883a 	mov	r2,zero
 800df60:	003fa506 	br	800ddf8 <__alt_data_end+0xfc00ddf8>
 800df64:	180b883a 	mov	r5,r3
 800df68:	3023883a 	mov	r17,r6
 800df6c:	003e0306 	br	800d77c <__alt_data_end+0xfc00d77c>
 800df70:	180b883a 	mov	r5,r3
 800df74:	3023883a 	mov	r17,r6
 800df78:	0401ffc4 	movi	r16,2047
 800df7c:	003dff06 	br	800d77c <__alt_data_end+0xfc00d77c>
 800df80:	113ff804 	addi	r4,r2,-32
 800df84:	01c00804 	movi	r7,32
 800df88:	2908d83a 	srl	r4,r5,r4
 800df8c:	11c00a26 	beq	r2,r7,800dfb8 <__subdf3+0x8c8>
 800df90:	01c01004 	movi	r7,64
 800df94:	3885c83a 	sub	r2,r7,r2
 800df98:	288a983a 	sll	r5,r5,r2
 800df9c:	2c62b03a 	or	r17,r5,r17
 800dfa0:	8822c03a 	cmpne	r17,r17,zero
 800dfa4:	8922b03a 	or	r17,r17,r4
 800dfa8:	0005883a 	mov	r2,zero
 800dfac:	003f9206 	br	800ddf8 <__alt_data_end+0xfc00ddf8>
 800dfb0:	000b883a 	mov	r5,zero
 800dfb4:	003fdc06 	br	800df28 <__alt_data_end+0xfc00df28>
 800dfb8:	000b883a 	mov	r5,zero
 800dfbc:	003ff706 	br	800df9c <__alt_data_end+0xfc00df9c>

0800dfc0 <__fixdfsi>:
 800dfc0:	2806d53a 	srli	r3,r5,20
 800dfc4:	00800434 	movhi	r2,16
 800dfc8:	10bfffc4 	addi	r2,r2,-1
 800dfcc:	18c1ffcc 	andi	r3,r3,2047
 800dfd0:	0180ff84 	movi	r6,1022
 800dfd4:	2884703a 	and	r2,r5,r2
 800dfd8:	280ad7fa 	srli	r5,r5,31
 800dfdc:	30c0130e 	bge	r6,r3,800e02c <__fixdfsi+0x6c>
 800dfe0:	01810744 	movi	r6,1053
 800dfe4:	30c00d16 	blt	r6,r3,800e01c <__fixdfsi+0x5c>
 800dfe8:	01810cc4 	movi	r6,1075
 800dfec:	30cdc83a 	sub	r6,r6,r3
 800dff0:	01c007c4 	movi	r7,31
 800dff4:	10800434 	orhi	r2,r2,16
 800dff8:	39800e0e 	bge	r7,r6,800e034 <__fixdfsi+0x74>
 800dffc:	010104c4 	movi	r4,1043
 800e000:	20c7c83a 	sub	r3,r4,r3
 800e004:	10c6d83a 	srl	r3,r2,r3
 800e008:	29403fcc 	andi	r5,r5,255
 800e00c:	0145c83a 	sub	r2,zero,r5
 800e010:	1884f03a 	xor	r2,r3,r2
 800e014:	1145883a 	add	r2,r2,r5
 800e018:	f800283a 	ret
 800e01c:	00a00034 	movhi	r2,32768
 800e020:	10bfffc4 	addi	r2,r2,-1
 800e024:	2885883a 	add	r2,r5,r2
 800e028:	f800283a 	ret
 800e02c:	0005883a 	mov	r2,zero
 800e030:	f800283a 	ret
 800e034:	18fefb44 	addi	r3,r3,-1043
 800e038:	2188d83a 	srl	r4,r4,r6
 800e03c:	10c6983a 	sll	r3,r2,r3
 800e040:	20c6b03a 	or	r3,r4,r3
 800e044:	003ff006 	br	800e008 <__alt_data_end+0xfc00e008>

0800e048 <__floatsidf>:
 800e048:	defffd04 	addi	sp,sp,-12
 800e04c:	dc400115 	stw	r17,4(sp)
 800e050:	dfc00215 	stw	ra,8(sp)
 800e054:	dc000015 	stw	r16,0(sp)
 800e058:	2023883a 	mov	r17,r4
 800e05c:	20001426 	beq	r4,zero,800e0b0 <__floatsidf+0x68>
 800e060:	2020d7fa 	srli	r16,r4,31
 800e064:	80000126 	beq	r16,zero,800e06c <__floatsidf+0x24>
 800e068:	0123c83a 	sub	r17,zero,r4
 800e06c:	8809883a 	mov	r4,r17
 800e070:	800e1bc0 	call	800e1bc <__clzsi2>
 800e074:	01410784 	movi	r5,1054
 800e078:	00c00284 	movi	r3,10
 800e07c:	288bc83a 	sub	r5,r5,r2
 800e080:	18801c16 	blt	r3,r2,800e0f4 <__floatsidf+0xac>
 800e084:	00c002c4 	movi	r3,11
 800e088:	1887c83a 	sub	r3,r3,r2
 800e08c:	88c8d83a 	srl	r4,r17,r3
 800e090:	00c00434 	movhi	r3,16
 800e094:	18ffffc4 	addi	r3,r3,-1
 800e098:	10800544 	addi	r2,r2,21
 800e09c:	20c8703a 	and	r4,r4,r3
 800e0a0:	8884983a 	sll	r2,r17,r2
 800e0a4:	28c1ffcc 	andi	r3,r5,2047
 800e0a8:	800d883a 	mov	r6,r16
 800e0ac:	00000406 	br	800e0c0 <__floatsidf+0x78>
 800e0b0:	000d883a 	mov	r6,zero
 800e0b4:	0007883a 	mov	r3,zero
 800e0b8:	0009883a 	mov	r4,zero
 800e0bc:	0005883a 	mov	r2,zero
 800e0c0:	180a953a 	slli	r5,r3,20
 800e0c4:	31803fcc 	andi	r6,r6,255
 800e0c8:	00c00434 	movhi	r3,16
 800e0cc:	300c97fa 	slli	r6,r6,31
 800e0d0:	18ffffc4 	addi	r3,r3,-1
 800e0d4:	20c6703a 	and	r3,r4,r3
 800e0d8:	1946b03a 	or	r3,r3,r5
 800e0dc:	1986b03a 	or	r3,r3,r6
 800e0e0:	dfc00217 	ldw	ra,8(sp)
 800e0e4:	dc400117 	ldw	r17,4(sp)
 800e0e8:	dc000017 	ldw	r16,0(sp)
 800e0ec:	dec00304 	addi	sp,sp,12
 800e0f0:	f800283a 	ret
 800e0f4:	10fffd44 	addi	r3,r2,-11
 800e0f8:	88c8983a 	sll	r4,r17,r3
 800e0fc:	00800434 	movhi	r2,16
 800e100:	10bfffc4 	addi	r2,r2,-1
 800e104:	2088703a 	and	r4,r4,r2
 800e108:	28c1ffcc 	andi	r3,r5,2047
 800e10c:	800d883a 	mov	r6,r16
 800e110:	0005883a 	mov	r2,zero
 800e114:	003fea06 	br	800e0c0 <__alt_data_end+0xfc00e0c0>

0800e118 <__floatunsidf>:
 800e118:	defffe04 	addi	sp,sp,-8
 800e11c:	dc000015 	stw	r16,0(sp)
 800e120:	dfc00115 	stw	ra,4(sp)
 800e124:	2021883a 	mov	r16,r4
 800e128:	20001026 	beq	r4,zero,800e16c <__floatunsidf+0x54>
 800e12c:	800e1bc0 	call	800e1bc <__clzsi2>
 800e130:	01410784 	movi	r5,1054
 800e134:	100d883a 	mov	r6,r2
 800e138:	288bc83a 	sub	r5,r5,r2
 800e13c:	00800284 	movi	r2,10
 800e140:	11801616 	blt	r2,r6,800e19c <__floatunsidf+0x84>
 800e144:	008002c4 	movi	r2,11
 800e148:	1185c83a 	sub	r2,r2,r6
 800e14c:	8084d83a 	srl	r2,r16,r2
 800e150:	00c00434 	movhi	r3,16
 800e154:	31c00544 	addi	r7,r6,21
 800e158:	18ffffc4 	addi	r3,r3,-1
 800e15c:	81e0983a 	sll	r16,r16,r7
 800e160:	10cc703a 	and	r6,r2,r3
 800e164:	2941ffcc 	andi	r5,r5,2047
 800e168:	00000206 	br	800e174 <__floatunsidf+0x5c>
 800e16c:	000b883a 	mov	r5,zero
 800e170:	000d883a 	mov	r6,zero
 800e174:	280a953a 	slli	r5,r5,20
 800e178:	00c00434 	movhi	r3,16
 800e17c:	18ffffc4 	addi	r3,r3,-1
 800e180:	30c6703a 	and	r3,r6,r3
 800e184:	8005883a 	mov	r2,r16
 800e188:	1946b03a 	or	r3,r3,r5
 800e18c:	dfc00117 	ldw	ra,4(sp)
 800e190:	dc000017 	ldw	r16,0(sp)
 800e194:	dec00204 	addi	sp,sp,8
 800e198:	f800283a 	ret
 800e19c:	31bffd44 	addi	r6,r6,-11
 800e1a0:	818c983a 	sll	r6,r16,r6
 800e1a4:	00800434 	movhi	r2,16
 800e1a8:	10bfffc4 	addi	r2,r2,-1
 800e1ac:	2941ffcc 	andi	r5,r5,2047
 800e1b0:	0021883a 	mov	r16,zero
 800e1b4:	308c703a 	and	r6,r6,r2
 800e1b8:	003fee06 	br	800e174 <__alt_data_end+0xfc00e174>

0800e1bc <__clzsi2>:
 800e1bc:	00bfffd4 	movui	r2,65535
 800e1c0:	11000b36 	bltu	r2,r4,800e1f0 <__clzsi2+0x34>
 800e1c4:	00803fc4 	movi	r2,255
 800e1c8:	1100122e 	bgeu	r2,r4,800e214 <__clzsi2+0x58>
 800e1cc:	00c00204 	movi	r3,8
 800e1d0:	01400604 	movi	r5,24
 800e1d4:	20c8d83a 	srl	r4,r4,r3
 800e1d8:	008200b4 	movhi	r2,2050
 800e1dc:	10ae9404 	addi	r2,r2,-17840
 800e1e0:	1109883a 	add	r4,r2,r4
 800e1e4:	20800003 	ldbu	r2,0(r4)
 800e1e8:	2885c83a 	sub	r2,r5,r2
 800e1ec:	f800283a 	ret
 800e1f0:	00804034 	movhi	r2,256
 800e1f4:	10bfffc4 	addi	r2,r2,-1
 800e1f8:	11000336 	bltu	r2,r4,800e208 <__clzsi2+0x4c>
 800e1fc:	00c00404 	movi	r3,16
 800e200:	180b883a 	mov	r5,r3
 800e204:	003ff306 	br	800e1d4 <__alt_data_end+0xfc00e1d4>
 800e208:	00c00604 	movi	r3,24
 800e20c:	01400204 	movi	r5,8
 800e210:	003ff006 	br	800e1d4 <__alt_data_end+0xfc00e1d4>
 800e214:	0007883a 	mov	r3,zero
 800e218:	01400804 	movi	r5,32
 800e21c:	003fed06 	br	800e1d4 <__alt_data_end+0xfc00e1d4>

0800e220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e220:	defffe04 	addi	sp,sp,-8
 800e224:	dfc00115 	stw	ra,4(sp)
 800e228:	df000015 	stw	fp,0(sp)
 800e22c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e230:	008200b4 	movhi	r2,2050
 800e234:	10b5a904 	addi	r2,r2,-10588
 800e238:	10800017 	ldw	r2,0(r2)
 800e23c:	10000526 	beq	r2,zero,800e254 <alt_get_errno+0x34>
 800e240:	008200b4 	movhi	r2,2050
 800e244:	10b5a904 	addi	r2,r2,-10588
 800e248:	10800017 	ldw	r2,0(r2)
 800e24c:	103ee83a 	callr	r2
 800e250:	00000206 	br	800e25c <alt_get_errno+0x3c>
 800e254:	008200b4 	movhi	r2,2050
 800e258:	10bc7f04 	addi	r2,r2,-3588
}
 800e25c:	e037883a 	mov	sp,fp
 800e260:	dfc00117 	ldw	ra,4(sp)
 800e264:	df000017 	ldw	fp,0(sp)
 800e268:	dec00204 	addi	sp,sp,8
 800e26c:	f800283a 	ret

0800e270 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800e270:	defffb04 	addi	sp,sp,-20
 800e274:	dfc00415 	stw	ra,16(sp)
 800e278:	df000315 	stw	fp,12(sp)
 800e27c:	df000304 	addi	fp,sp,12
 800e280:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800e284:	e0bfff17 	ldw	r2,-4(fp)
 800e288:	10000616 	blt	r2,zero,800e2a4 <close+0x34>
 800e28c:	e0bfff17 	ldw	r2,-4(fp)
 800e290:	10c00324 	muli	r3,r2,12
 800e294:	008200b4 	movhi	r2,2050
 800e298:	10b11a04 	addi	r2,r2,-15256
 800e29c:	1885883a 	add	r2,r3,r2
 800e2a0:	00000106 	br	800e2a8 <close+0x38>
 800e2a4:	0005883a 	mov	r2,zero
 800e2a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800e2ac:	e0bffd17 	ldw	r2,-12(fp)
 800e2b0:	10001926 	beq	r2,zero,800e318 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800e2b4:	e0bffd17 	ldw	r2,-12(fp)
 800e2b8:	10800017 	ldw	r2,0(r2)
 800e2bc:	10800417 	ldw	r2,16(r2)
 800e2c0:	10000626 	beq	r2,zero,800e2dc <close+0x6c>
 800e2c4:	e0bffd17 	ldw	r2,-12(fp)
 800e2c8:	10800017 	ldw	r2,0(r2)
 800e2cc:	10800417 	ldw	r2,16(r2)
 800e2d0:	e13ffd17 	ldw	r4,-12(fp)
 800e2d4:	103ee83a 	callr	r2
 800e2d8:	00000106 	br	800e2e0 <close+0x70>
 800e2dc:	0005883a 	mov	r2,zero
 800e2e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800e2e4:	e13fff17 	ldw	r4,-4(fp)
 800e2e8:	800e96c0 	call	800e96c <alt_release_fd>
    if (rval < 0)
 800e2ec:	e0bffe17 	ldw	r2,-8(fp)
 800e2f0:	1000070e 	bge	r2,zero,800e310 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800e2f4:	800e2200 	call	800e220 <alt_get_errno>
 800e2f8:	1007883a 	mov	r3,r2
 800e2fc:	e0bffe17 	ldw	r2,-8(fp)
 800e300:	0085c83a 	sub	r2,zero,r2
 800e304:	18800015 	stw	r2,0(r3)
      return -1;
 800e308:	00bfffc4 	movi	r2,-1
 800e30c:	00000706 	br	800e32c <close+0xbc>
    }
    return 0;
 800e310:	0005883a 	mov	r2,zero
 800e314:	00000506 	br	800e32c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e318:	800e2200 	call	800e220 <alt_get_errno>
 800e31c:	1007883a 	mov	r3,r2
 800e320:	00801444 	movi	r2,81
 800e324:	18800015 	stw	r2,0(r3)
    return -1;
 800e328:	00bfffc4 	movi	r2,-1
  }
}
 800e32c:	e037883a 	mov	sp,fp
 800e330:	dfc00117 	ldw	ra,4(sp)
 800e334:	df000017 	ldw	fp,0(sp)
 800e338:	dec00204 	addi	sp,sp,8
 800e33c:	f800283a 	ret

0800e340 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800e340:	defffc04 	addi	sp,sp,-16
 800e344:	df000315 	stw	fp,12(sp)
 800e348:	df000304 	addi	fp,sp,12
 800e34c:	e13ffd15 	stw	r4,-12(fp)
 800e350:	e17ffe15 	stw	r5,-8(fp)
 800e354:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800e358:	e0bfff17 	ldw	r2,-4(fp)
}
 800e35c:	e037883a 	mov	sp,fp
 800e360:	df000017 	ldw	fp,0(sp)
 800e364:	dec00104 	addi	sp,sp,4
 800e368:	f800283a 	ret

0800e36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e36c:	defffe04 	addi	sp,sp,-8
 800e370:	dfc00115 	stw	ra,4(sp)
 800e374:	df000015 	stw	fp,0(sp)
 800e378:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e37c:	008200b4 	movhi	r2,2050
 800e380:	10b5a904 	addi	r2,r2,-10588
 800e384:	10800017 	ldw	r2,0(r2)
 800e388:	10000526 	beq	r2,zero,800e3a0 <alt_get_errno+0x34>
 800e38c:	008200b4 	movhi	r2,2050
 800e390:	10b5a904 	addi	r2,r2,-10588
 800e394:	10800017 	ldw	r2,0(r2)
 800e398:	103ee83a 	callr	r2
 800e39c:	00000206 	br	800e3a8 <alt_get_errno+0x3c>
 800e3a0:	008200b4 	movhi	r2,2050
 800e3a4:	10bc7f04 	addi	r2,r2,-3588
}
 800e3a8:	e037883a 	mov	sp,fp
 800e3ac:	dfc00117 	ldw	ra,4(sp)
 800e3b0:	df000017 	ldw	fp,0(sp)
 800e3b4:	dec00204 	addi	sp,sp,8
 800e3b8:	f800283a 	ret

0800e3bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800e3bc:	defffb04 	addi	sp,sp,-20
 800e3c0:	dfc00415 	stw	ra,16(sp)
 800e3c4:	df000315 	stw	fp,12(sp)
 800e3c8:	df000304 	addi	fp,sp,12
 800e3cc:	e13ffe15 	stw	r4,-8(fp)
 800e3d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e3d4:	e0bffe17 	ldw	r2,-8(fp)
 800e3d8:	10000616 	blt	r2,zero,800e3f4 <fstat+0x38>
 800e3dc:	e0bffe17 	ldw	r2,-8(fp)
 800e3e0:	10c00324 	muli	r3,r2,12
 800e3e4:	008200b4 	movhi	r2,2050
 800e3e8:	10b11a04 	addi	r2,r2,-15256
 800e3ec:	1885883a 	add	r2,r3,r2
 800e3f0:	00000106 	br	800e3f8 <fstat+0x3c>
 800e3f4:	0005883a 	mov	r2,zero
 800e3f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800e3fc:	e0bffd17 	ldw	r2,-12(fp)
 800e400:	10001026 	beq	r2,zero,800e444 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800e404:	e0bffd17 	ldw	r2,-12(fp)
 800e408:	10800017 	ldw	r2,0(r2)
 800e40c:	10800817 	ldw	r2,32(r2)
 800e410:	10000726 	beq	r2,zero,800e430 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800e414:	e0bffd17 	ldw	r2,-12(fp)
 800e418:	10800017 	ldw	r2,0(r2)
 800e41c:	10800817 	ldw	r2,32(r2)
 800e420:	e13ffd17 	ldw	r4,-12(fp)
 800e424:	e17fff17 	ldw	r5,-4(fp)
 800e428:	103ee83a 	callr	r2
 800e42c:	00000a06 	br	800e458 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800e430:	e0bfff17 	ldw	r2,-4(fp)
 800e434:	00c80004 	movi	r3,8192
 800e438:	10c00115 	stw	r3,4(r2)
      return 0;
 800e43c:	0005883a 	mov	r2,zero
 800e440:	00000506 	br	800e458 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e444:	800e36c0 	call	800e36c <alt_get_errno>
 800e448:	1007883a 	mov	r3,r2
 800e44c:	00801444 	movi	r2,81
 800e450:	18800015 	stw	r2,0(r3)
    return -1;
 800e454:	00bfffc4 	movi	r2,-1
  }
}
 800e458:	e037883a 	mov	sp,fp
 800e45c:	dfc00117 	ldw	ra,4(sp)
 800e460:	df000017 	ldw	fp,0(sp)
 800e464:	dec00204 	addi	sp,sp,8
 800e468:	f800283a 	ret

0800e46c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e46c:	defffe04 	addi	sp,sp,-8
 800e470:	dfc00115 	stw	ra,4(sp)
 800e474:	df000015 	stw	fp,0(sp)
 800e478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e47c:	008200b4 	movhi	r2,2050
 800e480:	10b5a904 	addi	r2,r2,-10588
 800e484:	10800017 	ldw	r2,0(r2)
 800e488:	10000526 	beq	r2,zero,800e4a0 <alt_get_errno+0x34>
 800e48c:	008200b4 	movhi	r2,2050
 800e490:	10b5a904 	addi	r2,r2,-10588
 800e494:	10800017 	ldw	r2,0(r2)
 800e498:	103ee83a 	callr	r2
 800e49c:	00000206 	br	800e4a8 <alt_get_errno+0x3c>
 800e4a0:	008200b4 	movhi	r2,2050
 800e4a4:	10bc7f04 	addi	r2,r2,-3588
}
 800e4a8:	e037883a 	mov	sp,fp
 800e4ac:	dfc00117 	ldw	ra,4(sp)
 800e4b0:	df000017 	ldw	fp,0(sp)
 800e4b4:	dec00204 	addi	sp,sp,8
 800e4b8:	f800283a 	ret

0800e4bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800e4bc:	deffed04 	addi	sp,sp,-76
 800e4c0:	dfc01215 	stw	ra,72(sp)
 800e4c4:	df001115 	stw	fp,68(sp)
 800e4c8:	df001104 	addi	fp,sp,68
 800e4cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e4d0:	e0bfff17 	ldw	r2,-4(fp)
 800e4d4:	10000616 	blt	r2,zero,800e4f0 <isatty+0x34>
 800e4d8:	e0bfff17 	ldw	r2,-4(fp)
 800e4dc:	10c00324 	muli	r3,r2,12
 800e4e0:	008200b4 	movhi	r2,2050
 800e4e4:	10b11a04 	addi	r2,r2,-15256
 800e4e8:	1885883a 	add	r2,r3,r2
 800e4ec:	00000106 	br	800e4f4 <isatty+0x38>
 800e4f0:	0005883a 	mov	r2,zero
 800e4f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800e4f8:	e0bfef17 	ldw	r2,-68(fp)
 800e4fc:	10000e26 	beq	r2,zero,800e538 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800e500:	e0bfef17 	ldw	r2,-68(fp)
 800e504:	10800017 	ldw	r2,0(r2)
 800e508:	10800817 	ldw	r2,32(r2)
 800e50c:	1000021e 	bne	r2,zero,800e518 <isatty+0x5c>
    {
      return 1;
 800e510:	00800044 	movi	r2,1
 800e514:	00000d06 	br	800e54c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800e518:	e0bff004 	addi	r2,fp,-64
 800e51c:	e13fff17 	ldw	r4,-4(fp)
 800e520:	100b883a 	mov	r5,r2
 800e524:	800e3bc0 	call	800e3bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800e528:	e0bff117 	ldw	r2,-60(fp)
 800e52c:	10880020 	cmpeqi	r2,r2,8192
 800e530:	10803fcc 	andi	r2,r2,255
 800e534:	00000506 	br	800e54c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e538:	800e46c0 	call	800e46c <alt_get_errno>
 800e53c:	1007883a 	mov	r3,r2
 800e540:	00801444 	movi	r2,81
 800e544:	18800015 	stw	r2,0(r3)
    return 0;
 800e548:	0005883a 	mov	r2,zero
  }
}
 800e54c:	e037883a 	mov	sp,fp
 800e550:	dfc00117 	ldw	ra,4(sp)
 800e554:	df000017 	ldw	fp,0(sp)
 800e558:	dec00204 	addi	sp,sp,8
 800e55c:	f800283a 	ret

0800e560 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800e560:	defffc04 	addi	sp,sp,-16
 800e564:	df000315 	stw	fp,12(sp)
 800e568:	df000304 	addi	fp,sp,12
 800e56c:	e13ffd15 	stw	r4,-12(fp)
 800e570:	e17ffe15 	stw	r5,-8(fp)
 800e574:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800e578:	e0fffe17 	ldw	r3,-8(fp)
 800e57c:	e0bffd17 	ldw	r2,-12(fp)
 800e580:	18800c26 	beq	r3,r2,800e5b4 <alt_load_section+0x54>
  {
    while( to != end )
 800e584:	00000806 	br	800e5a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800e588:	e0bffe17 	ldw	r2,-8(fp)
 800e58c:	10c00104 	addi	r3,r2,4
 800e590:	e0fffe15 	stw	r3,-8(fp)
 800e594:	e0fffd17 	ldw	r3,-12(fp)
 800e598:	19000104 	addi	r4,r3,4
 800e59c:	e13ffd15 	stw	r4,-12(fp)
 800e5a0:	18c00017 	ldw	r3,0(r3)
 800e5a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800e5a8:	e0fffe17 	ldw	r3,-8(fp)
 800e5ac:	e0bfff17 	ldw	r2,-4(fp)
 800e5b0:	18bff51e 	bne	r3,r2,800e588 <__alt_data_end+0xfc00e588>
    {
      *to++ = *from++;
    }
  }
}
 800e5b4:	e037883a 	mov	sp,fp
 800e5b8:	df000017 	ldw	fp,0(sp)
 800e5bc:	dec00104 	addi	sp,sp,4
 800e5c0:	f800283a 	ret

0800e5c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800e5c4:	defffe04 	addi	sp,sp,-8
 800e5c8:	dfc00115 	stw	ra,4(sp)
 800e5cc:	df000015 	stw	fp,0(sp)
 800e5d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800e5d4:	010200b4 	movhi	r4,2050
 800e5d8:	2135ae04 	addi	r4,r4,-10568
 800e5dc:	014200b4 	movhi	r5,2050
 800e5e0:	296ee704 	addi	r5,r5,-17508
 800e5e4:	018200b4 	movhi	r6,2050
 800e5e8:	31b5ae04 	addi	r6,r6,-10568
 800e5ec:	800e5600 	call	800e560 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800e5f0:	01020034 	movhi	r4,2048
 800e5f4:	21000804 	addi	r4,r4,32
 800e5f8:	01420034 	movhi	r5,2048
 800e5fc:	29400804 	addi	r5,r5,32
 800e600:	01820034 	movhi	r6,2048
 800e604:	31806f04 	addi	r6,r6,444
 800e608:	800e5600 	call	800e560 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800e60c:	01020074 	movhi	r4,2049
 800e610:	2103ae04 	addi	r4,r4,3768
 800e614:	01420074 	movhi	r5,2049
 800e618:	2943ae04 	addi	r5,r5,3768
 800e61c:	018200b4 	movhi	r6,2050
 800e620:	31aee704 	addi	r6,r6,-17508
 800e624:	800e5600 	call	800e560 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800e628:	800fe000 	call	800fe00 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800e62c:	80100580 	call	8010058 <alt_icache_flush_all>
}
 800e630:	e037883a 	mov	sp,fp
 800e634:	dfc00117 	ldw	ra,4(sp)
 800e638:	df000017 	ldw	fp,0(sp)
 800e63c:	dec00204 	addi	sp,sp,8
 800e640:	f800283a 	ret

0800e644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e644:	defffe04 	addi	sp,sp,-8
 800e648:	dfc00115 	stw	ra,4(sp)
 800e64c:	df000015 	stw	fp,0(sp)
 800e650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e654:	008200b4 	movhi	r2,2050
 800e658:	10b5a904 	addi	r2,r2,-10588
 800e65c:	10800017 	ldw	r2,0(r2)
 800e660:	10000526 	beq	r2,zero,800e678 <alt_get_errno+0x34>
 800e664:	008200b4 	movhi	r2,2050
 800e668:	10b5a904 	addi	r2,r2,-10588
 800e66c:	10800017 	ldw	r2,0(r2)
 800e670:	103ee83a 	callr	r2
 800e674:	00000206 	br	800e680 <alt_get_errno+0x3c>
 800e678:	008200b4 	movhi	r2,2050
 800e67c:	10bc7f04 	addi	r2,r2,-3588
}
 800e680:	e037883a 	mov	sp,fp
 800e684:	dfc00117 	ldw	ra,4(sp)
 800e688:	df000017 	ldw	fp,0(sp)
 800e68c:	dec00204 	addi	sp,sp,8
 800e690:	f800283a 	ret

0800e694 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800e694:	defff904 	addi	sp,sp,-28
 800e698:	dfc00615 	stw	ra,24(sp)
 800e69c:	df000515 	stw	fp,20(sp)
 800e6a0:	df000504 	addi	fp,sp,20
 800e6a4:	e13ffd15 	stw	r4,-12(fp)
 800e6a8:	e17ffe15 	stw	r5,-8(fp)
 800e6ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800e6b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e6b4:	e0bffd17 	ldw	r2,-12(fp)
 800e6b8:	10000616 	blt	r2,zero,800e6d4 <lseek+0x40>
 800e6bc:	e0bffd17 	ldw	r2,-12(fp)
 800e6c0:	10c00324 	muli	r3,r2,12
 800e6c4:	008200b4 	movhi	r2,2050
 800e6c8:	10b11a04 	addi	r2,r2,-15256
 800e6cc:	1885883a 	add	r2,r3,r2
 800e6d0:	00000106 	br	800e6d8 <lseek+0x44>
 800e6d4:	0005883a 	mov	r2,zero
 800e6d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800e6dc:	e0bffc17 	ldw	r2,-16(fp)
 800e6e0:	10001026 	beq	r2,zero,800e724 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800e6e4:	e0bffc17 	ldw	r2,-16(fp)
 800e6e8:	10800017 	ldw	r2,0(r2)
 800e6ec:	10800717 	ldw	r2,28(r2)
 800e6f0:	10000926 	beq	r2,zero,800e718 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800e6f4:	e0bffc17 	ldw	r2,-16(fp)
 800e6f8:	10800017 	ldw	r2,0(r2)
 800e6fc:	10800717 	ldw	r2,28(r2)
 800e700:	e13ffc17 	ldw	r4,-16(fp)
 800e704:	e17ffe17 	ldw	r5,-8(fp)
 800e708:	e1bfff17 	ldw	r6,-4(fp)
 800e70c:	103ee83a 	callr	r2
 800e710:	e0bffb15 	stw	r2,-20(fp)
 800e714:	00000506 	br	800e72c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800e718:	00bfde84 	movi	r2,-134
 800e71c:	e0bffb15 	stw	r2,-20(fp)
 800e720:	00000206 	br	800e72c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800e724:	00bfebc4 	movi	r2,-81
 800e728:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800e72c:	e0bffb17 	ldw	r2,-20(fp)
 800e730:	1000070e 	bge	r2,zero,800e750 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800e734:	800e6440 	call	800e644 <alt_get_errno>
 800e738:	1007883a 	mov	r3,r2
 800e73c:	e0bffb17 	ldw	r2,-20(fp)
 800e740:	0085c83a 	sub	r2,zero,r2
 800e744:	18800015 	stw	r2,0(r3)
    rc = -1;
 800e748:	00bfffc4 	movi	r2,-1
 800e74c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800e750:	e0bffb17 	ldw	r2,-20(fp)
}
 800e754:	e037883a 	mov	sp,fp
 800e758:	dfc00117 	ldw	ra,4(sp)
 800e75c:	df000017 	ldw	fp,0(sp)
 800e760:	dec00204 	addi	sp,sp,8
 800e764:	f800283a 	ret

0800e768 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800e768:	defffd04 	addi	sp,sp,-12
 800e76c:	dfc00215 	stw	ra,8(sp)
 800e770:	df000115 	stw	fp,4(sp)
 800e774:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800e778:	0009883a 	mov	r4,zero
 800e77c:	800ebfc0 	call	800ebfc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800e780:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800e784:	800ec300 	call	800ec30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800e788:	010200b4 	movhi	r4,2050
 800e78c:	212ed704 	addi	r4,r4,-17572
 800e790:	014200b4 	movhi	r5,2050
 800e794:	296ed704 	addi	r5,r5,-17572
 800e798:	018200b4 	movhi	r6,2050
 800e79c:	31aed704 	addi	r6,r6,-17572
 800e7a0:	80104180 	call	8010418 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800e7a4:	800ff100 	call	800ff10 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800e7a8:	01020074 	movhi	r4,2049
 800e7ac:	213fdb04 	addi	r4,r4,-148
 800e7b0:	8010b140 	call	8010b14 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800e7b4:	d126e317 	ldw	r4,-25716(gp)
 800e7b8:	d0e6e417 	ldw	r3,-25712(gp)
 800e7bc:	d0a6e517 	ldw	r2,-25708(gp)
 800e7c0:	180b883a 	mov	r5,r3
 800e7c4:	100d883a 	mov	r6,r2
 800e7c8:	8001c700 	call	8001c70 <main>
 800e7cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800e7d0:	01000044 	movi	r4,1
 800e7d4:	800e2700 	call	800e270 <close>
  exit (result);
 800e7d8:	e13fff17 	ldw	r4,-4(fp)
 800e7dc:	8010b280 	call	8010b28 <exit>

0800e7e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800e7e0:	defffe04 	addi	sp,sp,-8
 800e7e4:	df000115 	stw	fp,4(sp)
 800e7e8:	df000104 	addi	fp,sp,4
 800e7ec:	e13fff15 	stw	r4,-4(fp)
}
 800e7f0:	e037883a 	mov	sp,fp
 800e7f4:	df000017 	ldw	fp,0(sp)
 800e7f8:	dec00104 	addi	sp,sp,4
 800e7fc:	f800283a 	ret

0800e800 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800e800:	defffe04 	addi	sp,sp,-8
 800e804:	df000115 	stw	fp,4(sp)
 800e808:	df000104 	addi	fp,sp,4
 800e80c:	e13fff15 	stw	r4,-4(fp)
}
 800e810:	e037883a 	mov	sp,fp
 800e814:	df000017 	ldw	fp,0(sp)
 800e818:	dec00104 	addi	sp,sp,4
 800e81c:	f800283a 	ret

0800e820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e820:	defffe04 	addi	sp,sp,-8
 800e824:	dfc00115 	stw	ra,4(sp)
 800e828:	df000015 	stw	fp,0(sp)
 800e82c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e830:	008200b4 	movhi	r2,2050
 800e834:	10b5a904 	addi	r2,r2,-10588
 800e838:	10800017 	ldw	r2,0(r2)
 800e83c:	10000526 	beq	r2,zero,800e854 <alt_get_errno+0x34>
 800e840:	008200b4 	movhi	r2,2050
 800e844:	10b5a904 	addi	r2,r2,-10588
 800e848:	10800017 	ldw	r2,0(r2)
 800e84c:	103ee83a 	callr	r2
 800e850:	00000206 	br	800e85c <alt_get_errno+0x3c>
 800e854:	008200b4 	movhi	r2,2050
 800e858:	10bc7f04 	addi	r2,r2,-3588
}
 800e85c:	e037883a 	mov	sp,fp
 800e860:	dfc00117 	ldw	ra,4(sp)
 800e864:	df000017 	ldw	fp,0(sp)
 800e868:	dec00204 	addi	sp,sp,8
 800e86c:	f800283a 	ret

0800e870 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800e870:	defff904 	addi	sp,sp,-28
 800e874:	dfc00615 	stw	ra,24(sp)
 800e878:	df000515 	stw	fp,20(sp)
 800e87c:	df000504 	addi	fp,sp,20
 800e880:	e13ffd15 	stw	r4,-12(fp)
 800e884:	e17ffe15 	stw	r5,-8(fp)
 800e888:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e88c:	e0bffd17 	ldw	r2,-12(fp)
 800e890:	10000616 	blt	r2,zero,800e8ac <read+0x3c>
 800e894:	e0bffd17 	ldw	r2,-12(fp)
 800e898:	10c00324 	muli	r3,r2,12
 800e89c:	008200b4 	movhi	r2,2050
 800e8a0:	10b11a04 	addi	r2,r2,-15256
 800e8a4:	1885883a 	add	r2,r3,r2
 800e8a8:	00000106 	br	800e8b0 <read+0x40>
 800e8ac:	0005883a 	mov	r2,zero
 800e8b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800e8b4:	e0bffb17 	ldw	r2,-20(fp)
 800e8b8:	10002226 	beq	r2,zero,800e944 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800e8bc:	e0bffb17 	ldw	r2,-20(fp)
 800e8c0:	10800217 	ldw	r2,8(r2)
 800e8c4:	108000cc 	andi	r2,r2,3
 800e8c8:	10800060 	cmpeqi	r2,r2,1
 800e8cc:	1000181e 	bne	r2,zero,800e930 <read+0xc0>
        (fd->dev->read))
 800e8d0:	e0bffb17 	ldw	r2,-20(fp)
 800e8d4:	10800017 	ldw	r2,0(r2)
 800e8d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800e8dc:	10001426 	beq	r2,zero,800e930 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800e8e0:	e0bffb17 	ldw	r2,-20(fp)
 800e8e4:	10800017 	ldw	r2,0(r2)
 800e8e8:	10800517 	ldw	r2,20(r2)
 800e8ec:	e0ffff17 	ldw	r3,-4(fp)
 800e8f0:	e13ffb17 	ldw	r4,-20(fp)
 800e8f4:	e17ffe17 	ldw	r5,-8(fp)
 800e8f8:	180d883a 	mov	r6,r3
 800e8fc:	103ee83a 	callr	r2
 800e900:	e0bffc15 	stw	r2,-16(fp)
 800e904:	e0bffc17 	ldw	r2,-16(fp)
 800e908:	1000070e 	bge	r2,zero,800e928 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800e90c:	800e8200 	call	800e820 <alt_get_errno>
 800e910:	1007883a 	mov	r3,r2
 800e914:	e0bffc17 	ldw	r2,-16(fp)
 800e918:	0085c83a 	sub	r2,zero,r2
 800e91c:	18800015 	stw	r2,0(r3)
          return -1;
 800e920:	00bfffc4 	movi	r2,-1
 800e924:	00000c06 	br	800e958 <read+0xe8>
        }
        return rval;
 800e928:	e0bffc17 	ldw	r2,-16(fp)
 800e92c:	00000a06 	br	800e958 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800e930:	800e8200 	call	800e820 <alt_get_errno>
 800e934:	1007883a 	mov	r3,r2
 800e938:	00800344 	movi	r2,13
 800e93c:	18800015 	stw	r2,0(r3)
 800e940:	00000406 	br	800e954 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800e944:	800e8200 	call	800e820 <alt_get_errno>
 800e948:	1007883a 	mov	r3,r2
 800e94c:	00801444 	movi	r2,81
 800e950:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800e954:	00bfffc4 	movi	r2,-1
}
 800e958:	e037883a 	mov	sp,fp
 800e95c:	dfc00117 	ldw	ra,4(sp)
 800e960:	df000017 	ldw	fp,0(sp)
 800e964:	dec00204 	addi	sp,sp,8
 800e968:	f800283a 	ret

0800e96c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800e96c:	defffe04 	addi	sp,sp,-8
 800e970:	df000115 	stw	fp,4(sp)
 800e974:	df000104 	addi	fp,sp,4
 800e978:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800e97c:	e0bfff17 	ldw	r2,-4(fp)
 800e980:	108000d0 	cmplti	r2,r2,3
 800e984:	10000d1e 	bne	r2,zero,800e9bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800e988:	008200b4 	movhi	r2,2050
 800e98c:	10b11a04 	addi	r2,r2,-15256
 800e990:	e0ffff17 	ldw	r3,-4(fp)
 800e994:	18c00324 	muli	r3,r3,12
 800e998:	10c5883a 	add	r2,r2,r3
 800e99c:	10800204 	addi	r2,r2,8
 800e9a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800e9a4:	008200b4 	movhi	r2,2050
 800e9a8:	10b11a04 	addi	r2,r2,-15256
 800e9ac:	e0ffff17 	ldw	r3,-4(fp)
 800e9b0:	18c00324 	muli	r3,r3,12
 800e9b4:	10c5883a 	add	r2,r2,r3
 800e9b8:	10000015 	stw	zero,0(r2)
  }
}
 800e9bc:	e037883a 	mov	sp,fp
 800e9c0:	df000017 	ldw	fp,0(sp)
 800e9c4:	dec00104 	addi	sp,sp,4
 800e9c8:	f800283a 	ret

0800e9cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800e9cc:	defff904 	addi	sp,sp,-28
 800e9d0:	df000615 	stw	fp,24(sp)
 800e9d4:	df000604 	addi	fp,sp,24
 800e9d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e9dc:	0005303a 	rdctl	r2,status
 800e9e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e9e4:	e0fffc17 	ldw	r3,-16(fp)
 800e9e8:	00bfff84 	movi	r2,-2
 800e9ec:	1884703a 	and	r2,r3,r2
 800e9f0:	1001703a 	wrctl	status,r2
  
  return context;
 800e9f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800e9f8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800e9fc:	d0a00d17 	ldw	r2,-32716(gp)
 800ea00:	10c000c4 	addi	r3,r2,3
 800ea04:	00bfff04 	movi	r2,-4
 800ea08:	1884703a 	and	r2,r3,r2
 800ea0c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ea10:	d0e00d17 	ldw	r3,-32716(gp)
 800ea14:	e0bfff17 	ldw	r2,-4(fp)
 800ea18:	1887883a 	add	r3,r3,r2
 800ea1c:	00830034 	movhi	r2,3072
 800ea20:	10800004 	addi	r2,r2,0
 800ea24:	10c0062e 	bgeu	r2,r3,800ea40 <sbrk+0x74>
 800ea28:	e0bffa17 	ldw	r2,-24(fp)
 800ea2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ea30:	e0bffd17 	ldw	r2,-12(fp)
 800ea34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ea38:	00bfffc4 	movi	r2,-1
 800ea3c:	00000b06 	br	800ea6c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800ea40:	d0a00d17 	ldw	r2,-32716(gp)
 800ea44:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800ea48:	d0e00d17 	ldw	r3,-32716(gp)
 800ea4c:	e0bfff17 	ldw	r2,-4(fp)
 800ea50:	1885883a 	add	r2,r3,r2
 800ea54:	d0a00d15 	stw	r2,-32716(gp)
 800ea58:	e0bffa17 	ldw	r2,-24(fp)
 800ea5c:	e0bffe15 	stw	r2,-8(fp)
 800ea60:	e0bffe17 	ldw	r2,-8(fp)
 800ea64:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800ea68:	e0bffb17 	ldw	r2,-20(fp)
} 
 800ea6c:	e037883a 	mov	sp,fp
 800ea70:	df000017 	ldw	fp,0(sp)
 800ea74:	dec00104 	addi	sp,sp,4
 800ea78:	f800283a 	ret

0800ea7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ea7c:	defffe04 	addi	sp,sp,-8
 800ea80:	dfc00115 	stw	ra,4(sp)
 800ea84:	df000015 	stw	fp,0(sp)
 800ea88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ea8c:	008200b4 	movhi	r2,2050
 800ea90:	10b5a904 	addi	r2,r2,-10588
 800ea94:	10800017 	ldw	r2,0(r2)
 800ea98:	10000526 	beq	r2,zero,800eab0 <alt_get_errno+0x34>
 800ea9c:	008200b4 	movhi	r2,2050
 800eaa0:	10b5a904 	addi	r2,r2,-10588
 800eaa4:	10800017 	ldw	r2,0(r2)
 800eaa8:	103ee83a 	callr	r2
 800eaac:	00000206 	br	800eab8 <alt_get_errno+0x3c>
 800eab0:	008200b4 	movhi	r2,2050
 800eab4:	10bc7f04 	addi	r2,r2,-3588
}
 800eab8:	e037883a 	mov	sp,fp
 800eabc:	dfc00117 	ldw	ra,4(sp)
 800eac0:	df000017 	ldw	fp,0(sp)
 800eac4:	dec00204 	addi	sp,sp,8
 800eac8:	f800283a 	ret

0800eacc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800eacc:	defff904 	addi	sp,sp,-28
 800ead0:	dfc00615 	stw	ra,24(sp)
 800ead4:	df000515 	stw	fp,20(sp)
 800ead8:	df000504 	addi	fp,sp,20
 800eadc:	e13ffd15 	stw	r4,-12(fp)
 800eae0:	e17ffe15 	stw	r5,-8(fp)
 800eae4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eae8:	e0bffd17 	ldw	r2,-12(fp)
 800eaec:	10000616 	blt	r2,zero,800eb08 <write+0x3c>
 800eaf0:	e0bffd17 	ldw	r2,-12(fp)
 800eaf4:	10c00324 	muli	r3,r2,12
 800eaf8:	008200b4 	movhi	r2,2050
 800eafc:	10b11a04 	addi	r2,r2,-15256
 800eb00:	1885883a 	add	r2,r3,r2
 800eb04:	00000106 	br	800eb0c <write+0x40>
 800eb08:	0005883a 	mov	r2,zero
 800eb0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800eb10:	e0bffb17 	ldw	r2,-20(fp)
 800eb14:	10002126 	beq	r2,zero,800eb9c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800eb18:	e0bffb17 	ldw	r2,-20(fp)
 800eb1c:	10800217 	ldw	r2,8(r2)
 800eb20:	108000cc 	andi	r2,r2,3
 800eb24:	10001826 	beq	r2,zero,800eb88 <write+0xbc>
 800eb28:	e0bffb17 	ldw	r2,-20(fp)
 800eb2c:	10800017 	ldw	r2,0(r2)
 800eb30:	10800617 	ldw	r2,24(r2)
 800eb34:	10001426 	beq	r2,zero,800eb88 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800eb38:	e0bffb17 	ldw	r2,-20(fp)
 800eb3c:	10800017 	ldw	r2,0(r2)
 800eb40:	10800617 	ldw	r2,24(r2)
 800eb44:	e0ffff17 	ldw	r3,-4(fp)
 800eb48:	e13ffb17 	ldw	r4,-20(fp)
 800eb4c:	e17ffe17 	ldw	r5,-8(fp)
 800eb50:	180d883a 	mov	r6,r3
 800eb54:	103ee83a 	callr	r2
 800eb58:	e0bffc15 	stw	r2,-16(fp)
 800eb5c:	e0bffc17 	ldw	r2,-16(fp)
 800eb60:	1000070e 	bge	r2,zero,800eb80 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800eb64:	800ea7c0 	call	800ea7c <alt_get_errno>
 800eb68:	1007883a 	mov	r3,r2
 800eb6c:	e0bffc17 	ldw	r2,-16(fp)
 800eb70:	0085c83a 	sub	r2,zero,r2
 800eb74:	18800015 	stw	r2,0(r3)
        return -1;
 800eb78:	00bfffc4 	movi	r2,-1
 800eb7c:	00000c06 	br	800ebb0 <write+0xe4>
      }
      return rval;
 800eb80:	e0bffc17 	ldw	r2,-16(fp)
 800eb84:	00000a06 	br	800ebb0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800eb88:	800ea7c0 	call	800ea7c <alt_get_errno>
 800eb8c:	1007883a 	mov	r3,r2
 800eb90:	00800344 	movi	r2,13
 800eb94:	18800015 	stw	r2,0(r3)
 800eb98:	00000406 	br	800ebac <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800eb9c:	800ea7c0 	call	800ea7c <alt_get_errno>
 800eba0:	1007883a 	mov	r3,r2
 800eba4:	00801444 	movi	r2,81
 800eba8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800ebac:	00bfffc4 	movi	r2,-1
}
 800ebb0:	e037883a 	mov	sp,fp
 800ebb4:	dfc00117 	ldw	ra,4(sp)
 800ebb8:	df000017 	ldw	fp,0(sp)
 800ebbc:	dec00204 	addi	sp,sp,8
 800ebc0:	f800283a 	ret

0800ebc4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800ebc4:	defffd04 	addi	sp,sp,-12
 800ebc8:	dfc00215 	stw	ra,8(sp)
 800ebcc:	df000115 	stw	fp,4(sp)
 800ebd0:	df000104 	addi	fp,sp,4
 800ebd4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800ebd8:	e13fff17 	ldw	r4,-4(fp)
 800ebdc:	014200b4 	movhi	r5,2050
 800ebe0:	2975a604 	addi	r5,r5,-10600
 800ebe4:	800fe6c0 	call	800fe6c <alt_dev_llist_insert>
}
 800ebe8:	e037883a 	mov	sp,fp
 800ebec:	dfc00117 	ldw	ra,4(sp)
 800ebf0:	df000017 	ldw	fp,0(sp)
 800ebf4:	dec00204 	addi	sp,sp,8
 800ebf8:	f800283a 	ret

0800ebfc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800ebfc:	defffd04 	addi	sp,sp,-12
 800ec00:	dfc00215 	stw	ra,8(sp)
 800ec04:	df000115 	stw	fp,4(sp)
 800ec08:	df000104 	addi	fp,sp,4
 800ec0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800ec10:	80108a00 	call	80108a0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800ec14:	00800044 	movi	r2,1
 800ec18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800ec1c:	e037883a 	mov	sp,fp
 800ec20:	dfc00117 	ldw	ra,4(sp)
 800ec24:	df000017 	ldw	fp,0(sp)
 800ec28:	dec00204 	addi	sp,sp,8
 800ec2c:	f800283a 	ret

0800ec30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800ec30:	defffe04 	addi	sp,sp,-8
 800ec34:	dfc00115 	stw	ra,4(sp)
 800ec38:	df000015 	stw	fp,0(sp)
 800ec3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800ec40:	01082004 	movi	r4,8320
 800ec44:	000b883a 	mov	r5,zero
 800ec48:	01800104 	movi	r6,4
 800ec4c:	01c0fa04 	movi	r7,1000
 800ec50:	800f7600 	call	800f760 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800ec54:	010200b4 	movhi	r4,2050
 800ec58:	21318404 	addi	r4,r4,-14832
 800ec5c:	000b883a 	mov	r5,zero
 800ec60:	01800144 	movi	r6,5
 800ec64:	800ee040 	call	800ee04 <altera_avalon_jtag_uart_init>
 800ec68:	010200b4 	movhi	r4,2050
 800ec6c:	21317a04 	addi	r4,r4,-14872
 800ec70:	800ebc40 	call	800ebc4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800ec74:	010200b4 	movhi	r4,2050
 800ec78:	21359204 	addi	r4,r4,-10680
 800ec7c:	800f8980 	call	800f898 <alt_up_character_lcd_init>
 800ec80:	010200b4 	movhi	r4,2050
 800ec84:	21359204 	addi	r4,r4,-10680
 800ec88:	800ebc40 	call	800ebc4 <alt_dev_reg>
}
 800ec8c:	e037883a 	mov	sp,fp
 800ec90:	dfc00117 	ldw	ra,4(sp)
 800ec94:	df000017 	ldw	fp,0(sp)
 800ec98:	dec00204 	addi	sp,sp,8
 800ec9c:	f800283a 	ret

0800eca0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800eca0:	defffa04 	addi	sp,sp,-24
 800eca4:	dfc00515 	stw	ra,20(sp)
 800eca8:	df000415 	stw	fp,16(sp)
 800ecac:	df000404 	addi	fp,sp,16
 800ecb0:	e13ffd15 	stw	r4,-12(fp)
 800ecb4:	e17ffe15 	stw	r5,-8(fp)
 800ecb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ecbc:	e0bffd17 	ldw	r2,-12(fp)
 800ecc0:	10800017 	ldw	r2,0(r2)
 800ecc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800ecc8:	e0bffc17 	ldw	r2,-16(fp)
 800eccc:	10c00a04 	addi	r3,r2,40
 800ecd0:	e0bffd17 	ldw	r2,-12(fp)
 800ecd4:	10800217 	ldw	r2,8(r2)
 800ecd8:	1809883a 	mov	r4,r3
 800ecdc:	e17ffe17 	ldw	r5,-8(fp)
 800ece0:	e1bfff17 	ldw	r6,-4(fp)
 800ece4:	100f883a 	mov	r7,r2
 800ece8:	800f2c80 	call	800f2c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800ecec:	e037883a 	mov	sp,fp
 800ecf0:	dfc00117 	ldw	ra,4(sp)
 800ecf4:	df000017 	ldw	fp,0(sp)
 800ecf8:	dec00204 	addi	sp,sp,8
 800ecfc:	f800283a 	ret

0800ed00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800ed00:	defffa04 	addi	sp,sp,-24
 800ed04:	dfc00515 	stw	ra,20(sp)
 800ed08:	df000415 	stw	fp,16(sp)
 800ed0c:	df000404 	addi	fp,sp,16
 800ed10:	e13ffd15 	stw	r4,-12(fp)
 800ed14:	e17ffe15 	stw	r5,-8(fp)
 800ed18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ed1c:	e0bffd17 	ldw	r2,-12(fp)
 800ed20:	10800017 	ldw	r2,0(r2)
 800ed24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800ed28:	e0bffc17 	ldw	r2,-16(fp)
 800ed2c:	10c00a04 	addi	r3,r2,40
 800ed30:	e0bffd17 	ldw	r2,-12(fp)
 800ed34:	10800217 	ldw	r2,8(r2)
 800ed38:	1809883a 	mov	r4,r3
 800ed3c:	e17ffe17 	ldw	r5,-8(fp)
 800ed40:	e1bfff17 	ldw	r6,-4(fp)
 800ed44:	100f883a 	mov	r7,r2
 800ed48:	800f4d40 	call	800f4d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800ed4c:	e037883a 	mov	sp,fp
 800ed50:	dfc00117 	ldw	ra,4(sp)
 800ed54:	df000017 	ldw	fp,0(sp)
 800ed58:	dec00204 	addi	sp,sp,8
 800ed5c:	f800283a 	ret

0800ed60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800ed60:	defffc04 	addi	sp,sp,-16
 800ed64:	dfc00315 	stw	ra,12(sp)
 800ed68:	df000215 	stw	fp,8(sp)
 800ed6c:	df000204 	addi	fp,sp,8
 800ed70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ed74:	e0bfff17 	ldw	r2,-4(fp)
 800ed78:	10800017 	ldw	r2,0(r2)
 800ed7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800ed80:	e0bffe17 	ldw	r2,-8(fp)
 800ed84:	10c00a04 	addi	r3,r2,40
 800ed88:	e0bfff17 	ldw	r2,-4(fp)
 800ed8c:	10800217 	ldw	r2,8(r2)
 800ed90:	1809883a 	mov	r4,r3
 800ed94:	100b883a 	mov	r5,r2
 800ed98:	800f1740 	call	800f174 <altera_avalon_jtag_uart_close>
}
 800ed9c:	e037883a 	mov	sp,fp
 800eda0:	dfc00117 	ldw	ra,4(sp)
 800eda4:	df000017 	ldw	fp,0(sp)
 800eda8:	dec00204 	addi	sp,sp,8
 800edac:	f800283a 	ret

0800edb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800edb0:	defffa04 	addi	sp,sp,-24
 800edb4:	dfc00515 	stw	ra,20(sp)
 800edb8:	df000415 	stw	fp,16(sp)
 800edbc:	df000404 	addi	fp,sp,16
 800edc0:	e13ffd15 	stw	r4,-12(fp)
 800edc4:	e17ffe15 	stw	r5,-8(fp)
 800edc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800edcc:	e0bffd17 	ldw	r2,-12(fp)
 800edd0:	10800017 	ldw	r2,0(r2)
 800edd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800edd8:	e0bffc17 	ldw	r2,-16(fp)
 800eddc:	10800a04 	addi	r2,r2,40
 800ede0:	1009883a 	mov	r4,r2
 800ede4:	e17ffe17 	ldw	r5,-8(fp)
 800ede8:	e1bfff17 	ldw	r6,-4(fp)
 800edec:	800f1dc0 	call	800f1dc <altera_avalon_jtag_uart_ioctl>
}
 800edf0:	e037883a 	mov	sp,fp
 800edf4:	dfc00117 	ldw	ra,4(sp)
 800edf8:	df000017 	ldw	fp,0(sp)
 800edfc:	dec00204 	addi	sp,sp,8
 800ee00:	f800283a 	ret

0800ee04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800ee04:	defffa04 	addi	sp,sp,-24
 800ee08:	dfc00515 	stw	ra,20(sp)
 800ee0c:	df000415 	stw	fp,16(sp)
 800ee10:	df000404 	addi	fp,sp,16
 800ee14:	e13ffd15 	stw	r4,-12(fp)
 800ee18:	e17ffe15 	stw	r5,-8(fp)
 800ee1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ee20:	e0bffd17 	ldw	r2,-12(fp)
 800ee24:	00c00044 	movi	r3,1
 800ee28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800ee2c:	e0bffd17 	ldw	r2,-12(fp)
 800ee30:	10800017 	ldw	r2,0(r2)
 800ee34:	10800104 	addi	r2,r2,4
 800ee38:	1007883a 	mov	r3,r2
 800ee3c:	e0bffd17 	ldw	r2,-12(fp)
 800ee40:	10800817 	ldw	r2,32(r2)
 800ee44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800ee48:	e0fffe17 	ldw	r3,-8(fp)
 800ee4c:	e0bfff17 	ldw	r2,-4(fp)
 800ee50:	d8000015 	stw	zero,0(sp)
 800ee54:	1809883a 	mov	r4,r3
 800ee58:	100b883a 	mov	r5,r2
 800ee5c:	01820074 	movhi	r6,2049
 800ee60:	31bbb204 	addi	r6,r6,-4408
 800ee64:	e1fffd17 	ldw	r7,-12(fp)
 800ee68:	80100880 	call	8010088 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800ee6c:	e0bffd17 	ldw	r2,-12(fp)
 800ee70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800ee74:	e0bffd17 	ldw	r2,-12(fp)
 800ee78:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ee7c:	008200b4 	movhi	r2,2050
 800ee80:	10bc8404 	addi	r2,r2,-3568
 800ee84:	10800017 	ldw	r2,0(r2)
 800ee88:	1809883a 	mov	r4,r3
 800ee8c:	100b883a 	mov	r5,r2
 800ee90:	01820074 	movhi	r6,2049
 800ee94:	31bc3304 	addi	r6,r6,-3892
 800ee98:	e1fffd17 	ldw	r7,-12(fp)
 800ee9c:	800fcc00 	call	800fcc0 <alt_alarm_start>
 800eea0:	1000040e 	bge	r2,zero,800eeb4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800eea4:	e0fffd17 	ldw	r3,-12(fp)
 800eea8:	00a00034 	movhi	r2,32768
 800eeac:	10bfffc4 	addi	r2,r2,-1
 800eeb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800eeb4:	e037883a 	mov	sp,fp
 800eeb8:	dfc00117 	ldw	ra,4(sp)
 800eebc:	df000017 	ldw	fp,0(sp)
 800eec0:	dec00204 	addi	sp,sp,8
 800eec4:	f800283a 	ret

0800eec8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800eec8:	defff804 	addi	sp,sp,-32
 800eecc:	df000715 	stw	fp,28(sp)
 800eed0:	df000704 	addi	fp,sp,28
 800eed4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800eed8:	e0bfff17 	ldw	r2,-4(fp)
 800eedc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800eee0:	e0bffb17 	ldw	r2,-20(fp)
 800eee4:	10800017 	ldw	r2,0(r2)
 800eee8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800eeec:	e0bffc17 	ldw	r2,-16(fp)
 800eef0:	10800104 	addi	r2,r2,4
 800eef4:	10800037 	ldwio	r2,0(r2)
 800eef8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800eefc:	e0bffd17 	ldw	r2,-12(fp)
 800ef00:	1080c00c 	andi	r2,r2,768
 800ef04:	1000011e 	bne	r2,zero,800ef0c <altera_avalon_jtag_uart_irq+0x44>
      break;
 800ef08:	00006c06 	br	800f0bc <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800ef0c:	e0bffd17 	ldw	r2,-12(fp)
 800ef10:	1080400c 	andi	r2,r2,256
 800ef14:	10003426 	beq	r2,zero,800efe8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800ef18:	00800074 	movhi	r2,1
 800ef1c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ef20:	e0bffb17 	ldw	r2,-20(fp)
 800ef24:	10800a17 	ldw	r2,40(r2)
 800ef28:	10800044 	addi	r2,r2,1
 800ef2c:	1081ffcc 	andi	r2,r2,2047
 800ef30:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800ef34:	e0bffb17 	ldw	r2,-20(fp)
 800ef38:	10c00b17 	ldw	r3,44(r2)
 800ef3c:	e0bffe17 	ldw	r2,-8(fp)
 800ef40:	1880011e 	bne	r3,r2,800ef48 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800ef44:	00001606 	br	800efa0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800ef48:	e0bffc17 	ldw	r2,-16(fp)
 800ef4c:	10800037 	ldwio	r2,0(r2)
 800ef50:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800ef54:	e0bff917 	ldw	r2,-28(fp)
 800ef58:	10a0000c 	andi	r2,r2,32768
 800ef5c:	1000011e 	bne	r2,zero,800ef64 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800ef60:	00000f06 	br	800efa0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800ef64:	e0bffb17 	ldw	r2,-20(fp)
 800ef68:	10800a17 	ldw	r2,40(r2)
 800ef6c:	e0fff917 	ldw	r3,-28(fp)
 800ef70:	1809883a 	mov	r4,r3
 800ef74:	e0fffb17 	ldw	r3,-20(fp)
 800ef78:	1885883a 	add	r2,r3,r2
 800ef7c:	10800e04 	addi	r2,r2,56
 800ef80:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ef84:	e0bffb17 	ldw	r2,-20(fp)
 800ef88:	10800a17 	ldw	r2,40(r2)
 800ef8c:	10800044 	addi	r2,r2,1
 800ef90:	10c1ffcc 	andi	r3,r2,2047
 800ef94:	e0bffb17 	ldw	r2,-20(fp)
 800ef98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800ef9c:	003fe006 	br	800ef20 <__alt_data_end+0xfc00ef20>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800efa0:	e0bff917 	ldw	r2,-28(fp)
 800efa4:	10bfffec 	andhi	r2,r2,65535
 800efa8:	10000f26 	beq	r2,zero,800efe8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800efac:	e0bffb17 	ldw	r2,-20(fp)
 800efb0:	10c00817 	ldw	r3,32(r2)
 800efb4:	00bfff84 	movi	r2,-2
 800efb8:	1886703a 	and	r3,r3,r2
 800efbc:	e0bffb17 	ldw	r2,-20(fp)
 800efc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800efc4:	e0bffc17 	ldw	r2,-16(fp)
 800efc8:	10800104 	addi	r2,r2,4
 800efcc:	1007883a 	mov	r3,r2
 800efd0:	e0bffb17 	ldw	r2,-20(fp)
 800efd4:	10800817 	ldw	r2,32(r2)
 800efd8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800efdc:	e0bffc17 	ldw	r2,-16(fp)
 800efe0:	10800104 	addi	r2,r2,4
 800efe4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800efe8:	e0bffd17 	ldw	r2,-12(fp)
 800efec:	1080800c 	andi	r2,r2,512
 800eff0:	10003126 	beq	r2,zero,800f0b8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800eff4:	e0bffd17 	ldw	r2,-12(fp)
 800eff8:	1004d43a 	srli	r2,r2,16
 800effc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f000:	00001406 	br	800f054 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f004:	e0bffc17 	ldw	r2,-16(fp)
 800f008:	e0fffb17 	ldw	r3,-20(fp)
 800f00c:	18c00d17 	ldw	r3,52(r3)
 800f010:	e13ffb17 	ldw	r4,-20(fp)
 800f014:	20c7883a 	add	r3,r4,r3
 800f018:	18c20e04 	addi	r3,r3,2104
 800f01c:	18c00003 	ldbu	r3,0(r3)
 800f020:	18c03fcc 	andi	r3,r3,255
 800f024:	18c0201c 	xori	r3,r3,128
 800f028:	18ffe004 	addi	r3,r3,-128
 800f02c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f030:	e0bffb17 	ldw	r2,-20(fp)
 800f034:	10800d17 	ldw	r2,52(r2)
 800f038:	10800044 	addi	r2,r2,1
 800f03c:	10c1ffcc 	andi	r3,r2,2047
 800f040:	e0bffb17 	ldw	r2,-20(fp)
 800f044:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f048:	e0bffa17 	ldw	r2,-24(fp)
 800f04c:	10bfffc4 	addi	r2,r2,-1
 800f050:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f054:	e0bffa17 	ldw	r2,-24(fp)
 800f058:	10000526 	beq	r2,zero,800f070 <altera_avalon_jtag_uart_irq+0x1a8>
 800f05c:	e0bffb17 	ldw	r2,-20(fp)
 800f060:	10c00d17 	ldw	r3,52(r2)
 800f064:	e0bffb17 	ldw	r2,-20(fp)
 800f068:	10800c17 	ldw	r2,48(r2)
 800f06c:	18bfe51e 	bne	r3,r2,800f004 <__alt_data_end+0xfc00f004>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f070:	e0bffa17 	ldw	r2,-24(fp)
 800f074:	10001026 	beq	r2,zero,800f0b8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f078:	e0bffb17 	ldw	r2,-20(fp)
 800f07c:	10c00817 	ldw	r3,32(r2)
 800f080:	00bfff44 	movi	r2,-3
 800f084:	1886703a 	and	r3,r3,r2
 800f088:	e0bffb17 	ldw	r2,-20(fp)
 800f08c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f090:	e0bffb17 	ldw	r2,-20(fp)
 800f094:	10800017 	ldw	r2,0(r2)
 800f098:	10800104 	addi	r2,r2,4
 800f09c:	1007883a 	mov	r3,r2
 800f0a0:	e0bffb17 	ldw	r2,-20(fp)
 800f0a4:	10800817 	ldw	r2,32(r2)
 800f0a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f0ac:	e0bffc17 	ldw	r2,-16(fp)
 800f0b0:	10800104 	addi	r2,r2,4
 800f0b4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800f0b8:	003f8c06 	br	800eeec <__alt_data_end+0xfc00eeec>
}
 800f0bc:	e037883a 	mov	sp,fp
 800f0c0:	df000017 	ldw	fp,0(sp)
 800f0c4:	dec00104 	addi	sp,sp,4
 800f0c8:	f800283a 	ret

0800f0cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800f0cc:	defff804 	addi	sp,sp,-32
 800f0d0:	df000715 	stw	fp,28(sp)
 800f0d4:	df000704 	addi	fp,sp,28
 800f0d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800f0dc:	e0bffb17 	ldw	r2,-20(fp)
 800f0e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800f0e4:	e0bff917 	ldw	r2,-28(fp)
 800f0e8:	10800017 	ldw	r2,0(r2)
 800f0ec:	10800104 	addi	r2,r2,4
 800f0f0:	10800037 	ldwio	r2,0(r2)
 800f0f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800f0f8:	e0bffa17 	ldw	r2,-24(fp)
 800f0fc:	1081000c 	andi	r2,r2,1024
 800f100:	10000b26 	beq	r2,zero,800f130 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800f104:	e0bff917 	ldw	r2,-28(fp)
 800f108:	10800017 	ldw	r2,0(r2)
 800f10c:	10800104 	addi	r2,r2,4
 800f110:	1007883a 	mov	r3,r2
 800f114:	e0bff917 	ldw	r2,-28(fp)
 800f118:	10800817 	ldw	r2,32(r2)
 800f11c:	10810014 	ori	r2,r2,1024
 800f120:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800f124:	e0bff917 	ldw	r2,-28(fp)
 800f128:	10000915 	stw	zero,36(r2)
 800f12c:	00000a06 	br	800f158 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800f130:	e0bff917 	ldw	r2,-28(fp)
 800f134:	10c00917 	ldw	r3,36(r2)
 800f138:	00a00034 	movhi	r2,32768
 800f13c:	10bfff04 	addi	r2,r2,-4
 800f140:	10c00536 	bltu	r2,r3,800f158 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800f144:	e0bff917 	ldw	r2,-28(fp)
 800f148:	10800917 	ldw	r2,36(r2)
 800f14c:	10c00044 	addi	r3,r2,1
 800f150:	e0bff917 	ldw	r2,-28(fp)
 800f154:	10c00915 	stw	r3,36(r2)
 800f158:	008200b4 	movhi	r2,2050
 800f15c:	10bc8404 	addi	r2,r2,-3568
 800f160:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800f164:	e037883a 	mov	sp,fp
 800f168:	df000017 	ldw	fp,0(sp)
 800f16c:	dec00104 	addi	sp,sp,4
 800f170:	f800283a 	ret

0800f174 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800f174:	defffd04 	addi	sp,sp,-12
 800f178:	df000215 	stw	fp,8(sp)
 800f17c:	df000204 	addi	fp,sp,8
 800f180:	e13ffe15 	stw	r4,-8(fp)
 800f184:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f188:	00000506 	br	800f1a0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800f18c:	e0bfff17 	ldw	r2,-4(fp)
 800f190:	1090000c 	andi	r2,r2,16384
 800f194:	10000226 	beq	r2,zero,800f1a0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800f198:	00bffd44 	movi	r2,-11
 800f19c:	00000b06 	br	800f1cc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f1a0:	e0bffe17 	ldw	r2,-8(fp)
 800f1a4:	10c00d17 	ldw	r3,52(r2)
 800f1a8:	e0bffe17 	ldw	r2,-8(fp)
 800f1ac:	10800c17 	ldw	r2,48(r2)
 800f1b0:	18800526 	beq	r3,r2,800f1c8 <altera_avalon_jtag_uart_close+0x54>
 800f1b4:	e0bffe17 	ldw	r2,-8(fp)
 800f1b8:	10c00917 	ldw	r3,36(r2)
 800f1bc:	e0bffe17 	ldw	r2,-8(fp)
 800f1c0:	10800117 	ldw	r2,4(r2)
 800f1c4:	18bff136 	bltu	r3,r2,800f18c <__alt_data_end+0xfc00f18c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800f1c8:	0005883a 	mov	r2,zero
}
 800f1cc:	e037883a 	mov	sp,fp
 800f1d0:	df000017 	ldw	fp,0(sp)
 800f1d4:	dec00104 	addi	sp,sp,4
 800f1d8:	f800283a 	ret

0800f1dc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800f1dc:	defffa04 	addi	sp,sp,-24
 800f1e0:	df000515 	stw	fp,20(sp)
 800f1e4:	df000504 	addi	fp,sp,20
 800f1e8:	e13ffd15 	stw	r4,-12(fp)
 800f1ec:	e17ffe15 	stw	r5,-8(fp)
 800f1f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800f1f4:	00bff9c4 	movi	r2,-25
 800f1f8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800f1fc:	e0bffe17 	ldw	r2,-8(fp)
 800f200:	10da8060 	cmpeqi	r3,r2,27137
 800f204:	1800031e 	bne	r3,zero,800f214 <altera_avalon_jtag_uart_ioctl+0x38>
 800f208:	109a80a0 	cmpeqi	r2,r2,27138
 800f20c:	1000191e 	bne	r2,zero,800f274 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800f210:	00002806 	br	800f2b4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800f214:	e0bffd17 	ldw	r2,-12(fp)
 800f218:	10c00117 	ldw	r3,4(r2)
 800f21c:	00a00034 	movhi	r2,32768
 800f220:	10bfffc4 	addi	r2,r2,-1
 800f224:	18801226 	beq	r3,r2,800f270 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800f228:	e0bfff17 	ldw	r2,-4(fp)
 800f22c:	10800017 	ldw	r2,0(r2)
 800f230:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800f234:	e0bffc17 	ldw	r2,-16(fp)
 800f238:	10800090 	cmplti	r2,r2,2
 800f23c:	1000061e 	bne	r2,zero,800f258 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f240:	e0fffc17 	ldw	r3,-16(fp)
 800f244:	00a00034 	movhi	r2,32768
 800f248:	10bfffc4 	addi	r2,r2,-1
 800f24c:	18800226 	beq	r3,r2,800f258 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f250:	e0bffc17 	ldw	r2,-16(fp)
 800f254:	00000206 	br	800f260 <altera_avalon_jtag_uart_ioctl+0x84>
 800f258:	00a00034 	movhi	r2,32768
 800f25c:	10bfff84 	addi	r2,r2,-2
 800f260:	e0fffd17 	ldw	r3,-12(fp)
 800f264:	18800115 	stw	r2,4(r3)
      rc = 0;
 800f268:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800f26c:	00001106 	br	800f2b4 <altera_avalon_jtag_uart_ioctl+0xd8>
 800f270:	00001006 	br	800f2b4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800f274:	e0bffd17 	ldw	r2,-12(fp)
 800f278:	10c00117 	ldw	r3,4(r2)
 800f27c:	00a00034 	movhi	r2,32768
 800f280:	10bfffc4 	addi	r2,r2,-1
 800f284:	18800a26 	beq	r3,r2,800f2b0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800f288:	e0bffd17 	ldw	r2,-12(fp)
 800f28c:	10c00917 	ldw	r3,36(r2)
 800f290:	e0bffd17 	ldw	r2,-12(fp)
 800f294:	10800117 	ldw	r2,4(r2)
 800f298:	1885803a 	cmpltu	r2,r3,r2
 800f29c:	10c03fcc 	andi	r3,r2,255
 800f2a0:	e0bfff17 	ldw	r2,-4(fp)
 800f2a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800f2a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800f2ac:	00000006 	br	800f2b0 <altera_avalon_jtag_uart_ioctl+0xd4>
 800f2b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800f2b4:	e0bffb17 	ldw	r2,-20(fp)
}
 800f2b8:	e037883a 	mov	sp,fp
 800f2bc:	df000017 	ldw	fp,0(sp)
 800f2c0:	dec00104 	addi	sp,sp,4
 800f2c4:	f800283a 	ret

0800f2c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800f2c8:	defff304 	addi	sp,sp,-52
 800f2cc:	dfc00c15 	stw	ra,48(sp)
 800f2d0:	df000b15 	stw	fp,44(sp)
 800f2d4:	df000b04 	addi	fp,sp,44
 800f2d8:	e13ffc15 	stw	r4,-16(fp)
 800f2dc:	e17ffd15 	stw	r5,-12(fp)
 800f2e0:	e1bffe15 	stw	r6,-8(fp)
 800f2e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800f2e8:	e0bffd17 	ldw	r2,-12(fp)
 800f2ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800f2f0:	00004906 	br	800f418 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800f2f4:	e0bffc17 	ldw	r2,-16(fp)
 800f2f8:	10800a17 	ldw	r2,40(r2)
 800f2fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800f300:	e0bffc17 	ldw	r2,-16(fp)
 800f304:	10800b17 	ldw	r2,44(r2)
 800f308:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800f30c:	e0fff717 	ldw	r3,-36(fp)
 800f310:	e0bff817 	ldw	r2,-32(fp)
 800f314:	18800536 	bltu	r3,r2,800f32c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800f318:	e0fff717 	ldw	r3,-36(fp)
 800f31c:	e0bff817 	ldw	r2,-32(fp)
 800f320:	1885c83a 	sub	r2,r3,r2
 800f324:	e0bff615 	stw	r2,-40(fp)
 800f328:	00000406 	br	800f33c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800f32c:	00c20004 	movi	r3,2048
 800f330:	e0bff817 	ldw	r2,-32(fp)
 800f334:	1885c83a 	sub	r2,r3,r2
 800f338:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800f33c:	e0bff617 	ldw	r2,-40(fp)
 800f340:	1000011e 	bne	r2,zero,800f348 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800f344:	00001d06 	br	800f3bc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800f348:	e0fffe17 	ldw	r3,-8(fp)
 800f34c:	e0bff617 	ldw	r2,-40(fp)
 800f350:	1880022e 	bgeu	r3,r2,800f35c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800f354:	e0bffe17 	ldw	r2,-8(fp)
 800f358:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800f35c:	e0bff817 	ldw	r2,-32(fp)
 800f360:	10800e04 	addi	r2,r2,56
 800f364:	e0fffc17 	ldw	r3,-16(fp)
 800f368:	1885883a 	add	r2,r3,r2
 800f36c:	e13ff517 	ldw	r4,-44(fp)
 800f370:	100b883a 	mov	r5,r2
 800f374:	e1bff617 	ldw	r6,-40(fp)
 800f378:	800764c0 	call	800764c <memcpy>
      ptr   += n;
 800f37c:	e0fff517 	ldw	r3,-44(fp)
 800f380:	e0bff617 	ldw	r2,-40(fp)
 800f384:	1885883a 	add	r2,r3,r2
 800f388:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800f38c:	e0fffe17 	ldw	r3,-8(fp)
 800f390:	e0bff617 	ldw	r2,-40(fp)
 800f394:	1885c83a 	sub	r2,r3,r2
 800f398:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f39c:	e0fff817 	ldw	r3,-32(fp)
 800f3a0:	e0bff617 	ldw	r2,-40(fp)
 800f3a4:	1885883a 	add	r2,r3,r2
 800f3a8:	10c1ffcc 	andi	r3,r2,2047
 800f3ac:	e0bffc17 	ldw	r2,-16(fp)
 800f3b0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800f3b4:	e0bffe17 	ldw	r2,-8(fp)
 800f3b8:	00bfce16 	blt	zero,r2,800f2f4 <__alt_data_end+0xfc00f2f4>

    /* If we read any data then return it */
    if (ptr != buffer)
 800f3bc:	e0fff517 	ldw	r3,-44(fp)
 800f3c0:	e0bffd17 	ldw	r2,-12(fp)
 800f3c4:	18800126 	beq	r3,r2,800f3cc <altera_avalon_jtag_uart_read+0x104>
      break;
 800f3c8:	00001506 	br	800f420 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800f3cc:	e0bfff17 	ldw	r2,-4(fp)
 800f3d0:	1090000c 	andi	r2,r2,16384
 800f3d4:	10000126 	beq	r2,zero,800f3dc <altera_avalon_jtag_uart_read+0x114>
      break;
 800f3d8:	00001106 	br	800f420 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800f3dc:	0001883a 	nop
 800f3e0:	e0bffc17 	ldw	r2,-16(fp)
 800f3e4:	10c00a17 	ldw	r3,40(r2)
 800f3e8:	e0bff717 	ldw	r2,-36(fp)
 800f3ec:	1880051e 	bne	r3,r2,800f404 <altera_avalon_jtag_uart_read+0x13c>
 800f3f0:	e0bffc17 	ldw	r2,-16(fp)
 800f3f4:	10c00917 	ldw	r3,36(r2)
 800f3f8:	e0bffc17 	ldw	r2,-16(fp)
 800f3fc:	10800117 	ldw	r2,4(r2)
 800f400:	18bff736 	bltu	r3,r2,800f3e0 <__alt_data_end+0xfc00f3e0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800f404:	e0bffc17 	ldw	r2,-16(fp)
 800f408:	10c00a17 	ldw	r3,40(r2)
 800f40c:	e0bff717 	ldw	r2,-36(fp)
 800f410:	1880011e 	bne	r3,r2,800f418 <altera_avalon_jtag_uart_read+0x150>
      break;
 800f414:	00000206 	br	800f420 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800f418:	e0bffe17 	ldw	r2,-8(fp)
 800f41c:	00bfb516 	blt	zero,r2,800f2f4 <__alt_data_end+0xfc00f2f4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800f420:	e0fff517 	ldw	r3,-44(fp)
 800f424:	e0bffd17 	ldw	r2,-12(fp)
 800f428:	18801826 	beq	r3,r2,800f48c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f42c:	0005303a 	rdctl	r2,status
 800f430:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f434:	e0fffa17 	ldw	r3,-24(fp)
 800f438:	00bfff84 	movi	r2,-2
 800f43c:	1884703a 	and	r2,r3,r2
 800f440:	1001703a 	wrctl	status,r2
  
  return context;
 800f444:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800f448:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f44c:	e0bffc17 	ldw	r2,-16(fp)
 800f450:	10800817 	ldw	r2,32(r2)
 800f454:	10c00054 	ori	r3,r2,1
 800f458:	e0bffc17 	ldw	r2,-16(fp)
 800f45c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f460:	e0bffc17 	ldw	r2,-16(fp)
 800f464:	10800017 	ldw	r2,0(r2)
 800f468:	10800104 	addi	r2,r2,4
 800f46c:	1007883a 	mov	r3,r2
 800f470:	e0bffc17 	ldw	r2,-16(fp)
 800f474:	10800817 	ldw	r2,32(r2)
 800f478:	18800035 	stwio	r2,0(r3)
 800f47c:	e0bff917 	ldw	r2,-28(fp)
 800f480:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f484:	e0bffb17 	ldw	r2,-20(fp)
 800f488:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800f48c:	e0fff517 	ldw	r3,-44(fp)
 800f490:	e0bffd17 	ldw	r2,-12(fp)
 800f494:	18800426 	beq	r3,r2,800f4a8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800f498:	e0fff517 	ldw	r3,-44(fp)
 800f49c:	e0bffd17 	ldw	r2,-12(fp)
 800f4a0:	1885c83a 	sub	r2,r3,r2
 800f4a4:	00000606 	br	800f4c0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800f4a8:	e0bfff17 	ldw	r2,-4(fp)
 800f4ac:	1090000c 	andi	r2,r2,16384
 800f4b0:	10000226 	beq	r2,zero,800f4bc <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800f4b4:	00bffd44 	movi	r2,-11
 800f4b8:	00000106 	br	800f4c0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800f4bc:	00bffec4 	movi	r2,-5
}
 800f4c0:	e037883a 	mov	sp,fp
 800f4c4:	dfc00117 	ldw	ra,4(sp)
 800f4c8:	df000017 	ldw	fp,0(sp)
 800f4cc:	dec00204 	addi	sp,sp,8
 800f4d0:	f800283a 	ret

0800f4d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800f4d4:	defff304 	addi	sp,sp,-52
 800f4d8:	dfc00c15 	stw	ra,48(sp)
 800f4dc:	df000b15 	stw	fp,44(sp)
 800f4e0:	df000b04 	addi	fp,sp,44
 800f4e4:	e13ffc15 	stw	r4,-16(fp)
 800f4e8:	e17ffd15 	stw	r5,-12(fp)
 800f4ec:	e1bffe15 	stw	r6,-8(fp)
 800f4f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800f4f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800f4f8:	e0bffd17 	ldw	r2,-12(fp)
 800f4fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800f500:	00003806 	br	800f5e4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800f504:	e0bffc17 	ldw	r2,-16(fp)
 800f508:	10800c17 	ldw	r2,48(r2)
 800f50c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800f510:	e0bffc17 	ldw	r2,-16(fp)
 800f514:	10800d17 	ldw	r2,52(r2)
 800f518:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800f51c:	e0fff817 	ldw	r3,-32(fp)
 800f520:	e0bff517 	ldw	r2,-44(fp)
 800f524:	1880062e 	bgeu	r3,r2,800f540 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800f528:	e0fff517 	ldw	r3,-44(fp)
 800f52c:	e0bff817 	ldw	r2,-32(fp)
 800f530:	1885c83a 	sub	r2,r3,r2
 800f534:	10bfffc4 	addi	r2,r2,-1
 800f538:	e0bff615 	stw	r2,-40(fp)
 800f53c:	00000b06 	br	800f56c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800f540:	e0bff517 	ldw	r2,-44(fp)
 800f544:	10000526 	beq	r2,zero,800f55c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800f548:	00c20004 	movi	r3,2048
 800f54c:	e0bff817 	ldw	r2,-32(fp)
 800f550:	1885c83a 	sub	r2,r3,r2
 800f554:	e0bff615 	stw	r2,-40(fp)
 800f558:	00000406 	br	800f56c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800f55c:	00c1ffc4 	movi	r3,2047
 800f560:	e0bff817 	ldw	r2,-32(fp)
 800f564:	1885c83a 	sub	r2,r3,r2
 800f568:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800f56c:	e0bff617 	ldw	r2,-40(fp)
 800f570:	1000011e 	bne	r2,zero,800f578 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800f574:	00001d06 	br	800f5ec <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800f578:	e0fffe17 	ldw	r3,-8(fp)
 800f57c:	e0bff617 	ldw	r2,-40(fp)
 800f580:	1880022e 	bgeu	r3,r2,800f58c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800f584:	e0bffe17 	ldw	r2,-8(fp)
 800f588:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800f58c:	e0bff817 	ldw	r2,-32(fp)
 800f590:	10820e04 	addi	r2,r2,2104
 800f594:	e0fffc17 	ldw	r3,-16(fp)
 800f598:	1885883a 	add	r2,r3,r2
 800f59c:	1009883a 	mov	r4,r2
 800f5a0:	e17ffd17 	ldw	r5,-12(fp)
 800f5a4:	e1bff617 	ldw	r6,-40(fp)
 800f5a8:	800764c0 	call	800764c <memcpy>
      ptr   += n;
 800f5ac:	e0fffd17 	ldw	r3,-12(fp)
 800f5b0:	e0bff617 	ldw	r2,-40(fp)
 800f5b4:	1885883a 	add	r2,r3,r2
 800f5b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800f5bc:	e0fffe17 	ldw	r3,-8(fp)
 800f5c0:	e0bff617 	ldw	r2,-40(fp)
 800f5c4:	1885c83a 	sub	r2,r3,r2
 800f5c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f5cc:	e0fff817 	ldw	r3,-32(fp)
 800f5d0:	e0bff617 	ldw	r2,-40(fp)
 800f5d4:	1885883a 	add	r2,r3,r2
 800f5d8:	10c1ffcc 	andi	r3,r2,2047
 800f5dc:	e0bffc17 	ldw	r2,-16(fp)
 800f5e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800f5e4:	e0bffe17 	ldw	r2,-8(fp)
 800f5e8:	00bfc616 	blt	zero,r2,800f504 <__alt_data_end+0xfc00f504>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f5ec:	0005303a 	rdctl	r2,status
 800f5f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f5f4:	e0fffa17 	ldw	r3,-24(fp)
 800f5f8:	00bfff84 	movi	r2,-2
 800f5fc:	1884703a 	and	r2,r3,r2
 800f600:	1001703a 	wrctl	status,r2
  
  return context;
 800f604:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800f608:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f60c:	e0bffc17 	ldw	r2,-16(fp)
 800f610:	10800817 	ldw	r2,32(r2)
 800f614:	10c00094 	ori	r3,r2,2
 800f618:	e0bffc17 	ldw	r2,-16(fp)
 800f61c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f620:	e0bffc17 	ldw	r2,-16(fp)
 800f624:	10800017 	ldw	r2,0(r2)
 800f628:	10800104 	addi	r2,r2,4
 800f62c:	1007883a 	mov	r3,r2
 800f630:	e0bffc17 	ldw	r2,-16(fp)
 800f634:	10800817 	ldw	r2,32(r2)
 800f638:	18800035 	stwio	r2,0(r3)
 800f63c:	e0bff917 	ldw	r2,-28(fp)
 800f640:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f644:	e0bffb17 	ldw	r2,-20(fp)
 800f648:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800f64c:	e0bffe17 	ldw	r2,-8(fp)
 800f650:	0080120e 	bge	zero,r2,800f69c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800f654:	e0bfff17 	ldw	r2,-4(fp)
 800f658:	1090000c 	andi	r2,r2,16384
 800f65c:	10000126 	beq	r2,zero,800f664 <altera_avalon_jtag_uart_write+0x190>
        break;
 800f660:	00001006 	br	800f6a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800f664:	0001883a 	nop
 800f668:	e0bffc17 	ldw	r2,-16(fp)
 800f66c:	10c00d17 	ldw	r3,52(r2)
 800f670:	e0bff517 	ldw	r2,-44(fp)
 800f674:	1880051e 	bne	r3,r2,800f68c <altera_avalon_jtag_uart_write+0x1b8>
 800f678:	e0bffc17 	ldw	r2,-16(fp)
 800f67c:	10c00917 	ldw	r3,36(r2)
 800f680:	e0bffc17 	ldw	r2,-16(fp)
 800f684:	10800117 	ldw	r2,4(r2)
 800f688:	18bff736 	bltu	r3,r2,800f668 <__alt_data_end+0xfc00f668>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800f68c:	e0bffc17 	ldw	r2,-16(fp)
 800f690:	10800917 	ldw	r2,36(r2)
 800f694:	10000126 	beq	r2,zero,800f69c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800f698:	00000206 	br	800f6a4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800f69c:	e0bffe17 	ldw	r2,-8(fp)
 800f6a0:	00bf9716 	blt	zero,r2,800f500 <__alt_data_end+0xfc00f500>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800f6a4:	e0fffd17 	ldw	r3,-12(fp)
 800f6a8:	e0bff717 	ldw	r2,-36(fp)
 800f6ac:	18800426 	beq	r3,r2,800f6c0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800f6b0:	e0fffd17 	ldw	r3,-12(fp)
 800f6b4:	e0bff717 	ldw	r2,-36(fp)
 800f6b8:	1885c83a 	sub	r2,r3,r2
 800f6bc:	00000606 	br	800f6d8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800f6c0:	e0bfff17 	ldw	r2,-4(fp)
 800f6c4:	1090000c 	andi	r2,r2,16384
 800f6c8:	10000226 	beq	r2,zero,800f6d4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800f6cc:	00bffd44 	movi	r2,-11
 800f6d0:	00000106 	br	800f6d8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800f6d4:	00bffec4 	movi	r2,-5
}
 800f6d8:	e037883a 	mov	sp,fp
 800f6dc:	dfc00117 	ldw	ra,4(sp)
 800f6e0:	df000017 	ldw	fp,0(sp)
 800f6e4:	dec00204 	addi	sp,sp,8
 800f6e8:	f800283a 	ret

0800f6ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800f6ec:	defffa04 	addi	sp,sp,-24
 800f6f0:	dfc00515 	stw	ra,20(sp)
 800f6f4:	df000415 	stw	fp,16(sp)
 800f6f8:	df000404 	addi	fp,sp,16
 800f6fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800f700:	0007883a 	mov	r3,zero
 800f704:	e0bfff17 	ldw	r2,-4(fp)
 800f708:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800f70c:	e0bfff17 	ldw	r2,-4(fp)
 800f710:	10800104 	addi	r2,r2,4
 800f714:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f718:	0005303a 	rdctl	r2,status
 800f71c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f720:	e0fffd17 	ldw	r3,-12(fp)
 800f724:	00bfff84 	movi	r2,-2
 800f728:	1884703a 	and	r2,r3,r2
 800f72c:	1001703a 	wrctl	status,r2
  
  return context;
 800f730:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800f734:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800f738:	801079c0 	call	801079c <alt_tick>
 800f73c:	e0bffc17 	ldw	r2,-16(fp)
 800f740:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f744:	e0bffe17 	ldw	r2,-8(fp)
 800f748:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800f74c:	e037883a 	mov	sp,fp
 800f750:	dfc00117 	ldw	ra,4(sp)
 800f754:	df000017 	ldw	fp,0(sp)
 800f758:	dec00204 	addi	sp,sp,8
 800f75c:	f800283a 	ret

0800f760 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800f760:	defff804 	addi	sp,sp,-32
 800f764:	dfc00715 	stw	ra,28(sp)
 800f768:	df000615 	stw	fp,24(sp)
 800f76c:	df000604 	addi	fp,sp,24
 800f770:	e13ffc15 	stw	r4,-16(fp)
 800f774:	e17ffd15 	stw	r5,-12(fp)
 800f778:	e1bffe15 	stw	r6,-8(fp)
 800f77c:	e1ffff15 	stw	r7,-4(fp)
 800f780:	e0bfff17 	ldw	r2,-4(fp)
 800f784:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800f788:	008200b4 	movhi	r2,2050
 800f78c:	10bc8404 	addi	r2,r2,-3568
 800f790:	10800017 	ldw	r2,0(r2)
 800f794:	1000041e 	bne	r2,zero,800f7a8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800f798:	008200b4 	movhi	r2,2050
 800f79c:	10bc8404 	addi	r2,r2,-3568
 800f7a0:	e0fffb17 	ldw	r3,-20(fp)
 800f7a4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800f7a8:	e0bffc17 	ldw	r2,-16(fp)
 800f7ac:	10800104 	addi	r2,r2,4
 800f7b0:	00c001c4 	movi	r3,7
 800f7b4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800f7b8:	d8000015 	stw	zero,0(sp)
 800f7bc:	e13ffd17 	ldw	r4,-12(fp)
 800f7c0:	e17ffe17 	ldw	r5,-8(fp)
 800f7c4:	01820074 	movhi	r6,2049
 800f7c8:	31bdbb04 	addi	r6,r6,-2324
 800f7cc:	e1fffc17 	ldw	r7,-16(fp)
 800f7d0:	80100880 	call	8010088 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800f7d4:	e037883a 	mov	sp,fp
 800f7d8:	dfc00117 	ldw	ra,4(sp)
 800f7dc:	df000017 	ldw	fp,0(sp)
 800f7e0:	dec00204 	addi	sp,sp,8
 800f7e4:	f800283a 	ret

0800f7e8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800f7e8:	defffc04 	addi	sp,sp,-16
 800f7ec:	df000315 	stw	fp,12(sp)
 800f7f0:	df000304 	addi	fp,sp,12
 800f7f4:	e13ffe15 	stw	r4,-8(fp)
 800f7f8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800f7fc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800f800:	e0bfff17 	ldw	r2,-4(fp)
 800f804:	1000061e 	bne	r2,zero,800f820 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800f808:	e0bffe17 	ldw	r2,-8(fp)
 800f80c:	1007883a 	mov	r3,r2
 800f810:	e0bffd03 	ldbu	r2,-12(fp)
 800f814:	1884b03a 	or	r2,r3,r2
 800f818:	e0bffd05 	stb	r2,-12(fp)
 800f81c:	00000806 	br	800f840 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800f820:	e0bffe17 	ldw	r2,-8(fp)
 800f824:	1007883a 	mov	r3,r2
 800f828:	e0bffd03 	ldbu	r2,-12(fp)
 800f82c:	1884b03a 	or	r2,r3,r2
 800f830:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800f834:	e0bffd03 	ldbu	r2,-12(fp)
 800f838:	10801014 	ori	r2,r2,64
 800f83c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800f840:	e0fffd03 	ldbu	r3,-12(fp)
 800f844:	00bfe004 	movi	r2,-128
 800f848:	1884b03a 	or	r2,r3,r2
}
 800f84c:	e037883a 	mov	sp,fp
 800f850:	df000017 	ldw	fp,0(sp)
 800f854:	dec00104 	addi	sp,sp,4
 800f858:	f800283a 	ret

0800f85c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800f85c:	defffd04 	addi	sp,sp,-12
 800f860:	df000215 	stw	fp,8(sp)
 800f864:	df000204 	addi	fp,sp,8
 800f868:	e13ffe15 	stw	r4,-8(fp)
 800f86c:	2805883a 	mov	r2,r5
 800f870:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800f874:	e0bffe17 	ldw	r2,-8(fp)
 800f878:	10800a17 	ldw	r2,40(r2)
 800f87c:	1007883a 	mov	r3,r2
 800f880:	e0bfff03 	ldbu	r2,-4(fp)
 800f884:	18800025 	stbio	r2,0(r3)
}
 800f888:	e037883a 	mov	sp,fp
 800f88c:	df000017 	ldw	fp,0(sp)
 800f890:	dec00104 	addi	sp,sp,4
 800f894:	f800283a 	ret

0800f898 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800f898:	defffe04 	addi	sp,sp,-8
 800f89c:	df000115 	stw	fp,4(sp)
 800f8a0:	df000104 	addi	fp,sp,4
 800f8a4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800f8a8:	e0bfff17 	ldw	r2,-4(fp)
 800f8ac:	10800a17 	ldw	r2,40(r2)
 800f8b0:	1007883a 	mov	r3,r2
 800f8b4:	00800044 	movi	r2,1
 800f8b8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800f8bc:	e037883a 	mov	sp,fp
 800f8c0:	df000017 	ldw	fp,0(sp)
 800f8c4:	dec00104 	addi	sp,sp,4
 800f8c8:	f800283a 	ret

0800f8cc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800f8cc:	defffc04 	addi	sp,sp,-16
 800f8d0:	dfc00315 	stw	ra,12(sp)
 800f8d4:	df000215 	stw	fp,8(sp)
 800f8d8:	df000204 	addi	fp,sp,8
 800f8dc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800f8e0:	e13fff17 	ldw	r4,-4(fp)
 800f8e4:	014200b4 	movhi	r5,2050
 800f8e8:	2975a604 	addi	r5,r5,-10600
 800f8ec:	800ffc80 	call	800ffc8 <alt_find_dev>
 800f8f0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800f8f4:	e0bffe17 	ldw	r2,-8(fp)
}
 800f8f8:	e037883a 	mov	sp,fp
 800f8fc:	dfc00117 	ldw	ra,4(sp)
 800f900:	df000017 	ldw	fp,0(sp)
 800f904:	dec00204 	addi	sp,sp,8
 800f908:	f800283a 	ret

0800f90c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800f90c:	defffb04 	addi	sp,sp,-20
 800f910:	df000415 	stw	fp,16(sp)
 800f914:	df000404 	addi	fp,sp,16
 800f918:	e13ffd15 	stw	r4,-12(fp)
 800f91c:	e17ffe15 	stw	r5,-8(fp)
 800f920:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800f924:	e03ffc15 	stw	zero,-16(fp)
 800f928:	00000f06 	br	800f968 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800f92c:	e0bffd17 	ldw	r2,-12(fp)
 800f930:	10800a17 	ldw	r2,40(r2)
 800f934:	10800044 	addi	r2,r2,1
 800f938:	1009883a 	mov	r4,r2
 800f93c:	e0fffe17 	ldw	r3,-8(fp)
 800f940:	e0bffc17 	ldw	r2,-16(fp)
 800f944:	1885883a 	add	r2,r3,r2
 800f948:	10800003 	ldbu	r2,0(r2)
 800f94c:	10803fcc 	andi	r2,r2,255
 800f950:	1080201c 	xori	r2,r2,128
 800f954:	10bfe004 	addi	r2,r2,-128
 800f958:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800f95c:	e0bffc17 	ldw	r2,-16(fp)
 800f960:	10800044 	addi	r2,r2,1
 800f964:	e0bffc15 	stw	r2,-16(fp)
 800f968:	e0fffc17 	ldw	r3,-16(fp)
 800f96c:	e0bfff17 	ldw	r2,-4(fp)
 800f970:	18bfee36 	bltu	r3,r2,800f92c <__alt_data_end+0xfc00f92c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800f974:	e037883a 	mov	sp,fp
 800f978:	df000017 	ldw	fp,0(sp)
 800f97c:	dec00104 	addi	sp,sp,4
 800f980:	f800283a 	ret

0800f984 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800f984:	defffd04 	addi	sp,sp,-12
 800f988:	df000215 	stw	fp,8(sp)
 800f98c:	df000204 	addi	fp,sp,8
 800f990:	e13ffe15 	stw	r4,-8(fp)
 800f994:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800f998:	00000d06 	br	800f9d0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800f99c:	e0bffe17 	ldw	r2,-8(fp)
 800f9a0:	10800a17 	ldw	r2,40(r2)
 800f9a4:	10800044 	addi	r2,r2,1
 800f9a8:	1007883a 	mov	r3,r2
 800f9ac:	e0bfff17 	ldw	r2,-4(fp)
 800f9b0:	10800003 	ldbu	r2,0(r2)
 800f9b4:	10803fcc 	andi	r2,r2,255
 800f9b8:	1080201c 	xori	r2,r2,128
 800f9bc:	10bfe004 	addi	r2,r2,-128
 800f9c0:	18800025 	stbio	r2,0(r3)
		++ptr;
 800f9c4:	e0bfff17 	ldw	r2,-4(fp)
 800f9c8:	10800044 	addi	r2,r2,1
 800f9cc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800f9d0:	e0bfff17 	ldw	r2,-4(fp)
 800f9d4:	10800003 	ldbu	r2,0(r2)
 800f9d8:	10803fcc 	andi	r2,r2,255
 800f9dc:	1080201c 	xori	r2,r2,128
 800f9e0:	10bfe004 	addi	r2,r2,-128
 800f9e4:	103fed1e 	bne	r2,zero,800f99c <__alt_data_end+0xfc00f99c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800f9e8:	e037883a 	mov	sp,fp
 800f9ec:	df000017 	ldw	fp,0(sp)
 800f9f0:	dec00104 	addi	sp,sp,4
 800f9f4:	f800283a 	ret

0800f9f8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800f9f8:	defffb04 	addi	sp,sp,-20
 800f9fc:	dfc00415 	stw	ra,16(sp)
 800fa00:	df000315 	stw	fp,12(sp)
 800fa04:	df000304 	addi	fp,sp,12
 800fa08:	e13ffd15 	stw	r4,-12(fp)
 800fa0c:	e17ffe15 	stw	r5,-8(fp)
 800fa10:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800fa14:	e0bffd17 	ldw	r2,-12(fp)
 800fa18:	10c00017 	ldw	r3,0(r2)
 800fa1c:	e0bfff17 	ldw	r2,-4(fp)
 800fa20:	1809883a 	mov	r4,r3
 800fa24:	e17ffe17 	ldw	r5,-8(fp)
 800fa28:	100d883a 	mov	r6,r2
 800fa2c:	800f90c0 	call	800f90c <alt_up_character_lcd_write>
	return 0;
 800fa30:	0005883a 	mov	r2,zero
}
 800fa34:	e037883a 	mov	sp,fp
 800fa38:	dfc00117 	ldw	ra,4(sp)
 800fa3c:	df000017 	ldw	fp,0(sp)
 800fa40:	dec00204 	addi	sp,sp,8
 800fa44:	f800283a 	ret

0800fa48 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800fa48:	defffa04 	addi	sp,sp,-24
 800fa4c:	dfc00515 	stw	ra,20(sp)
 800fa50:	df000415 	stw	fp,16(sp)
 800fa54:	df000404 	addi	fp,sp,16
 800fa58:	e13ffd15 	stw	r4,-12(fp)
 800fa5c:	e17ffe15 	stw	r5,-8(fp)
 800fa60:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800fa64:	e0bffe17 	ldw	r2,-8(fp)
 800fa68:	10800a28 	cmpgeui	r2,r2,40
 800fa6c:	1000031e 	bne	r2,zero,800fa7c <alt_up_character_lcd_set_cursor_pos+0x34>
 800fa70:	e0bfff17 	ldw	r2,-4(fp)
 800fa74:	108000b0 	cmpltui	r2,r2,2
 800fa78:	1000021e 	bne	r2,zero,800fa84 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800fa7c:	00bfffc4 	movi	r2,-1
 800fa80:	00000906 	br	800faa8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800fa84:	e13ffe17 	ldw	r4,-8(fp)
 800fa88:	e17fff17 	ldw	r5,-4(fp)
 800fa8c:	800f7e80 	call	800f7e8 <get_DDRAM_addr>
 800fa90:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800fa94:	e0bffc03 	ldbu	r2,-16(fp)
 800fa98:	e13ffd17 	ldw	r4,-12(fp)
 800fa9c:	100b883a 	mov	r5,r2
 800faa0:	800f85c0 	call	800f85c <alt_up_character_lcd_send_cmd>
	return 0;
 800faa4:	0005883a 	mov	r2,zero
}
 800faa8:	e037883a 	mov	sp,fp
 800faac:	dfc00117 	ldw	ra,4(sp)
 800fab0:	df000017 	ldw	fp,0(sp)
 800fab4:	dec00204 	addi	sp,sp,8
 800fab8:	f800283a 	ret

0800fabc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800fabc:	defffb04 	addi	sp,sp,-20
 800fac0:	dfc00415 	stw	ra,16(sp)
 800fac4:	df000315 	stw	fp,12(sp)
 800fac8:	df000304 	addi	fp,sp,12
 800facc:	e13ffe15 	stw	r4,-8(fp)
 800fad0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800fad4:	e0bfff17 	ldw	r2,-4(fp)
 800fad8:	1000011e 	bne	r2,zero,800fae0 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800fadc:	00001406 	br	800fb30 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800fae0:	e0bfff17 	ldw	r2,-4(fp)
 800fae4:	0080020e 	bge	zero,r2,800faf0 <alt_up_character_lcd_shift_cursor+0x34>
 800fae8:	00800504 	movi	r2,20
 800faec:	00000106 	br	800faf4 <alt_up_character_lcd_shift_cursor+0x38>
 800faf0:	00800404 	movi	r2,16
 800faf4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800faf8:	e0bfff17 	ldw	r2,-4(fp)
 800fafc:	1000010e 	bge	r2,zero,800fb04 <alt_up_character_lcd_shift_cursor+0x48>
 800fb00:	0085c83a 	sub	r2,zero,r2
 800fb04:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800fb08:	00000406 	br	800fb1c <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800fb0c:	e0bffd43 	ldbu	r2,-11(fp)
 800fb10:	e13ffe17 	ldw	r4,-8(fp)
 800fb14:	100b883a 	mov	r5,r2
 800fb18:	800f85c0 	call	800f85c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800fb1c:	e0bffd03 	ldbu	r2,-12(fp)
 800fb20:	10ffffc4 	addi	r3,r2,-1
 800fb24:	e0fffd05 	stb	r3,-12(fp)
 800fb28:	10803fcc 	andi	r2,r2,255
 800fb2c:	103ff71e 	bne	r2,zero,800fb0c <__alt_data_end+0xfc00fb0c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800fb30:	e037883a 	mov	sp,fp
 800fb34:	dfc00117 	ldw	ra,4(sp)
 800fb38:	df000017 	ldw	fp,0(sp)
 800fb3c:	dec00204 	addi	sp,sp,8
 800fb40:	f800283a 	ret

0800fb44 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800fb44:	defffb04 	addi	sp,sp,-20
 800fb48:	dfc00415 	stw	ra,16(sp)
 800fb4c:	df000315 	stw	fp,12(sp)
 800fb50:	df000304 	addi	fp,sp,12
 800fb54:	e13ffe15 	stw	r4,-8(fp)
 800fb58:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800fb5c:	e0bfff17 	ldw	r2,-4(fp)
 800fb60:	1000011e 	bne	r2,zero,800fb68 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800fb64:	00001406 	br	800fbb8 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800fb68:	e0bfff17 	ldw	r2,-4(fp)
 800fb6c:	0080020e 	bge	zero,r2,800fb78 <alt_up_character_lcd_shift_display+0x34>
 800fb70:	00800704 	movi	r2,28
 800fb74:	00000106 	br	800fb7c <alt_up_character_lcd_shift_display+0x38>
 800fb78:	00800604 	movi	r2,24
 800fb7c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800fb80:	e0bfff17 	ldw	r2,-4(fp)
 800fb84:	1000010e 	bge	r2,zero,800fb8c <alt_up_character_lcd_shift_display+0x48>
 800fb88:	0085c83a 	sub	r2,zero,r2
 800fb8c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800fb90:	00000406 	br	800fba4 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800fb94:	e0bffd43 	ldbu	r2,-11(fp)
 800fb98:	e13ffe17 	ldw	r4,-8(fp)
 800fb9c:	100b883a 	mov	r5,r2
 800fba0:	800f85c0 	call	800f85c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800fba4:	e0bffd03 	ldbu	r2,-12(fp)
 800fba8:	10ffffc4 	addi	r3,r2,-1
 800fbac:	e0fffd05 	stb	r3,-12(fp)
 800fbb0:	10803fcc 	andi	r2,r2,255
 800fbb4:	103ff71e 	bne	r2,zero,800fb94 <__alt_data_end+0xfc00fb94>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800fbb8:	e037883a 	mov	sp,fp
 800fbbc:	dfc00117 	ldw	ra,4(sp)
 800fbc0:	df000017 	ldw	fp,0(sp)
 800fbc4:	dec00204 	addi	sp,sp,8
 800fbc8:	f800283a 	ret

0800fbcc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800fbcc:	defffa04 	addi	sp,sp,-24
 800fbd0:	dfc00515 	stw	ra,20(sp)
 800fbd4:	df000415 	stw	fp,16(sp)
 800fbd8:	df000404 	addi	fp,sp,16
 800fbdc:	e13ffd15 	stw	r4,-12(fp)
 800fbe0:	e17ffe15 	stw	r5,-8(fp)
 800fbe4:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800fbe8:	e0bffe17 	ldw	r2,-8(fp)
 800fbec:	10800a28 	cmpgeui	r2,r2,40
 800fbf0:	1000031e 	bne	r2,zero,800fc00 <alt_up_character_lcd_erase_pos+0x34>
 800fbf4:	e0bfff17 	ldw	r2,-4(fp)
 800fbf8:	108000b0 	cmpltui	r2,r2,2
 800fbfc:	1000021e 	bne	r2,zero,800fc08 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800fc00:	00bfffc4 	movi	r2,-1
 800fc04:	00000f06 	br	800fc44 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800fc08:	e13ffe17 	ldw	r4,-8(fp)
 800fc0c:	e17fff17 	ldw	r5,-4(fp)
 800fc10:	800f7e80 	call	800f7e8 <get_DDRAM_addr>
 800fc14:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800fc18:	e0bffc03 	ldbu	r2,-16(fp)
 800fc1c:	e13ffd17 	ldw	r4,-12(fp)
 800fc20:	100b883a 	mov	r5,r2
 800fc24:	800f85c0 	call	800f85c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800fc28:	e0bffd17 	ldw	r2,-12(fp)
 800fc2c:	10800a17 	ldw	r2,40(r2)
 800fc30:	10800044 	addi	r2,r2,1
 800fc34:	1007883a 	mov	r3,r2
 800fc38:	00800084 	movi	r2,2
 800fc3c:	18800025 	stbio	r2,0(r3)
	return 0;
 800fc40:	0005883a 	mov	r2,zero
}
 800fc44:	e037883a 	mov	sp,fp
 800fc48:	dfc00117 	ldw	ra,4(sp)
 800fc4c:	df000017 	ldw	fp,0(sp)
 800fc50:	dec00204 	addi	sp,sp,8
 800fc54:	f800283a 	ret

0800fc58 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800fc58:	defffd04 	addi	sp,sp,-12
 800fc5c:	dfc00215 	stw	ra,8(sp)
 800fc60:	df000115 	stw	fp,4(sp)
 800fc64:	df000104 	addi	fp,sp,4
 800fc68:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800fc6c:	e13fff17 	ldw	r4,-4(fp)
 800fc70:	01400304 	movi	r5,12
 800fc74:	800f85c0 	call	800f85c <alt_up_character_lcd_send_cmd>
}
 800fc78:	e037883a 	mov	sp,fp
 800fc7c:	dfc00117 	ldw	ra,4(sp)
 800fc80:	df000017 	ldw	fp,0(sp)
 800fc84:	dec00204 	addi	sp,sp,8
 800fc88:	f800283a 	ret

0800fc8c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800fc8c:	defffd04 	addi	sp,sp,-12
 800fc90:	dfc00215 	stw	ra,8(sp)
 800fc94:	df000115 	stw	fp,4(sp)
 800fc98:	df000104 	addi	fp,sp,4
 800fc9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 800fca0:	e13fff17 	ldw	r4,-4(fp)
 800fca4:	014003c4 	movi	r5,15
 800fca8:	800f85c0 	call	800f85c <alt_up_character_lcd_send_cmd>
}
 800fcac:	e037883a 	mov	sp,fp
 800fcb0:	dfc00117 	ldw	ra,4(sp)
 800fcb4:	df000017 	ldw	fp,0(sp)
 800fcb8:	dec00204 	addi	sp,sp,8
 800fcbc:	f800283a 	ret

0800fcc0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800fcc0:	defff504 	addi	sp,sp,-44
 800fcc4:	df000a15 	stw	fp,40(sp)
 800fcc8:	df000a04 	addi	fp,sp,40
 800fccc:	e13ffc15 	stw	r4,-16(fp)
 800fcd0:	e17ffd15 	stw	r5,-12(fp)
 800fcd4:	e1bffe15 	stw	r6,-8(fp)
 800fcd8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800fcdc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800fce0:	008200b4 	movhi	r2,2050
 800fce4:	10bc8404 	addi	r2,r2,-3568
 800fce8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800fcec:	10003f26 	beq	r2,zero,800fdec <alt_alarm_start+0x12c>
  {
    if (alarm)
 800fcf0:	e0bffc17 	ldw	r2,-16(fp)
 800fcf4:	10003b26 	beq	r2,zero,800fde4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800fcf8:	e0bffc17 	ldw	r2,-16(fp)
 800fcfc:	e0fffe17 	ldw	r3,-8(fp)
 800fd00:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800fd04:	e0bffc17 	ldw	r2,-16(fp)
 800fd08:	e0ffff17 	ldw	r3,-4(fp)
 800fd0c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fd10:	0005303a 	rdctl	r2,status
 800fd14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fd18:	e0fff817 	ldw	r3,-32(fp)
 800fd1c:	00bfff84 	movi	r2,-2
 800fd20:	1884703a 	and	r2,r3,r2
 800fd24:	1001703a 	wrctl	status,r2
  
  return context;
 800fd28:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800fd2c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800fd30:	008200b4 	movhi	r2,2050
 800fd34:	10bc8504 	addi	r2,r2,-3564
 800fd38:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800fd3c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800fd40:	e0fffd17 	ldw	r3,-12(fp)
 800fd44:	e0bff617 	ldw	r2,-40(fp)
 800fd48:	1885883a 	add	r2,r3,r2
 800fd4c:	10c00044 	addi	r3,r2,1
 800fd50:	e0bffc17 	ldw	r2,-16(fp)
 800fd54:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800fd58:	e0bffc17 	ldw	r2,-16(fp)
 800fd5c:	10c00217 	ldw	r3,8(r2)
 800fd60:	e0bff617 	ldw	r2,-40(fp)
 800fd64:	1880042e 	bgeu	r3,r2,800fd78 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800fd68:	e0bffc17 	ldw	r2,-16(fp)
 800fd6c:	00c00044 	movi	r3,1
 800fd70:	10c00405 	stb	r3,16(r2)
 800fd74:	00000206 	br	800fd80 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800fd78:	e0bffc17 	ldw	r2,-16(fp)
 800fd7c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800fd80:	e0fffc17 	ldw	r3,-16(fp)
 800fd84:	008200b4 	movhi	r2,2050
 800fd88:	10b5ac04 	addi	r2,r2,-10576
 800fd8c:	e0bff915 	stw	r2,-28(fp)
 800fd90:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800fd94:	e0bffa17 	ldw	r2,-24(fp)
 800fd98:	e0fff917 	ldw	r3,-28(fp)
 800fd9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800fda0:	e0bff917 	ldw	r2,-28(fp)
 800fda4:	10c00017 	ldw	r3,0(r2)
 800fda8:	e0bffa17 	ldw	r2,-24(fp)
 800fdac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800fdb0:	e0bff917 	ldw	r2,-28(fp)
 800fdb4:	10800017 	ldw	r2,0(r2)
 800fdb8:	e0fffa17 	ldw	r3,-24(fp)
 800fdbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800fdc0:	e0bff917 	ldw	r2,-28(fp)
 800fdc4:	e0fffa17 	ldw	r3,-24(fp)
 800fdc8:	10c00015 	stw	r3,0(r2)
 800fdcc:	e0bff717 	ldw	r2,-36(fp)
 800fdd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fdd4:	e0bffb17 	ldw	r2,-20(fp)
 800fdd8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800fddc:	0005883a 	mov	r2,zero
 800fde0:	00000306 	br	800fdf0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800fde4:	00bffa84 	movi	r2,-22
 800fde8:	00000106 	br	800fdf0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800fdec:	00bfde84 	movi	r2,-134
  }
}
 800fdf0:	e037883a 	mov	sp,fp
 800fdf4:	df000017 	ldw	fp,0(sp)
 800fdf8:	dec00104 	addi	sp,sp,4
 800fdfc:	f800283a 	ret

0800fe00 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800fe00:	deffff04 	addi	sp,sp,-4
 800fe04:	df000015 	stw	fp,0(sp)
 800fe08:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800fe0c:	e037883a 	mov	sp,fp
 800fe10:	df000017 	ldw	fp,0(sp)
 800fe14:	dec00104 	addi	sp,sp,4
 800fe18:	f800283a 	ret

0800fe1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fe1c:	defffe04 	addi	sp,sp,-8
 800fe20:	dfc00115 	stw	ra,4(sp)
 800fe24:	df000015 	stw	fp,0(sp)
 800fe28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fe2c:	008200b4 	movhi	r2,2050
 800fe30:	10b5a904 	addi	r2,r2,-10588
 800fe34:	10800017 	ldw	r2,0(r2)
 800fe38:	10000526 	beq	r2,zero,800fe50 <alt_get_errno+0x34>
 800fe3c:	008200b4 	movhi	r2,2050
 800fe40:	10b5a904 	addi	r2,r2,-10588
 800fe44:	10800017 	ldw	r2,0(r2)
 800fe48:	103ee83a 	callr	r2
 800fe4c:	00000206 	br	800fe58 <alt_get_errno+0x3c>
 800fe50:	008200b4 	movhi	r2,2050
 800fe54:	10bc7f04 	addi	r2,r2,-3588
}
 800fe58:	e037883a 	mov	sp,fp
 800fe5c:	dfc00117 	ldw	ra,4(sp)
 800fe60:	df000017 	ldw	fp,0(sp)
 800fe64:	dec00204 	addi	sp,sp,8
 800fe68:	f800283a 	ret

0800fe6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800fe6c:	defffa04 	addi	sp,sp,-24
 800fe70:	dfc00515 	stw	ra,20(sp)
 800fe74:	df000415 	stw	fp,16(sp)
 800fe78:	df000404 	addi	fp,sp,16
 800fe7c:	e13ffe15 	stw	r4,-8(fp)
 800fe80:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800fe84:	e0bffe17 	ldw	r2,-8(fp)
 800fe88:	10000326 	beq	r2,zero,800fe98 <alt_dev_llist_insert+0x2c>
 800fe8c:	e0bffe17 	ldw	r2,-8(fp)
 800fe90:	10800217 	ldw	r2,8(r2)
 800fe94:	1000061e 	bne	r2,zero,800feb0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800fe98:	800fe1c0 	call	800fe1c <alt_get_errno>
 800fe9c:	1007883a 	mov	r3,r2
 800fea0:	00800584 	movi	r2,22
 800fea4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800fea8:	00bffa84 	movi	r2,-22
 800feac:	00001306 	br	800fefc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800feb0:	e0bffe17 	ldw	r2,-8(fp)
 800feb4:	e0ffff17 	ldw	r3,-4(fp)
 800feb8:	e0fffc15 	stw	r3,-16(fp)
 800febc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800fec0:	e0bffd17 	ldw	r2,-12(fp)
 800fec4:	e0fffc17 	ldw	r3,-16(fp)
 800fec8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800fecc:	e0bffc17 	ldw	r2,-16(fp)
 800fed0:	10c00017 	ldw	r3,0(r2)
 800fed4:	e0bffd17 	ldw	r2,-12(fp)
 800fed8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800fedc:	e0bffc17 	ldw	r2,-16(fp)
 800fee0:	10800017 	ldw	r2,0(r2)
 800fee4:	e0fffd17 	ldw	r3,-12(fp)
 800fee8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800feec:	e0bffc17 	ldw	r2,-16(fp)
 800fef0:	e0fffd17 	ldw	r3,-12(fp)
 800fef4:	10c00015 	stw	r3,0(r2)

  return 0;  
 800fef8:	0005883a 	mov	r2,zero
}
 800fefc:	e037883a 	mov	sp,fp
 800ff00:	dfc00117 	ldw	ra,4(sp)
 800ff04:	df000017 	ldw	fp,0(sp)
 800ff08:	dec00204 	addi	sp,sp,8
 800ff0c:	f800283a 	ret

0800ff10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800ff10:	defffd04 	addi	sp,sp,-12
 800ff14:	dfc00215 	stw	ra,8(sp)
 800ff18:	df000115 	stw	fp,4(sp)
 800ff1c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800ff20:	00820074 	movhi	r2,2049
 800ff24:	1083ad04 	addi	r2,r2,3764
 800ff28:	e0bfff15 	stw	r2,-4(fp)
 800ff2c:	00000606 	br	800ff48 <_do_ctors+0x38>
        (*ctor) (); 
 800ff30:	e0bfff17 	ldw	r2,-4(fp)
 800ff34:	10800017 	ldw	r2,0(r2)
 800ff38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800ff3c:	e0bfff17 	ldw	r2,-4(fp)
 800ff40:	10bfff04 	addi	r2,r2,-4
 800ff44:	e0bfff15 	stw	r2,-4(fp)
 800ff48:	e0ffff17 	ldw	r3,-4(fp)
 800ff4c:	00820074 	movhi	r2,2049
 800ff50:	1083ae04 	addi	r2,r2,3768
 800ff54:	18bff62e 	bgeu	r3,r2,800ff30 <__alt_data_end+0xfc00ff30>
        (*ctor) (); 
}
 800ff58:	e037883a 	mov	sp,fp
 800ff5c:	dfc00117 	ldw	ra,4(sp)
 800ff60:	df000017 	ldw	fp,0(sp)
 800ff64:	dec00204 	addi	sp,sp,8
 800ff68:	f800283a 	ret

0800ff6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800ff6c:	defffd04 	addi	sp,sp,-12
 800ff70:	dfc00215 	stw	ra,8(sp)
 800ff74:	df000115 	stw	fp,4(sp)
 800ff78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800ff7c:	00820074 	movhi	r2,2049
 800ff80:	1083ad04 	addi	r2,r2,3764
 800ff84:	e0bfff15 	stw	r2,-4(fp)
 800ff88:	00000606 	br	800ffa4 <_do_dtors+0x38>
        (*dtor) (); 
 800ff8c:	e0bfff17 	ldw	r2,-4(fp)
 800ff90:	10800017 	ldw	r2,0(r2)
 800ff94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800ff98:	e0bfff17 	ldw	r2,-4(fp)
 800ff9c:	10bfff04 	addi	r2,r2,-4
 800ffa0:	e0bfff15 	stw	r2,-4(fp)
 800ffa4:	e0ffff17 	ldw	r3,-4(fp)
 800ffa8:	00820074 	movhi	r2,2049
 800ffac:	1083ae04 	addi	r2,r2,3768
 800ffb0:	18bff62e 	bgeu	r3,r2,800ff8c <__alt_data_end+0xfc00ff8c>
        (*dtor) (); 
}
 800ffb4:	e037883a 	mov	sp,fp
 800ffb8:	dfc00117 	ldw	ra,4(sp)
 800ffbc:	df000017 	ldw	fp,0(sp)
 800ffc0:	dec00204 	addi	sp,sp,8
 800ffc4:	f800283a 	ret

0800ffc8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800ffc8:	defffa04 	addi	sp,sp,-24
 800ffcc:	dfc00515 	stw	ra,20(sp)
 800ffd0:	df000415 	stw	fp,16(sp)
 800ffd4:	df000404 	addi	fp,sp,16
 800ffd8:	e13ffe15 	stw	r4,-8(fp)
 800ffdc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800ffe0:	e0bfff17 	ldw	r2,-4(fp)
 800ffe4:	10800017 	ldw	r2,0(r2)
 800ffe8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800ffec:	e13ffe17 	ldw	r4,-8(fp)
 800fff0:	8001ff40 	call	8001ff4 <strlen>
 800fff4:	10800044 	addi	r2,r2,1
 800fff8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800fffc:	00000d06 	br	8010034 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010000:	e0bffc17 	ldw	r2,-16(fp)
 8010004:	10c00217 	ldw	r3,8(r2)
 8010008:	e0bffd17 	ldw	r2,-12(fp)
 801000c:	1809883a 	mov	r4,r3
 8010010:	e17ffe17 	ldw	r5,-8(fp)
 8010014:	100d883a 	mov	r6,r2
 8010018:	8010b600 	call	8010b60 <memcmp>
 801001c:	1000021e 	bne	r2,zero,8010028 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010020:	e0bffc17 	ldw	r2,-16(fp)
 8010024:	00000706 	br	8010044 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010028:	e0bffc17 	ldw	r2,-16(fp)
 801002c:	10800017 	ldw	r2,0(r2)
 8010030:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010034:	e0fffc17 	ldw	r3,-16(fp)
 8010038:	e0bfff17 	ldw	r2,-4(fp)
 801003c:	18bff01e 	bne	r3,r2,8010000 <__alt_data_end+0xfc010000>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010040:	0005883a 	mov	r2,zero
}
 8010044:	e037883a 	mov	sp,fp
 8010048:	dfc00117 	ldw	ra,4(sp)
 801004c:	df000017 	ldw	fp,0(sp)
 8010050:	dec00204 	addi	sp,sp,8
 8010054:	f800283a 	ret

08010058 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010058:	defffe04 	addi	sp,sp,-8
 801005c:	dfc00115 	stw	ra,4(sp)
 8010060:	df000015 	stw	fp,0(sp)
 8010064:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8010068:	0009883a 	mov	r4,zero
 801006c:	01440004 	movi	r5,4096
 8010070:	8010a880 	call	8010a88 <alt_icache_flush>
#endif
}
 8010074:	e037883a 	mov	sp,fp
 8010078:	dfc00117 	ldw	ra,4(sp)
 801007c:	df000017 	ldw	fp,0(sp)
 8010080:	dec00204 	addi	sp,sp,8
 8010084:	f800283a 	ret

08010088 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010088:	defff904 	addi	sp,sp,-28
 801008c:	dfc00615 	stw	ra,24(sp)
 8010090:	df000515 	stw	fp,20(sp)
 8010094:	df000504 	addi	fp,sp,20
 8010098:	e13ffc15 	stw	r4,-16(fp)
 801009c:	e17ffd15 	stw	r5,-12(fp)
 80100a0:	e1bffe15 	stw	r6,-8(fp)
 80100a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80100a8:	e0800217 	ldw	r2,8(fp)
 80100ac:	d8800015 	stw	r2,0(sp)
 80100b0:	e13ffc17 	ldw	r4,-16(fp)
 80100b4:	e17ffd17 	ldw	r5,-12(fp)
 80100b8:	e1bffe17 	ldw	r6,-8(fp)
 80100bc:	e1ffff17 	ldw	r7,-4(fp)
 80100c0:	80102680 	call	8010268 <alt_iic_isr_register>
}  
 80100c4:	e037883a 	mov	sp,fp
 80100c8:	dfc00117 	ldw	ra,4(sp)
 80100cc:	df000017 	ldw	fp,0(sp)
 80100d0:	dec00204 	addi	sp,sp,8
 80100d4:	f800283a 	ret

080100d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80100d8:	defff904 	addi	sp,sp,-28
 80100dc:	df000615 	stw	fp,24(sp)
 80100e0:	df000604 	addi	fp,sp,24
 80100e4:	e13ffe15 	stw	r4,-8(fp)
 80100e8:	e17fff15 	stw	r5,-4(fp)
 80100ec:	e0bfff17 	ldw	r2,-4(fp)
 80100f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80100f4:	0005303a 	rdctl	r2,status
 80100f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80100fc:	e0fffb17 	ldw	r3,-20(fp)
 8010100:	00bfff84 	movi	r2,-2
 8010104:	1884703a 	and	r2,r3,r2
 8010108:	1001703a 	wrctl	status,r2
  
  return context;
 801010c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010110:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010114:	e0bffa17 	ldw	r2,-24(fp)
 8010118:	00c00044 	movi	r3,1
 801011c:	1884983a 	sll	r2,r3,r2
 8010120:	1007883a 	mov	r3,r2
 8010124:	008200b4 	movhi	r2,2050
 8010128:	10bc8304 	addi	r2,r2,-3572
 801012c:	10800017 	ldw	r2,0(r2)
 8010130:	1886b03a 	or	r3,r3,r2
 8010134:	008200b4 	movhi	r2,2050
 8010138:	10bc8304 	addi	r2,r2,-3572
 801013c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010140:	008200b4 	movhi	r2,2050
 8010144:	10bc8304 	addi	r2,r2,-3572
 8010148:	10800017 	ldw	r2,0(r2)
 801014c:	100170fa 	wrctl	ienable,r2
 8010150:	e0bffc17 	ldw	r2,-16(fp)
 8010154:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010158:	e0bffd17 	ldw	r2,-12(fp)
 801015c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010160:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8010164:	0001883a 	nop
}
 8010168:	e037883a 	mov	sp,fp
 801016c:	df000017 	ldw	fp,0(sp)
 8010170:	dec00104 	addi	sp,sp,4
 8010174:	f800283a 	ret

08010178 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010178:	defff904 	addi	sp,sp,-28
 801017c:	df000615 	stw	fp,24(sp)
 8010180:	df000604 	addi	fp,sp,24
 8010184:	e13ffe15 	stw	r4,-8(fp)
 8010188:	e17fff15 	stw	r5,-4(fp)
 801018c:	e0bfff17 	ldw	r2,-4(fp)
 8010190:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010194:	0005303a 	rdctl	r2,status
 8010198:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801019c:	e0fffb17 	ldw	r3,-20(fp)
 80101a0:	00bfff84 	movi	r2,-2
 80101a4:	1884703a 	and	r2,r3,r2
 80101a8:	1001703a 	wrctl	status,r2
  
  return context;
 80101ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80101b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80101b4:	e0bffa17 	ldw	r2,-24(fp)
 80101b8:	00c00044 	movi	r3,1
 80101bc:	1884983a 	sll	r2,r3,r2
 80101c0:	0084303a 	nor	r2,zero,r2
 80101c4:	1007883a 	mov	r3,r2
 80101c8:	008200b4 	movhi	r2,2050
 80101cc:	10bc8304 	addi	r2,r2,-3572
 80101d0:	10800017 	ldw	r2,0(r2)
 80101d4:	1886703a 	and	r3,r3,r2
 80101d8:	008200b4 	movhi	r2,2050
 80101dc:	10bc8304 	addi	r2,r2,-3572
 80101e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80101e4:	008200b4 	movhi	r2,2050
 80101e8:	10bc8304 	addi	r2,r2,-3572
 80101ec:	10800017 	ldw	r2,0(r2)
 80101f0:	100170fa 	wrctl	ienable,r2
 80101f4:	e0bffc17 	ldw	r2,-16(fp)
 80101f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80101fc:	e0bffd17 	ldw	r2,-12(fp)
 8010200:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010204:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010208:	0001883a 	nop
}
 801020c:	e037883a 	mov	sp,fp
 8010210:	df000017 	ldw	fp,0(sp)
 8010214:	dec00104 	addi	sp,sp,4
 8010218:	f800283a 	ret

0801021c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801021c:	defffc04 	addi	sp,sp,-16
 8010220:	df000315 	stw	fp,12(sp)
 8010224:	df000304 	addi	fp,sp,12
 8010228:	e13ffe15 	stw	r4,-8(fp)
 801022c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010230:	000530fa 	rdctl	r2,ienable
 8010234:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010238:	e0bfff17 	ldw	r2,-4(fp)
 801023c:	00c00044 	movi	r3,1
 8010240:	1884983a 	sll	r2,r3,r2
 8010244:	1007883a 	mov	r3,r2
 8010248:	e0bffd17 	ldw	r2,-12(fp)
 801024c:	1884703a 	and	r2,r3,r2
 8010250:	1004c03a 	cmpne	r2,r2,zero
 8010254:	10803fcc 	andi	r2,r2,255
}
 8010258:	e037883a 	mov	sp,fp
 801025c:	df000017 	ldw	fp,0(sp)
 8010260:	dec00104 	addi	sp,sp,4
 8010264:	f800283a 	ret

08010268 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010268:	defff504 	addi	sp,sp,-44
 801026c:	dfc00a15 	stw	ra,40(sp)
 8010270:	df000915 	stw	fp,36(sp)
 8010274:	df000904 	addi	fp,sp,36
 8010278:	e13ffc15 	stw	r4,-16(fp)
 801027c:	e17ffd15 	stw	r5,-12(fp)
 8010280:	e1bffe15 	stw	r6,-8(fp)
 8010284:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010288:	00bffa84 	movi	r2,-22
 801028c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010290:	e0bffd17 	ldw	r2,-12(fp)
 8010294:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010298:	e0bff817 	ldw	r2,-32(fp)
 801029c:	10800808 	cmpgei	r2,r2,32
 80102a0:	1000271e 	bne	r2,zero,8010340 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80102a4:	0005303a 	rdctl	r2,status
 80102a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80102ac:	e0fffa17 	ldw	r3,-24(fp)
 80102b0:	00bfff84 	movi	r2,-2
 80102b4:	1884703a 	and	r2,r3,r2
 80102b8:	1001703a 	wrctl	status,r2
  
  return context;
 80102bc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80102c0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 80102c4:	008200b4 	movhi	r2,2050
 80102c8:	10846004 	addi	r2,r2,4480
 80102cc:	e0fff817 	ldw	r3,-32(fp)
 80102d0:	180690fa 	slli	r3,r3,3
 80102d4:	10c5883a 	add	r2,r2,r3
 80102d8:	e0fffe17 	ldw	r3,-8(fp)
 80102dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80102e0:	008200b4 	movhi	r2,2050
 80102e4:	10846004 	addi	r2,r2,4480
 80102e8:	e0fff817 	ldw	r3,-32(fp)
 80102ec:	180690fa 	slli	r3,r3,3
 80102f0:	10c5883a 	add	r2,r2,r3
 80102f4:	10800104 	addi	r2,r2,4
 80102f8:	e0ffff17 	ldw	r3,-4(fp)
 80102fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010300:	e0bffe17 	ldw	r2,-8(fp)
 8010304:	10000526 	beq	r2,zero,801031c <alt_iic_isr_register+0xb4>
 8010308:	e0bff817 	ldw	r2,-32(fp)
 801030c:	e13ffc17 	ldw	r4,-16(fp)
 8010310:	100b883a 	mov	r5,r2
 8010314:	80100d80 	call	80100d8 <alt_ic_irq_enable>
 8010318:	00000406 	br	801032c <alt_iic_isr_register+0xc4>
 801031c:	e0bff817 	ldw	r2,-32(fp)
 8010320:	e13ffc17 	ldw	r4,-16(fp)
 8010324:	100b883a 	mov	r5,r2
 8010328:	80101780 	call	8010178 <alt_ic_irq_disable>
 801032c:	e0bff715 	stw	r2,-36(fp)
 8010330:	e0bff917 	ldw	r2,-28(fp)
 8010334:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010338:	e0bffb17 	ldw	r2,-20(fp)
 801033c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010340:	e0bff717 	ldw	r2,-36(fp)
}
 8010344:	e037883a 	mov	sp,fp
 8010348:	dfc00117 	ldw	ra,4(sp)
 801034c:	df000017 	ldw	fp,0(sp)
 8010350:	dec00204 	addi	sp,sp,8
 8010354:	f800283a 	ret

08010358 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010358:	defff904 	addi	sp,sp,-28
 801035c:	dfc00615 	stw	ra,24(sp)
 8010360:	df000515 	stw	fp,20(sp)
 8010364:	df000504 	addi	fp,sp,20
 8010368:	e13ffc15 	stw	r4,-16(fp)
 801036c:	e17ffd15 	stw	r5,-12(fp)
 8010370:	e1bffe15 	stw	r6,-8(fp)
 8010374:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8010378:	e13ffd17 	ldw	r4,-12(fp)
 801037c:	e17ffe17 	ldw	r5,-8(fp)
 8010380:	e1bfff17 	ldw	r6,-4(fp)
 8010384:	80105ac0 	call	80105ac <open>
 8010388:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801038c:	e0bffb17 	ldw	r2,-20(fp)
 8010390:	10001c16 	blt	r2,zero,8010404 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010394:	008200b4 	movhi	r2,2050
 8010398:	10b11a04 	addi	r2,r2,-15256
 801039c:	e0fffb17 	ldw	r3,-20(fp)
 80103a0:	18c00324 	muli	r3,r3,12
 80103a4:	10c5883a 	add	r2,r2,r3
 80103a8:	10c00017 	ldw	r3,0(r2)
 80103ac:	e0bffc17 	ldw	r2,-16(fp)
 80103b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80103b4:	008200b4 	movhi	r2,2050
 80103b8:	10b11a04 	addi	r2,r2,-15256
 80103bc:	e0fffb17 	ldw	r3,-20(fp)
 80103c0:	18c00324 	muli	r3,r3,12
 80103c4:	10c5883a 	add	r2,r2,r3
 80103c8:	10800104 	addi	r2,r2,4
 80103cc:	10c00017 	ldw	r3,0(r2)
 80103d0:	e0bffc17 	ldw	r2,-16(fp)
 80103d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80103d8:	008200b4 	movhi	r2,2050
 80103dc:	10b11a04 	addi	r2,r2,-15256
 80103e0:	e0fffb17 	ldw	r3,-20(fp)
 80103e4:	18c00324 	muli	r3,r3,12
 80103e8:	10c5883a 	add	r2,r2,r3
 80103ec:	10800204 	addi	r2,r2,8
 80103f0:	10c00017 	ldw	r3,0(r2)
 80103f4:	e0bffc17 	ldw	r2,-16(fp)
 80103f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80103fc:	e13ffb17 	ldw	r4,-20(fp)
 8010400:	800e96c0 	call	800e96c <alt_release_fd>
  }
} 
 8010404:	e037883a 	mov	sp,fp
 8010408:	dfc00117 	ldw	ra,4(sp)
 801040c:	df000017 	ldw	fp,0(sp)
 8010410:	dec00204 	addi	sp,sp,8
 8010414:	f800283a 	ret

08010418 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8010418:	defffb04 	addi	sp,sp,-20
 801041c:	dfc00415 	stw	ra,16(sp)
 8010420:	df000315 	stw	fp,12(sp)
 8010424:	df000304 	addi	fp,sp,12
 8010428:	e13ffd15 	stw	r4,-12(fp)
 801042c:	e17ffe15 	stw	r5,-8(fp)
 8010430:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8010434:	010200b4 	movhi	r4,2050
 8010438:	21311d04 	addi	r4,r4,-15244
 801043c:	e17ffd17 	ldw	r5,-12(fp)
 8010440:	01800044 	movi	r6,1
 8010444:	01c07fc4 	movi	r7,511
 8010448:	80103580 	call	8010358 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801044c:	010200b4 	movhi	r4,2050
 8010450:	21311a04 	addi	r4,r4,-15256
 8010454:	e17ffe17 	ldw	r5,-8(fp)
 8010458:	000d883a 	mov	r6,zero
 801045c:	01c07fc4 	movi	r7,511
 8010460:	80103580 	call	8010358 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010464:	010200b4 	movhi	r4,2050
 8010468:	21312004 	addi	r4,r4,-15232
 801046c:	e17fff17 	ldw	r5,-4(fp)
 8010470:	01800044 	movi	r6,1
 8010474:	01c07fc4 	movi	r7,511
 8010478:	80103580 	call	8010358 <alt_open_fd>
}  
 801047c:	e037883a 	mov	sp,fp
 8010480:	dfc00117 	ldw	ra,4(sp)
 8010484:	df000017 	ldw	fp,0(sp)
 8010488:	dec00204 	addi	sp,sp,8
 801048c:	f800283a 	ret

08010490 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010490:	defffe04 	addi	sp,sp,-8
 8010494:	dfc00115 	stw	ra,4(sp)
 8010498:	df000015 	stw	fp,0(sp)
 801049c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80104a0:	008200b4 	movhi	r2,2050
 80104a4:	10b5a904 	addi	r2,r2,-10588
 80104a8:	10800017 	ldw	r2,0(r2)
 80104ac:	10000526 	beq	r2,zero,80104c4 <alt_get_errno+0x34>
 80104b0:	008200b4 	movhi	r2,2050
 80104b4:	10b5a904 	addi	r2,r2,-10588
 80104b8:	10800017 	ldw	r2,0(r2)
 80104bc:	103ee83a 	callr	r2
 80104c0:	00000206 	br	80104cc <alt_get_errno+0x3c>
 80104c4:	008200b4 	movhi	r2,2050
 80104c8:	10bc7f04 	addi	r2,r2,-3588
}
 80104cc:	e037883a 	mov	sp,fp
 80104d0:	dfc00117 	ldw	ra,4(sp)
 80104d4:	df000017 	ldw	fp,0(sp)
 80104d8:	dec00204 	addi	sp,sp,8
 80104dc:	f800283a 	ret

080104e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80104e0:	defffd04 	addi	sp,sp,-12
 80104e4:	df000215 	stw	fp,8(sp)
 80104e8:	df000204 	addi	fp,sp,8
 80104ec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80104f0:	e0bfff17 	ldw	r2,-4(fp)
 80104f4:	10800217 	ldw	r2,8(r2)
 80104f8:	10d00034 	orhi	r3,r2,16384
 80104fc:	e0bfff17 	ldw	r2,-4(fp)
 8010500:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010504:	e03ffe15 	stw	zero,-8(fp)
 8010508:	00001d06 	br	8010580 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801050c:	008200b4 	movhi	r2,2050
 8010510:	10b11a04 	addi	r2,r2,-15256
 8010514:	e0fffe17 	ldw	r3,-8(fp)
 8010518:	18c00324 	muli	r3,r3,12
 801051c:	10c5883a 	add	r2,r2,r3
 8010520:	10c00017 	ldw	r3,0(r2)
 8010524:	e0bfff17 	ldw	r2,-4(fp)
 8010528:	10800017 	ldw	r2,0(r2)
 801052c:	1880111e 	bne	r3,r2,8010574 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010530:	008200b4 	movhi	r2,2050
 8010534:	10b11a04 	addi	r2,r2,-15256
 8010538:	e0fffe17 	ldw	r3,-8(fp)
 801053c:	18c00324 	muli	r3,r3,12
 8010540:	10c5883a 	add	r2,r2,r3
 8010544:	10800204 	addi	r2,r2,8
 8010548:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801054c:	1000090e 	bge	r2,zero,8010574 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8010550:	e0bffe17 	ldw	r2,-8(fp)
 8010554:	10c00324 	muli	r3,r2,12
 8010558:	008200b4 	movhi	r2,2050
 801055c:	10b11a04 	addi	r2,r2,-15256
 8010560:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010564:	e0bfff17 	ldw	r2,-4(fp)
 8010568:	18800226 	beq	r3,r2,8010574 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801056c:	00bffcc4 	movi	r2,-13
 8010570:	00000a06 	br	801059c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010574:	e0bffe17 	ldw	r2,-8(fp)
 8010578:	10800044 	addi	r2,r2,1
 801057c:	e0bffe15 	stw	r2,-8(fp)
 8010580:	008200b4 	movhi	r2,2050
 8010584:	10b5a804 	addi	r2,r2,-10592
 8010588:	10800017 	ldw	r2,0(r2)
 801058c:	1007883a 	mov	r3,r2
 8010590:	e0bffe17 	ldw	r2,-8(fp)
 8010594:	18bfdd2e 	bgeu	r3,r2,801050c <__alt_data_end+0xfc01050c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010598:	0005883a 	mov	r2,zero
}
 801059c:	e037883a 	mov	sp,fp
 80105a0:	df000017 	ldw	fp,0(sp)
 80105a4:	dec00104 	addi	sp,sp,4
 80105a8:	f800283a 	ret

080105ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80105ac:	defff604 	addi	sp,sp,-40
 80105b0:	dfc00915 	stw	ra,36(sp)
 80105b4:	df000815 	stw	fp,32(sp)
 80105b8:	df000804 	addi	fp,sp,32
 80105bc:	e13ffd15 	stw	r4,-12(fp)
 80105c0:	e17ffe15 	stw	r5,-8(fp)
 80105c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80105c8:	00bfffc4 	movi	r2,-1
 80105cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80105d0:	00bffb44 	movi	r2,-19
 80105d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80105d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80105dc:	e13ffd17 	ldw	r4,-12(fp)
 80105e0:	014200b4 	movhi	r5,2050
 80105e4:	2975a604 	addi	r5,r5,-10600
 80105e8:	800ffc80 	call	800ffc8 <alt_find_dev>
 80105ec:	e0bff815 	stw	r2,-32(fp)
 80105f0:	e0bff817 	ldw	r2,-32(fp)
 80105f4:	1000051e 	bne	r2,zero,801060c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80105f8:	e13ffd17 	ldw	r4,-12(fp)
 80105fc:	80108c00 	call	80108c0 <alt_find_file>
 8010600:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8010604:	00800044 	movi	r2,1
 8010608:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801060c:	e0bff817 	ldw	r2,-32(fp)
 8010610:	10002926 	beq	r2,zero,80106b8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010614:	e13ff817 	ldw	r4,-32(fp)
 8010618:	80109d40 	call	80109d4 <alt_get_fd>
 801061c:	e0bff915 	stw	r2,-28(fp)
 8010620:	e0bff917 	ldw	r2,-28(fp)
 8010624:	1000030e 	bge	r2,zero,8010634 <open+0x88>
    {
      status = index;
 8010628:	e0bff917 	ldw	r2,-28(fp)
 801062c:	e0bffa15 	stw	r2,-24(fp)
 8010630:	00002306 	br	80106c0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010634:	e0bff917 	ldw	r2,-28(fp)
 8010638:	10c00324 	muli	r3,r2,12
 801063c:	008200b4 	movhi	r2,2050
 8010640:	10b11a04 	addi	r2,r2,-15256
 8010644:	1885883a 	add	r2,r3,r2
 8010648:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801064c:	e0fffe17 	ldw	r3,-8(fp)
 8010650:	00900034 	movhi	r2,16384
 8010654:	10bfffc4 	addi	r2,r2,-1
 8010658:	1886703a 	and	r3,r3,r2
 801065c:	e0bffc17 	ldw	r2,-16(fp)
 8010660:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010664:	e0bffb17 	ldw	r2,-20(fp)
 8010668:	1000051e 	bne	r2,zero,8010680 <open+0xd4>
 801066c:	e13ffc17 	ldw	r4,-16(fp)
 8010670:	80104e00 	call	80104e0 <alt_file_locked>
 8010674:	e0bffa15 	stw	r2,-24(fp)
 8010678:	e0bffa17 	ldw	r2,-24(fp)
 801067c:	10001016 	blt	r2,zero,80106c0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010680:	e0bff817 	ldw	r2,-32(fp)
 8010684:	10800317 	ldw	r2,12(r2)
 8010688:	10000826 	beq	r2,zero,80106ac <open+0x100>
 801068c:	e0bff817 	ldw	r2,-32(fp)
 8010690:	10800317 	ldw	r2,12(r2)
 8010694:	e13ffc17 	ldw	r4,-16(fp)
 8010698:	e17ffd17 	ldw	r5,-12(fp)
 801069c:	e1bffe17 	ldw	r6,-8(fp)
 80106a0:	e1ffff17 	ldw	r7,-4(fp)
 80106a4:	103ee83a 	callr	r2
 80106a8:	00000106 	br	80106b0 <open+0x104>
 80106ac:	0005883a 	mov	r2,zero
 80106b0:	e0bffa15 	stw	r2,-24(fp)
 80106b4:	00000206 	br	80106c0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80106b8:	00bffb44 	movi	r2,-19
 80106bc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80106c0:	e0bffa17 	ldw	r2,-24(fp)
 80106c4:	1000090e 	bge	r2,zero,80106ec <open+0x140>
  {
    alt_release_fd (index);  
 80106c8:	e13ff917 	ldw	r4,-28(fp)
 80106cc:	800e96c0 	call	800e96c <alt_release_fd>
    ALT_ERRNO = -status;
 80106d0:	80104900 	call	8010490 <alt_get_errno>
 80106d4:	1007883a 	mov	r3,r2
 80106d8:	e0bffa17 	ldw	r2,-24(fp)
 80106dc:	0085c83a 	sub	r2,zero,r2
 80106e0:	18800015 	stw	r2,0(r3)
    return -1;
 80106e4:	00bfffc4 	movi	r2,-1
 80106e8:	00000106 	br	80106f0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 80106ec:	e0bff917 	ldw	r2,-28(fp)
}
 80106f0:	e037883a 	mov	sp,fp
 80106f4:	dfc00117 	ldw	ra,4(sp)
 80106f8:	df000017 	ldw	fp,0(sp)
 80106fc:	dec00204 	addi	sp,sp,8
 8010700:	f800283a 	ret

08010704 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010704:	defffa04 	addi	sp,sp,-24
 8010708:	df000515 	stw	fp,20(sp)
 801070c:	df000504 	addi	fp,sp,20
 8010710:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010714:	0005303a 	rdctl	r2,status
 8010718:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801071c:	e0fffc17 	ldw	r3,-16(fp)
 8010720:	00bfff84 	movi	r2,-2
 8010724:	1884703a 	and	r2,r3,r2
 8010728:	1001703a 	wrctl	status,r2
  
  return context;
 801072c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010730:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010734:	e0bfff17 	ldw	r2,-4(fp)
 8010738:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801073c:	e0bffd17 	ldw	r2,-12(fp)
 8010740:	10800017 	ldw	r2,0(r2)
 8010744:	e0fffd17 	ldw	r3,-12(fp)
 8010748:	18c00117 	ldw	r3,4(r3)
 801074c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010750:	e0bffd17 	ldw	r2,-12(fp)
 8010754:	10800117 	ldw	r2,4(r2)
 8010758:	e0fffd17 	ldw	r3,-12(fp)
 801075c:	18c00017 	ldw	r3,0(r3)
 8010760:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010764:	e0bffd17 	ldw	r2,-12(fp)
 8010768:	e0fffd17 	ldw	r3,-12(fp)
 801076c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010770:	e0bffd17 	ldw	r2,-12(fp)
 8010774:	e0fffd17 	ldw	r3,-12(fp)
 8010778:	10c00015 	stw	r3,0(r2)
 801077c:	e0bffb17 	ldw	r2,-20(fp)
 8010780:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010784:	e0bffe17 	ldw	r2,-8(fp)
 8010788:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801078c:	e037883a 	mov	sp,fp
 8010790:	df000017 	ldw	fp,0(sp)
 8010794:	dec00104 	addi	sp,sp,4
 8010798:	f800283a 	ret

0801079c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801079c:	defffb04 	addi	sp,sp,-20
 80107a0:	dfc00415 	stw	ra,16(sp)
 80107a4:	df000315 	stw	fp,12(sp)
 80107a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80107ac:	d0a00f17 	ldw	r2,-32708(gp)
 80107b0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80107b4:	d0a6e817 	ldw	r2,-25696(gp)
 80107b8:	10800044 	addi	r2,r2,1
 80107bc:	d0a6e815 	stw	r2,-25696(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80107c0:	00002e06 	br	801087c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80107c4:	e0bffd17 	ldw	r2,-12(fp)
 80107c8:	10800017 	ldw	r2,0(r2)
 80107cc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80107d0:	e0bffd17 	ldw	r2,-12(fp)
 80107d4:	10800403 	ldbu	r2,16(r2)
 80107d8:	10803fcc 	andi	r2,r2,255
 80107dc:	10000426 	beq	r2,zero,80107f0 <alt_tick+0x54>
 80107e0:	d0a6e817 	ldw	r2,-25696(gp)
 80107e4:	1000021e 	bne	r2,zero,80107f0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80107e8:	e0bffd17 	ldw	r2,-12(fp)
 80107ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80107f0:	e0bffd17 	ldw	r2,-12(fp)
 80107f4:	10800217 	ldw	r2,8(r2)
 80107f8:	d0e6e817 	ldw	r3,-25696(gp)
 80107fc:	18801d36 	bltu	r3,r2,8010874 <alt_tick+0xd8>
 8010800:	e0bffd17 	ldw	r2,-12(fp)
 8010804:	10800403 	ldbu	r2,16(r2)
 8010808:	10803fcc 	andi	r2,r2,255
 801080c:	1000191e 	bne	r2,zero,8010874 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010810:	e0bffd17 	ldw	r2,-12(fp)
 8010814:	10800317 	ldw	r2,12(r2)
 8010818:	e0fffd17 	ldw	r3,-12(fp)
 801081c:	18c00517 	ldw	r3,20(r3)
 8010820:	1809883a 	mov	r4,r3
 8010824:	103ee83a 	callr	r2
 8010828:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 801082c:	e0bfff17 	ldw	r2,-4(fp)
 8010830:	1000031e 	bne	r2,zero,8010840 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010834:	e13ffd17 	ldw	r4,-12(fp)
 8010838:	80107040 	call	8010704 <alt_alarm_stop>
 801083c:	00000d06 	br	8010874 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010840:	e0bffd17 	ldw	r2,-12(fp)
 8010844:	10c00217 	ldw	r3,8(r2)
 8010848:	e0bfff17 	ldw	r2,-4(fp)
 801084c:	1887883a 	add	r3,r3,r2
 8010850:	e0bffd17 	ldw	r2,-12(fp)
 8010854:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010858:	e0bffd17 	ldw	r2,-12(fp)
 801085c:	10c00217 	ldw	r3,8(r2)
 8010860:	d0a6e817 	ldw	r2,-25696(gp)
 8010864:	1880032e 	bgeu	r3,r2,8010874 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010868:	e0bffd17 	ldw	r2,-12(fp)
 801086c:	00c00044 	movi	r3,1
 8010870:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010874:	e0bffe17 	ldw	r2,-8(fp)
 8010878:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801087c:	e0fffd17 	ldw	r3,-12(fp)
 8010880:	d0a00f04 	addi	r2,gp,-32708
 8010884:	18bfcf1e 	bne	r3,r2,80107c4 <__alt_data_end+0xfc0107c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010888:	0001883a 	nop
}
 801088c:	e037883a 	mov	sp,fp
 8010890:	dfc00117 	ldw	ra,4(sp)
 8010894:	df000017 	ldw	fp,0(sp)
 8010898:	dec00204 	addi	sp,sp,8
 801089c:	f800283a 	ret

080108a0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 80108a0:	deffff04 	addi	sp,sp,-4
 80108a4:	df000015 	stw	fp,0(sp)
 80108a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80108ac:	000170fa 	wrctl	ienable,zero
}
 80108b0:	e037883a 	mov	sp,fp
 80108b4:	df000017 	ldw	fp,0(sp)
 80108b8:	dec00104 	addi	sp,sp,4
 80108bc:	f800283a 	ret

080108c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80108c0:	defffb04 	addi	sp,sp,-20
 80108c4:	dfc00415 	stw	ra,16(sp)
 80108c8:	df000315 	stw	fp,12(sp)
 80108cc:	df000304 	addi	fp,sp,12
 80108d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80108d4:	008200b4 	movhi	r2,2050
 80108d8:	10b5a404 	addi	r2,r2,-10608
 80108dc:	10800017 	ldw	r2,0(r2)
 80108e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80108e4:	00003106 	br	80109ac <alt_find_file+0xec>
  {
    len = strlen(next->name);
 80108e8:	e0bffd17 	ldw	r2,-12(fp)
 80108ec:	10800217 	ldw	r2,8(r2)
 80108f0:	1009883a 	mov	r4,r2
 80108f4:	8001ff40 	call	8001ff4 <strlen>
 80108f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80108fc:	e0bffd17 	ldw	r2,-12(fp)
 8010900:	10c00217 	ldw	r3,8(r2)
 8010904:	e0bffe17 	ldw	r2,-8(fp)
 8010908:	10bfffc4 	addi	r2,r2,-1
 801090c:	1885883a 	add	r2,r3,r2
 8010910:	10800003 	ldbu	r2,0(r2)
 8010914:	10803fcc 	andi	r2,r2,255
 8010918:	1080201c 	xori	r2,r2,128
 801091c:	10bfe004 	addi	r2,r2,-128
 8010920:	10800bd8 	cmpnei	r2,r2,47
 8010924:	1000031e 	bne	r2,zero,8010934 <alt_find_file+0x74>
    {
      len -= 1;
 8010928:	e0bffe17 	ldw	r2,-8(fp)
 801092c:	10bfffc4 	addi	r2,r2,-1
 8010930:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010934:	e0bffe17 	ldw	r2,-8(fp)
 8010938:	e0ffff17 	ldw	r3,-4(fp)
 801093c:	1885883a 	add	r2,r3,r2
 8010940:	10800003 	ldbu	r2,0(r2)
 8010944:	10803fcc 	andi	r2,r2,255
 8010948:	1080201c 	xori	r2,r2,128
 801094c:	10bfe004 	addi	r2,r2,-128
 8010950:	10800be0 	cmpeqi	r2,r2,47
 8010954:	1000081e 	bne	r2,zero,8010978 <alt_find_file+0xb8>
 8010958:	e0bffe17 	ldw	r2,-8(fp)
 801095c:	e0ffff17 	ldw	r3,-4(fp)
 8010960:	1885883a 	add	r2,r3,r2
 8010964:	10800003 	ldbu	r2,0(r2)
 8010968:	10803fcc 	andi	r2,r2,255
 801096c:	1080201c 	xori	r2,r2,128
 8010970:	10bfe004 	addi	r2,r2,-128
 8010974:	10000a1e 	bne	r2,zero,80109a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010978:	e0bffd17 	ldw	r2,-12(fp)
 801097c:	10c00217 	ldw	r3,8(r2)
 8010980:	e0bffe17 	ldw	r2,-8(fp)
 8010984:	1809883a 	mov	r4,r3
 8010988:	e17fff17 	ldw	r5,-4(fp)
 801098c:	100d883a 	mov	r6,r2
 8010990:	8010b600 	call	8010b60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010994:	1000021e 	bne	r2,zero,80109a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010998:	e0bffd17 	ldw	r2,-12(fp)
 801099c:	00000806 	br	80109c0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80109a0:	e0bffd17 	ldw	r2,-12(fp)
 80109a4:	10800017 	ldw	r2,0(r2)
 80109a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80109ac:	e0fffd17 	ldw	r3,-12(fp)
 80109b0:	008200b4 	movhi	r2,2050
 80109b4:	10b5a404 	addi	r2,r2,-10608
 80109b8:	18bfcb1e 	bne	r3,r2,80108e8 <__alt_data_end+0xfc0108e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80109bc:	0005883a 	mov	r2,zero
}
 80109c0:	e037883a 	mov	sp,fp
 80109c4:	dfc00117 	ldw	ra,4(sp)
 80109c8:	df000017 	ldw	fp,0(sp)
 80109cc:	dec00204 	addi	sp,sp,8
 80109d0:	f800283a 	ret

080109d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80109d4:	defffc04 	addi	sp,sp,-16
 80109d8:	df000315 	stw	fp,12(sp)
 80109dc:	df000304 	addi	fp,sp,12
 80109e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80109e4:	00bffa04 	movi	r2,-24
 80109e8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80109ec:	e03ffd15 	stw	zero,-12(fp)
 80109f0:	00001d06 	br	8010a68 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 80109f4:	008200b4 	movhi	r2,2050
 80109f8:	10b11a04 	addi	r2,r2,-15256
 80109fc:	e0fffd17 	ldw	r3,-12(fp)
 8010a00:	18c00324 	muli	r3,r3,12
 8010a04:	10c5883a 	add	r2,r2,r3
 8010a08:	10800017 	ldw	r2,0(r2)
 8010a0c:	1000131e 	bne	r2,zero,8010a5c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8010a10:	008200b4 	movhi	r2,2050
 8010a14:	10b11a04 	addi	r2,r2,-15256
 8010a18:	e0fffd17 	ldw	r3,-12(fp)
 8010a1c:	18c00324 	muli	r3,r3,12
 8010a20:	10c5883a 	add	r2,r2,r3
 8010a24:	e0ffff17 	ldw	r3,-4(fp)
 8010a28:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010a2c:	008200b4 	movhi	r2,2050
 8010a30:	10b5a804 	addi	r2,r2,-10592
 8010a34:	10c00017 	ldw	r3,0(r2)
 8010a38:	e0bffd17 	ldw	r2,-12(fp)
 8010a3c:	1880040e 	bge	r3,r2,8010a50 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8010a40:	008200b4 	movhi	r2,2050
 8010a44:	10b5a804 	addi	r2,r2,-10592
 8010a48:	e0fffd17 	ldw	r3,-12(fp)
 8010a4c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010a50:	e0bffd17 	ldw	r2,-12(fp)
 8010a54:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8010a58:	00000606 	br	8010a74 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010a5c:	e0bffd17 	ldw	r2,-12(fp)
 8010a60:	10800044 	addi	r2,r2,1
 8010a64:	e0bffd15 	stw	r2,-12(fp)
 8010a68:	e0bffd17 	ldw	r2,-12(fp)
 8010a6c:	10800810 	cmplti	r2,r2,32
 8010a70:	103fe01e 	bne	r2,zero,80109f4 <__alt_data_end+0xfc0109f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010a74:	e0bffe17 	ldw	r2,-8(fp)
}
 8010a78:	e037883a 	mov	sp,fp
 8010a7c:	df000017 	ldw	fp,0(sp)
 8010a80:	dec00104 	addi	sp,sp,4
 8010a84:	f800283a 	ret

08010a88 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8010a88:	defffb04 	addi	sp,sp,-20
 8010a8c:	df000415 	stw	fp,16(sp)
 8010a90:	df000404 	addi	fp,sp,16
 8010a94:	e13ffe15 	stw	r4,-8(fp)
 8010a98:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8010a9c:	e0bfff17 	ldw	r2,-4(fp)
 8010aa0:	10840070 	cmpltui	r2,r2,4097
 8010aa4:	1000021e 	bne	r2,zero,8010ab0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8010aa8:	00840004 	movi	r2,4096
 8010aac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8010ab0:	e0fffe17 	ldw	r3,-8(fp)
 8010ab4:	e0bfff17 	ldw	r2,-4(fp)
 8010ab8:	1885883a 	add	r2,r3,r2
 8010abc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8010ac0:	e0bffe17 	ldw	r2,-8(fp)
 8010ac4:	e0bffc15 	stw	r2,-16(fp)
 8010ac8:	00000506 	br	8010ae0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8010acc:	e0bffc17 	ldw	r2,-16(fp)
 8010ad0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8010ad4:	e0bffc17 	ldw	r2,-16(fp)
 8010ad8:	10800804 	addi	r2,r2,32
 8010adc:	e0bffc15 	stw	r2,-16(fp)
 8010ae0:	e0fffc17 	ldw	r3,-16(fp)
 8010ae4:	e0bffd17 	ldw	r2,-12(fp)
 8010ae8:	18bff836 	bltu	r3,r2,8010acc <__alt_data_end+0xfc010acc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8010aec:	e0bffe17 	ldw	r2,-8(fp)
 8010af0:	108007cc 	andi	r2,r2,31
 8010af4:	10000226 	beq	r2,zero,8010b00 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8010af8:	e0bffc17 	ldw	r2,-16(fp)
 8010afc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8010b00:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8010b04:	e037883a 	mov	sp,fp
 8010b08:	df000017 	ldw	fp,0(sp)
 8010b0c:	dec00104 	addi	sp,sp,4
 8010b10:	f800283a 	ret

08010b14 <atexit>:
 8010b14:	200b883a 	mov	r5,r4
 8010b18:	000d883a 	mov	r6,zero
 8010b1c:	0009883a 	mov	r4,zero
 8010b20:	000f883a 	mov	r7,zero
 8010b24:	8010bdc1 	jmpi	8010bdc <__register_exitproc>

08010b28 <exit>:
 8010b28:	defffe04 	addi	sp,sp,-8
 8010b2c:	000b883a 	mov	r5,zero
 8010b30:	dc000015 	stw	r16,0(sp)
 8010b34:	dfc00115 	stw	ra,4(sp)
 8010b38:	2021883a 	mov	r16,r4
 8010b3c:	8010cf00 	call	8010cf0 <__call_exitprocs>
 8010b40:	008200b4 	movhi	r2,2050
 8010b44:	10b59e04 	addi	r2,r2,-10632
 8010b48:	11000017 	ldw	r4,0(r2)
 8010b4c:	20800f17 	ldw	r2,60(r4)
 8010b50:	10000126 	beq	r2,zero,8010b58 <exit+0x30>
 8010b54:	103ee83a 	callr	r2
 8010b58:	8009883a 	mov	r4,r16
 8010b5c:	8010e840 	call	8010e84 <_exit>

08010b60 <memcmp>:
 8010b60:	01c000c4 	movi	r7,3
 8010b64:	3980192e 	bgeu	r7,r6,8010bcc <memcmp+0x6c>
 8010b68:	2144b03a 	or	r2,r4,r5
 8010b6c:	11c4703a 	and	r2,r2,r7
 8010b70:	10000f26 	beq	r2,zero,8010bb0 <memcmp+0x50>
 8010b74:	20800003 	ldbu	r2,0(r4)
 8010b78:	28c00003 	ldbu	r3,0(r5)
 8010b7c:	10c0151e 	bne	r2,r3,8010bd4 <memcmp+0x74>
 8010b80:	31bfff84 	addi	r6,r6,-2
 8010b84:	01ffffc4 	movi	r7,-1
 8010b88:	00000406 	br	8010b9c <memcmp+0x3c>
 8010b8c:	20800003 	ldbu	r2,0(r4)
 8010b90:	28c00003 	ldbu	r3,0(r5)
 8010b94:	31bfffc4 	addi	r6,r6,-1
 8010b98:	10c00e1e 	bne	r2,r3,8010bd4 <memcmp+0x74>
 8010b9c:	21000044 	addi	r4,r4,1
 8010ba0:	29400044 	addi	r5,r5,1
 8010ba4:	31fff91e 	bne	r6,r7,8010b8c <__alt_data_end+0xfc010b8c>
 8010ba8:	0005883a 	mov	r2,zero
 8010bac:	f800283a 	ret
 8010bb0:	20c00017 	ldw	r3,0(r4)
 8010bb4:	28800017 	ldw	r2,0(r5)
 8010bb8:	1880041e 	bne	r3,r2,8010bcc <memcmp+0x6c>
 8010bbc:	31bfff04 	addi	r6,r6,-4
 8010bc0:	21000104 	addi	r4,r4,4
 8010bc4:	29400104 	addi	r5,r5,4
 8010bc8:	39bff936 	bltu	r7,r6,8010bb0 <__alt_data_end+0xfc010bb0>
 8010bcc:	303fe91e 	bne	r6,zero,8010b74 <__alt_data_end+0xfc010b74>
 8010bd0:	003ff506 	br	8010ba8 <__alt_data_end+0xfc010ba8>
 8010bd4:	10c5c83a 	sub	r2,r2,r3
 8010bd8:	f800283a 	ret

08010bdc <__register_exitproc>:
 8010bdc:	008200b4 	movhi	r2,2050
 8010be0:	defffa04 	addi	sp,sp,-24
 8010be4:	10b59e04 	addi	r2,r2,-10632
 8010be8:	dc000315 	stw	r16,12(sp)
 8010bec:	14000017 	ldw	r16,0(r2)
 8010bf0:	dc400415 	stw	r17,16(sp)
 8010bf4:	dfc00515 	stw	ra,20(sp)
 8010bf8:	80805217 	ldw	r2,328(r16)
 8010bfc:	2023883a 	mov	r17,r4
 8010c00:	10003626 	beq	r2,zero,8010cdc <__register_exitproc+0x100>
 8010c04:	10c00117 	ldw	r3,4(r2)
 8010c08:	010007c4 	movi	r4,31
 8010c0c:	20c00e16 	blt	r4,r3,8010c48 <__register_exitproc+0x6c>
 8010c10:	1a400044 	addi	r9,r3,1
 8010c14:	8800211e 	bne	r17,zero,8010c9c <__register_exitproc+0xc0>
 8010c18:	18c00084 	addi	r3,r3,2
 8010c1c:	18c7883a 	add	r3,r3,r3
 8010c20:	18c7883a 	add	r3,r3,r3
 8010c24:	12400115 	stw	r9,4(r2)
 8010c28:	10c7883a 	add	r3,r2,r3
 8010c2c:	19400015 	stw	r5,0(r3)
 8010c30:	0005883a 	mov	r2,zero
 8010c34:	dfc00517 	ldw	ra,20(sp)
 8010c38:	dc400417 	ldw	r17,16(sp)
 8010c3c:	dc000317 	ldw	r16,12(sp)
 8010c40:	dec00604 	addi	sp,sp,24
 8010c44:	f800283a 	ret
 8010c48:	00800034 	movhi	r2,0
 8010c4c:	10800004 	addi	r2,r2,0
 8010c50:	10002526 	beq	r2,zero,8010ce8 <__register_exitproc+0x10c>
 8010c54:	01006404 	movi	r4,400
 8010c58:	d9400015 	stw	r5,0(sp)
 8010c5c:	d9800115 	stw	r6,4(sp)
 8010c60:	d9c00215 	stw	r7,8(sp)
 8010c64:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8010c68:	d9400017 	ldw	r5,0(sp)
 8010c6c:	d9800117 	ldw	r6,4(sp)
 8010c70:	d9c00217 	ldw	r7,8(sp)
 8010c74:	10001c26 	beq	r2,zero,8010ce8 <__register_exitproc+0x10c>
 8010c78:	80c05217 	ldw	r3,328(r16)
 8010c7c:	10000115 	stw	zero,4(r2)
 8010c80:	02400044 	movi	r9,1
 8010c84:	10c00015 	stw	r3,0(r2)
 8010c88:	80805215 	stw	r2,328(r16)
 8010c8c:	10006215 	stw	zero,392(r2)
 8010c90:	10006315 	stw	zero,396(r2)
 8010c94:	0007883a 	mov	r3,zero
 8010c98:	883fdf26 	beq	r17,zero,8010c18 <__alt_data_end+0xfc010c18>
 8010c9c:	18d1883a 	add	r8,r3,r3
 8010ca0:	4211883a 	add	r8,r8,r8
 8010ca4:	1211883a 	add	r8,r2,r8
 8010ca8:	41802215 	stw	r6,136(r8)
 8010cac:	01000044 	movi	r4,1
 8010cb0:	11806217 	ldw	r6,392(r2)
 8010cb4:	20c8983a 	sll	r4,r4,r3
 8010cb8:	310cb03a 	or	r6,r6,r4
 8010cbc:	11806215 	stw	r6,392(r2)
 8010cc0:	41c04215 	stw	r7,264(r8)
 8010cc4:	01800084 	movi	r6,2
 8010cc8:	89bfd31e 	bne	r17,r6,8010c18 <__alt_data_end+0xfc010c18>
 8010ccc:	11806317 	ldw	r6,396(r2)
 8010cd0:	3108b03a 	or	r4,r6,r4
 8010cd4:	11006315 	stw	r4,396(r2)
 8010cd8:	003fcf06 	br	8010c18 <__alt_data_end+0xfc010c18>
 8010cdc:	80805304 	addi	r2,r16,332
 8010ce0:	80805215 	stw	r2,328(r16)
 8010ce4:	003fc706 	br	8010c04 <__alt_data_end+0xfc010c04>
 8010ce8:	00bfffc4 	movi	r2,-1
 8010cec:	003fd106 	br	8010c34 <__alt_data_end+0xfc010c34>

08010cf0 <__call_exitprocs>:
 8010cf0:	008200b4 	movhi	r2,2050
 8010cf4:	10b59e04 	addi	r2,r2,-10632
 8010cf8:	10800017 	ldw	r2,0(r2)
 8010cfc:	defff404 	addi	sp,sp,-48
 8010d00:	dd800815 	stw	r22,32(sp)
 8010d04:	d8800015 	stw	r2,0(sp)
 8010d08:	10805204 	addi	r2,r2,328
 8010d0c:	dd000615 	stw	r20,24(sp)
 8010d10:	dc800415 	stw	r18,16(sp)
 8010d14:	dfc00b15 	stw	ra,44(sp)
 8010d18:	df000a15 	stw	fp,40(sp)
 8010d1c:	ddc00915 	stw	r23,36(sp)
 8010d20:	dd400715 	stw	r21,28(sp)
 8010d24:	dcc00515 	stw	r19,20(sp)
 8010d28:	dc400315 	stw	r17,12(sp)
 8010d2c:	dc000215 	stw	r16,8(sp)
 8010d30:	2025883a 	mov	r18,r4
 8010d34:	2829883a 	mov	r20,r5
 8010d38:	d8800115 	stw	r2,4(sp)
 8010d3c:	05bfffc4 	movi	r22,-1
 8010d40:	d8800017 	ldw	r2,0(sp)
 8010d44:	14c05217 	ldw	r19,328(r2)
 8010d48:	98001d26 	beq	r19,zero,8010dc0 <__call_exitprocs+0xd0>
 8010d4c:	dd400117 	ldw	r21,4(sp)
 8010d50:	98800117 	ldw	r2,4(r19)
 8010d54:	173fffc4 	addi	fp,r2,-1
 8010d58:	e0000d16 	blt	fp,zero,8010d90 <__call_exitprocs+0xa0>
 8010d5c:	14000044 	addi	r16,r2,1
 8010d60:	8421883a 	add	r16,r16,r16
 8010d64:	8421883a 	add	r16,r16,r16
 8010d68:	84402004 	addi	r17,r16,128
 8010d6c:	9c63883a 	add	r17,r19,r17
 8010d70:	9c21883a 	add	r16,r19,r16
 8010d74:	a0001e26 	beq	r20,zero,8010df0 <__call_exitprocs+0x100>
 8010d78:	80804017 	ldw	r2,256(r16)
 8010d7c:	15001c26 	beq	r2,r20,8010df0 <__call_exitprocs+0x100>
 8010d80:	e73fffc4 	addi	fp,fp,-1
 8010d84:	843fff04 	addi	r16,r16,-4
 8010d88:	8c7fff04 	addi	r17,r17,-4
 8010d8c:	e5bff91e 	bne	fp,r22,8010d74 <__alt_data_end+0xfc010d74>
 8010d90:	00800034 	movhi	r2,0
 8010d94:	10800004 	addi	r2,r2,0
 8010d98:	10000926 	beq	r2,zero,8010dc0 <__call_exitprocs+0xd0>
 8010d9c:	98800117 	ldw	r2,4(r19)
 8010da0:	1000311e 	bne	r2,zero,8010e68 <__call_exitprocs+0x178>
 8010da4:	98800017 	ldw	r2,0(r19)
 8010da8:	10003426 	beq	r2,zero,8010e7c <__call_exitprocs+0x18c>
 8010dac:	9809883a 	mov	r4,r19
 8010db0:	a8800015 	stw	r2,0(r21)
 8010db4:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8010db8:	acc00017 	ldw	r19,0(r21)
 8010dbc:	983fe41e 	bne	r19,zero,8010d50 <__alt_data_end+0xfc010d50>
 8010dc0:	dfc00b17 	ldw	ra,44(sp)
 8010dc4:	df000a17 	ldw	fp,40(sp)
 8010dc8:	ddc00917 	ldw	r23,36(sp)
 8010dcc:	dd800817 	ldw	r22,32(sp)
 8010dd0:	dd400717 	ldw	r21,28(sp)
 8010dd4:	dd000617 	ldw	r20,24(sp)
 8010dd8:	dcc00517 	ldw	r19,20(sp)
 8010ddc:	dc800417 	ldw	r18,16(sp)
 8010de0:	dc400317 	ldw	r17,12(sp)
 8010de4:	dc000217 	ldw	r16,8(sp)
 8010de8:	dec00c04 	addi	sp,sp,48
 8010dec:	f800283a 	ret
 8010df0:	98800117 	ldw	r2,4(r19)
 8010df4:	80c00017 	ldw	r3,0(r16)
 8010df8:	10bfffc4 	addi	r2,r2,-1
 8010dfc:	17001526 	beq	r2,fp,8010e54 <__call_exitprocs+0x164>
 8010e00:	80000015 	stw	zero,0(r16)
 8010e04:	183fde26 	beq	r3,zero,8010d80 <__alt_data_end+0xfc010d80>
 8010e08:	00800044 	movi	r2,1
 8010e0c:	1708983a 	sll	r4,r2,fp
 8010e10:	98806217 	ldw	r2,392(r19)
 8010e14:	9dc00117 	ldw	r23,4(r19)
 8010e18:	2084703a 	and	r2,r4,r2
 8010e1c:	1000061e 	bne	r2,zero,8010e38 <__call_exitprocs+0x148>
 8010e20:	183ee83a 	callr	r3
 8010e24:	98800117 	ldw	r2,4(r19)
 8010e28:	15ffc51e 	bne	r2,r23,8010d40 <__alt_data_end+0xfc010d40>
 8010e2c:	a8800017 	ldw	r2,0(r21)
 8010e30:	14ffd326 	beq	r2,r19,8010d80 <__alt_data_end+0xfc010d80>
 8010e34:	003fc206 	br	8010d40 <__alt_data_end+0xfc010d40>
 8010e38:	98806317 	ldw	r2,396(r19)
 8010e3c:	2084703a 	and	r2,r4,r2
 8010e40:	1000061e 	bne	r2,zero,8010e5c <__call_exitprocs+0x16c>
 8010e44:	89400017 	ldw	r5,0(r17)
 8010e48:	9009883a 	mov	r4,r18
 8010e4c:	183ee83a 	callr	r3
 8010e50:	003ff406 	br	8010e24 <__alt_data_end+0xfc010e24>
 8010e54:	9f000115 	stw	fp,4(r19)
 8010e58:	003fea06 	br	8010e04 <__alt_data_end+0xfc010e04>
 8010e5c:	89000017 	ldw	r4,0(r17)
 8010e60:	183ee83a 	callr	r3
 8010e64:	003fef06 	br	8010e24 <__alt_data_end+0xfc010e24>
 8010e68:	98800017 	ldw	r2,0(r19)
 8010e6c:	982b883a 	mov	r21,r19
 8010e70:	1027883a 	mov	r19,r2
 8010e74:	983fb61e 	bne	r19,zero,8010d50 <__alt_data_end+0xfc010d50>
 8010e78:	003fd106 	br	8010dc0 <__alt_data_end+0xfc010dc0>
 8010e7c:	0005883a 	mov	r2,zero
 8010e80:	003ffa06 	br	8010e6c <__alt_data_end+0xfc010e6c>

08010e84 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8010e84:	defffd04 	addi	sp,sp,-12
 8010e88:	df000215 	stw	fp,8(sp)
 8010e8c:	df000204 	addi	fp,sp,8
 8010e90:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8010e94:	0001883a 	nop
 8010e98:	e0bfff17 	ldw	r2,-4(fp)
 8010e9c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8010ea0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8010ea4:	10000226 	beq	r2,zero,8010eb0 <_exit+0x2c>
    ALT_SIM_FAIL();
 8010ea8:	002af070 	cmpltui	zero,zero,43969
 8010eac:	00000106 	br	8010eb4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8010eb0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8010eb4:	003fff06 	br	8010eb4 <__alt_data_end+0xfc010eb4>
